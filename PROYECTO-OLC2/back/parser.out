Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> create_database_statement
Rule 5     statement -> use_statement
Rule 6     statement -> declare_statement
Rule 7     statement -> set_statement
Rule 8     statement -> create_table_statement
Rule 9     statement -> select_statement
Rule 10    statement -> insert_statement
Rule 11    statement -> create_function_statement
Rule 12    statement -> create_procedure_statement
Rule 13    statement -> alter_table_statement
Rule 14    statement -> if_statement
Rule 15    statement -> exec_statement
Rule 16    statement -> drop_table_statement
Rule 17    statement -> case_statement
Rule 18    statement -> update_statement
Rule 19    statement -> while_statement
Rule 20    statement -> truncate_statement
Rule 21    statement -> delete_statement
Rule 22    create_database_statement -> CREATE DATA BASE NAME SEMICOLON
Rule 23    use_statement -> USE NAME SEMICOLON
Rule 24    declare_statement -> DECLARE ID AS type SEMICOLON
Rule 25    set_statement -> SET assignments SEMICOLON
Rule 26    assignments -> assignments COMMA ID ASSIGN a
Rule 27    assignments -> ID ASSIGN a
Rule 28    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
Rule 29    properties -> properties COMMA property
Rule 30    properties -> property
Rule 31    property -> NAME type null_prod PRIMARY KEY
Rule 32    property -> NAME type null_prod
Rule 33    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 34    null_prod -> NOT NULL
Rule 35    null_prod -> NULL
Rule 36    null_prod -> <empty>
Rule 37    select_statement -> SELECT columns FROM NAME SEMICOLON
Rule 38    select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON
Rule 39    insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
Rule 40    columns -> columns COMMA column
Rule 41    columns -> column
Rule 42    column -> TIMES
Rule 43    column -> NAME
Rule 44    column -> call_function_prod
Rule 45    vals -> vals COMMA a
Rule 46    vals -> a
Rule 47    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
Rule 48    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
Rule 49    parameters -> parameters COMMA ID AS type
Rule 50    parameters -> ID AS type
Rule 51    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
Rule 52    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
Rule 53    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
Rule 54    exec_statement -> EXEC NAME vals SEMICOLON
Rule 55    drop_table_statement -> DROP TABLE NAME SEMICOLON
Rule 56    update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON
Rule 57    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 58    column_assignments -> NAME ASSIGN a
Rule 59    while_statement -> WHILE a BEGIN statements END SEMICOLON
Rule 60    truncate_statement -> TRUNCATE TABLE NAME SEMICOLON
Rule 61    delete_statement -> DELETE FROM NAME WHERE a SEMICOLON
Rule 62    case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END
Rule 63    when_statement -> WHEN a THEN a when_statement
Rule 64    when_statement -> <empty>
Rule 65    type -> INT
Rule 66    type -> DECIMAL
Rule 67    type -> BIT
Rule 68    type -> NCHAR
Rule 69    type -> NVARCHAR
Rule 70    type -> DATE
Rule 71    type -> DATETIME
Rule 72    a -> a OR b
Rule 73    a -> b
Rule 74    b -> b AND c
Rule 75    b -> c
Rule 76    c -> NOT_SIGN d
Rule 77    c -> d
Rule 78    d -> d EQUALS e
Rule 79    d -> d NOT_EQ e
Rule 80    d -> d LESS_THAN e
Rule 81    d -> d GREATER_THAN e
Rule 82    d -> d LESS_EQ e
Rule 83    d -> d GREATER_EQ e
Rule 84    d -> e
Rule 85    e -> e PLUS f
Rule 86    e -> e MINUS f
Rule 87    e -> f
Rule 88    f -> f TIMES g
Rule 89    f -> f DIVIDE g
Rule 90    f -> g
Rule 91    g -> MINUS h
Rule 92    g -> h
Rule 93    h -> INTEGER_VALUE
Rule 94    h -> DECIMAL_VALUE
Rule 95    h -> STRING
Rule 96    h -> ID
Rule 97    call_function_prod -> HOY L_PAREN R_PAREN
Rule 98    call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN
Rule 99    call_function_prod -> SUBSTRAER L_PAREN a R_PAREN
Rule 100   call_function_prod -> CONTAR L_PAREN a R_PAREN
Rule 101   call_function_prod -> SUMA L_PAREN a R_PAREN
Rule 102   call_function_prod -> CAST L_PAREN a AS type R_PAREN

Terminals, with rules where they appear

ADD                  : 51
ALTER                : 51 52
AND                  : 74
AS                   : 24 47 48 49 50 102
ASSIGN               : 26 27 57 58
BASE                 : 22
BEGIN                : 47 48 59
BIT                  : 67
CASE                 : 62
CAST                 : 102
COLUMN               : 51 52
COMMA                : 26 29 40 45 49 53 53 57 98
CONCATENAR           : 98
CONTAR               : 100
CREATE               : 22 28 47 48
DATA                 : 22
DATE                 : 70
DATETIME             : 71
DECIMAL              : 66
DECIMAL_VALUE        : 94
DECLARE              : 24
DELETE               : 61
DIVIDE               : 89
DROP                 : 52 55
ELSE                 : 62
END                  : 47 48 59 62
EQUALS               : 78
EXEC                 : 54
FROM                 : 37 38 61
FUNCTION             : 47
GREATER_EQ           : 83
GREATER_THAN         : 81
HOY                  : 97
ID                   : 24 26 27 49 50 96
IF                   : 53
INSERT               : 39
INT                  : 65
INTEGER_VALUE        : 93
INTO                 : 39
KEY                  : 31
LESS_EQ              : 82
LESS_THAN            : 80
L_PAREN              : 28 33 39 39 47 48 53 97 98 99 100 101 102
MINUS                : 86 91
NAME                 : 22 23 28 31 32 33 33 33 37 38 39 43 47 48 51 51 52 52 54 55 56 57 58 60 61
NCHAR                : 68
NOT                  : 34
NOT_EQ               : 79
NOT_SIGN             : 76
NULL                 : 34 35
NVARCHAR             : 69
OR                   : 72
PLUS                 : 85
PRIMARY              : 31
PROCEDURE            : 48
REFERENCE            : 33
RETURN               : 47
R_PAREN              : 28 33 39 39 47 48 53 97 98 99 100 101 102
SELECT               : 37 38
SEMICOLON            : 22 23 24 25 28 37 38 39 47 48 51 52 53 54 55 56 59 60 61
SET                  : 25 56
STRING               : 95
SUBSTRAER            : 99
SUMA                 : 101
TABLE                : 28 51 52 55 60
THEN                 : 62 62 63
TIMES                : 42 88
TRUNCATE             : 60
UPDATE               : 56
USE                  : 23
VALUES               : 39
WHEN                 : 62 63
WHERE                : 38 56 61
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

a                    : 26 27 38 45 46 53 53 53 56 57 58 59 61 62 62 62 63 63 72 98 98 99 100 101 102
alter_table_statement : 13
assignments          : 25 26
b                    : 72 73 74
c                    : 74 75
call_function_prod   : 44
case_statement       : 17
column               : 40 41
column_assignments   : 56 57
columns              : 37 38 39 40
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 76 77 78 79 80 81 82 83
declare_statement    : 6
delete_statement     : 21
drop_table_statement : 16
e                    : 78 79 80 81 82 83 84 85 86
exec_statement       : 15
f                    : 85 86 87 88 89
g                    : 88 89 90
h                    : 91 92
if_statement         : 14
init                 : 0
insert_statement     : 10
null_prod            : 31 32 33
parameters           : 47 48 49
properties           : 28 29
property             : 29 30
select_statement     : 9
set_statement        : 7
statement            : 2
statements           : 1 2 47 48 59
truncate_statement   : 20
type                 : 24 31 32 33 47 49 50 51 102
update_statement     : 18
use_statement        : 5
vals                 : 39 45 54
when_statement       : 62 63
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    init                           shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (54) exec_statement -> . EXEC NAME vals SEMICOLON
    (55) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (62) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (56) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (59) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (60) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (61) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 3

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    CASE            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> create_database_statement .

    CREATE          reduce using rule 4 (statement -> create_database_statement .)
    USE             reduce using rule 4 (statement -> create_database_statement .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement .)
    SET             reduce using rule 4 (statement -> create_database_statement .)
    SELECT          reduce using rule 4 (statement -> create_database_statement .)
    INSERT          reduce using rule 4 (statement -> create_database_statement .)
    ALTER           reduce using rule 4 (statement -> create_database_statement .)
    IF              reduce using rule 4 (statement -> create_database_statement .)
    EXEC            reduce using rule 4 (statement -> create_database_statement .)
    DROP            reduce using rule 4 (statement -> create_database_statement .)
    CASE            reduce using rule 4 (statement -> create_database_statement .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement .)
    WHILE           reduce using rule 4 (statement -> create_database_statement .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement .)
    DELETE          reduce using rule 4 (statement -> create_database_statement .)
    $end            reduce using rule 4 (statement -> create_database_statement .)
    END             reduce using rule 4 (statement -> create_database_statement .)


state 5

    (5) statement -> use_statement .

    CREATE          reduce using rule 5 (statement -> use_statement .)
    USE             reduce using rule 5 (statement -> use_statement .)
    DECLARE         reduce using rule 5 (statement -> use_statement .)
    SET             reduce using rule 5 (statement -> use_statement .)
    SELECT          reduce using rule 5 (statement -> use_statement .)
    INSERT          reduce using rule 5 (statement -> use_statement .)
    ALTER           reduce using rule 5 (statement -> use_statement .)
    IF              reduce using rule 5 (statement -> use_statement .)
    EXEC            reduce using rule 5 (statement -> use_statement .)
    DROP            reduce using rule 5 (statement -> use_statement .)
    CASE            reduce using rule 5 (statement -> use_statement .)
    UPDATE          reduce using rule 5 (statement -> use_statement .)
    WHILE           reduce using rule 5 (statement -> use_statement .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement .)
    DELETE          reduce using rule 5 (statement -> use_statement .)
    $end            reduce using rule 5 (statement -> use_statement .)
    END             reduce using rule 5 (statement -> use_statement .)


state 6

    (6) statement -> declare_statement .

    CREATE          reduce using rule 6 (statement -> declare_statement .)
    USE             reduce using rule 6 (statement -> declare_statement .)
    DECLARE         reduce using rule 6 (statement -> declare_statement .)
    SET             reduce using rule 6 (statement -> declare_statement .)
    SELECT          reduce using rule 6 (statement -> declare_statement .)
    INSERT          reduce using rule 6 (statement -> declare_statement .)
    ALTER           reduce using rule 6 (statement -> declare_statement .)
    IF              reduce using rule 6 (statement -> declare_statement .)
    EXEC            reduce using rule 6 (statement -> declare_statement .)
    DROP            reduce using rule 6 (statement -> declare_statement .)
    CASE            reduce using rule 6 (statement -> declare_statement .)
    UPDATE          reduce using rule 6 (statement -> declare_statement .)
    WHILE           reduce using rule 6 (statement -> declare_statement .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement .)
    DELETE          reduce using rule 6 (statement -> declare_statement .)
    $end            reduce using rule 6 (statement -> declare_statement .)
    END             reduce using rule 6 (statement -> declare_statement .)


state 7

    (7) statement -> set_statement .

    CREATE          reduce using rule 7 (statement -> set_statement .)
    USE             reduce using rule 7 (statement -> set_statement .)
    DECLARE         reduce using rule 7 (statement -> set_statement .)
    SET             reduce using rule 7 (statement -> set_statement .)
    SELECT          reduce using rule 7 (statement -> set_statement .)
    INSERT          reduce using rule 7 (statement -> set_statement .)
    ALTER           reduce using rule 7 (statement -> set_statement .)
    IF              reduce using rule 7 (statement -> set_statement .)
    EXEC            reduce using rule 7 (statement -> set_statement .)
    DROP            reduce using rule 7 (statement -> set_statement .)
    CASE            reduce using rule 7 (statement -> set_statement .)
    UPDATE          reduce using rule 7 (statement -> set_statement .)
    WHILE           reduce using rule 7 (statement -> set_statement .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement .)
    DELETE          reduce using rule 7 (statement -> set_statement .)
    $end            reduce using rule 7 (statement -> set_statement .)
    END             reduce using rule 7 (statement -> set_statement .)


state 8

    (8) statement -> create_table_statement .

    CREATE          reduce using rule 8 (statement -> create_table_statement .)
    USE             reduce using rule 8 (statement -> create_table_statement .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement .)
    SET             reduce using rule 8 (statement -> create_table_statement .)
    SELECT          reduce using rule 8 (statement -> create_table_statement .)
    INSERT          reduce using rule 8 (statement -> create_table_statement .)
    ALTER           reduce using rule 8 (statement -> create_table_statement .)
    IF              reduce using rule 8 (statement -> create_table_statement .)
    EXEC            reduce using rule 8 (statement -> create_table_statement .)
    DROP            reduce using rule 8 (statement -> create_table_statement .)
    CASE            reduce using rule 8 (statement -> create_table_statement .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement .)
    WHILE           reduce using rule 8 (statement -> create_table_statement .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement .)
    DELETE          reduce using rule 8 (statement -> create_table_statement .)
    $end            reduce using rule 8 (statement -> create_table_statement .)
    END             reduce using rule 8 (statement -> create_table_statement .)


state 9

    (9) statement -> select_statement .

    CREATE          reduce using rule 9 (statement -> select_statement .)
    USE             reduce using rule 9 (statement -> select_statement .)
    DECLARE         reduce using rule 9 (statement -> select_statement .)
    SET             reduce using rule 9 (statement -> select_statement .)
    SELECT          reduce using rule 9 (statement -> select_statement .)
    INSERT          reduce using rule 9 (statement -> select_statement .)
    ALTER           reduce using rule 9 (statement -> select_statement .)
    IF              reduce using rule 9 (statement -> select_statement .)
    EXEC            reduce using rule 9 (statement -> select_statement .)
    DROP            reduce using rule 9 (statement -> select_statement .)
    CASE            reduce using rule 9 (statement -> select_statement .)
    UPDATE          reduce using rule 9 (statement -> select_statement .)
    WHILE           reduce using rule 9 (statement -> select_statement .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement .)
    DELETE          reduce using rule 9 (statement -> select_statement .)
    $end            reduce using rule 9 (statement -> select_statement .)
    END             reduce using rule 9 (statement -> select_statement .)


state 10

    (10) statement -> insert_statement .

    CREATE          reduce using rule 10 (statement -> insert_statement .)
    USE             reduce using rule 10 (statement -> insert_statement .)
    DECLARE         reduce using rule 10 (statement -> insert_statement .)
    SET             reduce using rule 10 (statement -> insert_statement .)
    SELECT          reduce using rule 10 (statement -> insert_statement .)
    INSERT          reduce using rule 10 (statement -> insert_statement .)
    ALTER           reduce using rule 10 (statement -> insert_statement .)
    IF              reduce using rule 10 (statement -> insert_statement .)
    EXEC            reduce using rule 10 (statement -> insert_statement .)
    DROP            reduce using rule 10 (statement -> insert_statement .)
    CASE            reduce using rule 10 (statement -> insert_statement .)
    UPDATE          reduce using rule 10 (statement -> insert_statement .)
    WHILE           reduce using rule 10 (statement -> insert_statement .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement .)
    DELETE          reduce using rule 10 (statement -> insert_statement .)
    $end            reduce using rule 10 (statement -> insert_statement .)
    END             reduce using rule 10 (statement -> insert_statement .)


state 11

    (11) statement -> create_function_statement .

    CREATE          reduce using rule 11 (statement -> create_function_statement .)
    USE             reduce using rule 11 (statement -> create_function_statement .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement .)
    SET             reduce using rule 11 (statement -> create_function_statement .)
    SELECT          reduce using rule 11 (statement -> create_function_statement .)
    INSERT          reduce using rule 11 (statement -> create_function_statement .)
    ALTER           reduce using rule 11 (statement -> create_function_statement .)
    IF              reduce using rule 11 (statement -> create_function_statement .)
    EXEC            reduce using rule 11 (statement -> create_function_statement .)
    DROP            reduce using rule 11 (statement -> create_function_statement .)
    CASE            reduce using rule 11 (statement -> create_function_statement .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement .)
    WHILE           reduce using rule 11 (statement -> create_function_statement .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement .)
    DELETE          reduce using rule 11 (statement -> create_function_statement .)
    $end            reduce using rule 11 (statement -> create_function_statement .)
    END             reduce using rule 11 (statement -> create_function_statement .)


state 12

    (12) statement -> create_procedure_statement .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement .)
    USE             reduce using rule 12 (statement -> create_procedure_statement .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement .)
    SET             reduce using rule 12 (statement -> create_procedure_statement .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement .)
    IF              reduce using rule 12 (statement -> create_procedure_statement .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement .)
    CASE            reduce using rule 12 (statement -> create_procedure_statement .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement .)
    $end            reduce using rule 12 (statement -> create_procedure_statement .)
    END             reduce using rule 12 (statement -> create_procedure_statement .)


state 13

    (13) statement -> alter_table_statement .

    CREATE          reduce using rule 13 (statement -> alter_table_statement .)
    USE             reduce using rule 13 (statement -> alter_table_statement .)
    DECLARE         reduce using rule 13 (statement -> alter_table_statement .)
    SET             reduce using rule 13 (statement -> alter_table_statement .)
    SELECT          reduce using rule 13 (statement -> alter_table_statement .)
    INSERT          reduce using rule 13 (statement -> alter_table_statement .)
    ALTER           reduce using rule 13 (statement -> alter_table_statement .)
    IF              reduce using rule 13 (statement -> alter_table_statement .)
    EXEC            reduce using rule 13 (statement -> alter_table_statement .)
    DROP            reduce using rule 13 (statement -> alter_table_statement .)
    CASE            reduce using rule 13 (statement -> alter_table_statement .)
    UPDATE          reduce using rule 13 (statement -> alter_table_statement .)
    WHILE           reduce using rule 13 (statement -> alter_table_statement .)
    TRUNCATE        reduce using rule 13 (statement -> alter_table_statement .)
    DELETE          reduce using rule 13 (statement -> alter_table_statement .)
    $end            reduce using rule 13 (statement -> alter_table_statement .)
    END             reduce using rule 13 (statement -> alter_table_statement .)


state 14

    (14) statement -> if_statement .

    CREATE          reduce using rule 14 (statement -> if_statement .)
    USE             reduce using rule 14 (statement -> if_statement .)
    DECLARE         reduce using rule 14 (statement -> if_statement .)
    SET             reduce using rule 14 (statement -> if_statement .)
    SELECT          reduce using rule 14 (statement -> if_statement .)
    INSERT          reduce using rule 14 (statement -> if_statement .)
    ALTER           reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    EXEC            reduce using rule 14 (statement -> if_statement .)
    DROP            reduce using rule 14 (statement -> if_statement .)
    CASE            reduce using rule 14 (statement -> if_statement .)
    UPDATE          reduce using rule 14 (statement -> if_statement .)
    WHILE           reduce using rule 14 (statement -> if_statement .)
    TRUNCATE        reduce using rule 14 (statement -> if_statement .)
    DELETE          reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    END             reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> exec_statement .

    CREATE          reduce using rule 15 (statement -> exec_statement .)
    USE             reduce using rule 15 (statement -> exec_statement .)
    DECLARE         reduce using rule 15 (statement -> exec_statement .)
    SET             reduce using rule 15 (statement -> exec_statement .)
    SELECT          reduce using rule 15 (statement -> exec_statement .)
    INSERT          reduce using rule 15 (statement -> exec_statement .)
    ALTER           reduce using rule 15 (statement -> exec_statement .)
    IF              reduce using rule 15 (statement -> exec_statement .)
    EXEC            reduce using rule 15 (statement -> exec_statement .)
    DROP            reduce using rule 15 (statement -> exec_statement .)
    CASE            reduce using rule 15 (statement -> exec_statement .)
    UPDATE          reduce using rule 15 (statement -> exec_statement .)
    WHILE           reduce using rule 15 (statement -> exec_statement .)
    TRUNCATE        reduce using rule 15 (statement -> exec_statement .)
    DELETE          reduce using rule 15 (statement -> exec_statement .)
    $end            reduce using rule 15 (statement -> exec_statement .)
    END             reduce using rule 15 (statement -> exec_statement .)


state 16

    (16) statement -> drop_table_statement .

    CREATE          reduce using rule 16 (statement -> drop_table_statement .)
    USE             reduce using rule 16 (statement -> drop_table_statement .)
    DECLARE         reduce using rule 16 (statement -> drop_table_statement .)
    SET             reduce using rule 16 (statement -> drop_table_statement .)
    SELECT          reduce using rule 16 (statement -> drop_table_statement .)
    INSERT          reduce using rule 16 (statement -> drop_table_statement .)
    ALTER           reduce using rule 16 (statement -> drop_table_statement .)
    IF              reduce using rule 16 (statement -> drop_table_statement .)
    EXEC            reduce using rule 16 (statement -> drop_table_statement .)
    DROP            reduce using rule 16 (statement -> drop_table_statement .)
    CASE            reduce using rule 16 (statement -> drop_table_statement .)
    UPDATE          reduce using rule 16 (statement -> drop_table_statement .)
    WHILE           reduce using rule 16 (statement -> drop_table_statement .)
    TRUNCATE        reduce using rule 16 (statement -> drop_table_statement .)
    DELETE          reduce using rule 16 (statement -> drop_table_statement .)
    $end            reduce using rule 16 (statement -> drop_table_statement .)
    END             reduce using rule 16 (statement -> drop_table_statement .)


state 17

    (17) statement -> case_statement .

    CREATE          reduce using rule 17 (statement -> case_statement .)
    USE             reduce using rule 17 (statement -> case_statement .)
    DECLARE         reduce using rule 17 (statement -> case_statement .)
    SET             reduce using rule 17 (statement -> case_statement .)
    SELECT          reduce using rule 17 (statement -> case_statement .)
    INSERT          reduce using rule 17 (statement -> case_statement .)
    ALTER           reduce using rule 17 (statement -> case_statement .)
    IF              reduce using rule 17 (statement -> case_statement .)
    EXEC            reduce using rule 17 (statement -> case_statement .)
    DROP            reduce using rule 17 (statement -> case_statement .)
    CASE            reduce using rule 17 (statement -> case_statement .)
    UPDATE          reduce using rule 17 (statement -> case_statement .)
    WHILE           reduce using rule 17 (statement -> case_statement .)
    TRUNCATE        reduce using rule 17 (statement -> case_statement .)
    DELETE          reduce using rule 17 (statement -> case_statement .)
    $end            reduce using rule 17 (statement -> case_statement .)
    END             reduce using rule 17 (statement -> case_statement .)


state 18

    (18) statement -> update_statement .

    CREATE          reduce using rule 18 (statement -> update_statement .)
    USE             reduce using rule 18 (statement -> update_statement .)
    DECLARE         reduce using rule 18 (statement -> update_statement .)
    SET             reduce using rule 18 (statement -> update_statement .)
    SELECT          reduce using rule 18 (statement -> update_statement .)
    INSERT          reduce using rule 18 (statement -> update_statement .)
    ALTER           reduce using rule 18 (statement -> update_statement .)
    IF              reduce using rule 18 (statement -> update_statement .)
    EXEC            reduce using rule 18 (statement -> update_statement .)
    DROP            reduce using rule 18 (statement -> update_statement .)
    CASE            reduce using rule 18 (statement -> update_statement .)
    UPDATE          reduce using rule 18 (statement -> update_statement .)
    WHILE           reduce using rule 18 (statement -> update_statement .)
    TRUNCATE        reduce using rule 18 (statement -> update_statement .)
    DELETE          reduce using rule 18 (statement -> update_statement .)
    $end            reduce using rule 18 (statement -> update_statement .)
    END             reduce using rule 18 (statement -> update_statement .)


state 19

    (19) statement -> while_statement .

    CREATE          reduce using rule 19 (statement -> while_statement .)
    USE             reduce using rule 19 (statement -> while_statement .)
    DECLARE         reduce using rule 19 (statement -> while_statement .)
    SET             reduce using rule 19 (statement -> while_statement .)
    SELECT          reduce using rule 19 (statement -> while_statement .)
    INSERT          reduce using rule 19 (statement -> while_statement .)
    ALTER           reduce using rule 19 (statement -> while_statement .)
    IF              reduce using rule 19 (statement -> while_statement .)
    EXEC            reduce using rule 19 (statement -> while_statement .)
    DROP            reduce using rule 19 (statement -> while_statement .)
    CASE            reduce using rule 19 (statement -> while_statement .)
    UPDATE          reduce using rule 19 (statement -> while_statement .)
    WHILE           reduce using rule 19 (statement -> while_statement .)
    TRUNCATE        reduce using rule 19 (statement -> while_statement .)
    DELETE          reduce using rule 19 (statement -> while_statement .)
    $end            reduce using rule 19 (statement -> while_statement .)
    END             reduce using rule 19 (statement -> while_statement .)


state 20

    (20) statement -> truncate_statement .

    CREATE          reduce using rule 20 (statement -> truncate_statement .)
    USE             reduce using rule 20 (statement -> truncate_statement .)
    DECLARE         reduce using rule 20 (statement -> truncate_statement .)
    SET             reduce using rule 20 (statement -> truncate_statement .)
    SELECT          reduce using rule 20 (statement -> truncate_statement .)
    INSERT          reduce using rule 20 (statement -> truncate_statement .)
    ALTER           reduce using rule 20 (statement -> truncate_statement .)
    IF              reduce using rule 20 (statement -> truncate_statement .)
    EXEC            reduce using rule 20 (statement -> truncate_statement .)
    DROP            reduce using rule 20 (statement -> truncate_statement .)
    CASE            reduce using rule 20 (statement -> truncate_statement .)
    UPDATE          reduce using rule 20 (statement -> truncate_statement .)
    WHILE           reduce using rule 20 (statement -> truncate_statement .)
    TRUNCATE        reduce using rule 20 (statement -> truncate_statement .)
    DELETE          reduce using rule 20 (statement -> truncate_statement .)
    $end            reduce using rule 20 (statement -> truncate_statement .)
    END             reduce using rule 20 (statement -> truncate_statement .)


state 21

    (21) statement -> delete_statement .

    CREATE          reduce using rule 21 (statement -> delete_statement .)
    USE             reduce using rule 21 (statement -> delete_statement .)
    DECLARE         reduce using rule 21 (statement -> delete_statement .)
    SET             reduce using rule 21 (statement -> delete_statement .)
    SELECT          reduce using rule 21 (statement -> delete_statement .)
    INSERT          reduce using rule 21 (statement -> delete_statement .)
    ALTER           reduce using rule 21 (statement -> delete_statement .)
    IF              reduce using rule 21 (statement -> delete_statement .)
    EXEC            reduce using rule 21 (statement -> delete_statement .)
    DROP            reduce using rule 21 (statement -> delete_statement .)
    CASE            reduce using rule 21 (statement -> delete_statement .)
    UPDATE          reduce using rule 21 (statement -> delete_statement .)
    WHILE           reduce using rule 21 (statement -> delete_statement .)
    TRUNCATE        reduce using rule 21 (statement -> delete_statement .)
    DELETE          reduce using rule 21 (statement -> delete_statement .)
    $end            reduce using rule 21 (statement -> delete_statement .)
    END             reduce using rule 21 (statement -> delete_statement .)


state 22

    (22) create_database_statement -> CREATE . DATA BASE NAME SEMICOLON
    (28) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (47) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    DATA            shift and go to state 37
    TABLE           shift and go to state 38
    FUNCTION        shift and go to state 39
    PROCEDURE       shift and go to state 40


state 23

    (23) use_statement -> USE . NAME SEMICOLON

    NAME            shift and go to state 41


state 24

    (24) declare_statement -> DECLARE . ID AS type SEMICOLON

    ID              shift and go to state 42


state 25

    (25) set_statement -> SET . assignments SEMICOLON
    (26) assignments -> . assignments COMMA ID ASSIGN a
    (27) assignments -> . ID ASSIGN a

    ID              shift and go to state 44

    assignments                    shift and go to state 43

state 26

    (37) select_statement -> SELECT . columns FROM NAME SEMICOLON
    (38) select_statement -> SELECT . columns FROM NAME WHERE a SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (97) call_function_prod -> . HOY L_PAREN R_PAREN
    (98) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (99) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (100) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (101) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (102) call_function_prod -> . CAST L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAST            shift and go to state 55

    columns                        shift and go to state 45
    column                         shift and go to state 47
    call_function_prod             shift and go to state 49

state 27

    (39) insert_statement -> INSERT . INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    INTO            shift and go to state 56


state 28

    (51) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME SEMICOLON

    TABLE           shift and go to state 57


state 29

    (55) drop_table_statement -> DROP . TABLE NAME SEMICOLON

    TABLE           shift and go to state 58


state 30

    (53) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON

    L_PAREN         shift and go to state 59


state 31

    (54) exec_statement -> EXEC . NAME vals SEMICOLON

    NAME            shift and go to state 60


state 32

    (62) case_statement -> CASE . WHEN a THEN a when_statement ELSE THEN a END

    WHEN            shift and go to state 61


state 33

    (56) update_statement -> UPDATE . NAME SET column_assignments WHERE a SEMICOLON

    NAME            shift and go to state 62


state 34

    (59) while_statement -> WHILE . a BEGIN statements END SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 63
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 35

    (60) truncate_statement -> TRUNCATE . TABLE NAME SEMICOLON

    TABLE           shift and go to state 77


state 36

    (61) delete_statement -> DELETE . FROM NAME WHERE a SEMICOLON

    FROM            shift and go to state 78


state 37

    (22) create_database_statement -> CREATE DATA . BASE NAME SEMICOLON

    BASE            shift and go to state 79


state 38

    (28) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN SEMICOLON

    NAME            shift and go to state 80


state 39

    (47) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 81


state 40

    (48) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 82


state 41

    (23) use_statement -> USE NAME . SEMICOLON

    SEMICOLON       shift and go to state 83


state 42

    (24) declare_statement -> DECLARE ID . AS type SEMICOLON

    AS              shift and go to state 84


state 43

    (25) set_statement -> SET assignments . SEMICOLON
    (26) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       shift and go to state 85
    COMMA           shift and go to state 86


state 44

    (27) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 87


state 45

    (37) select_statement -> SELECT columns . FROM NAME SEMICOLON
    (38) select_statement -> SELECT columns . FROM NAME WHERE a SEMICOLON
    (40) columns -> columns . COMMA column

    FROM            shift and go to state 88
    COMMA           shift and go to state 89


state 46

    (43) column -> NAME .

    FROM            reduce using rule 43 (column -> NAME .)
    COMMA           reduce using rule 43 (column -> NAME .)
    R_PAREN         reduce using rule 43 (column -> NAME .)


state 47

    (41) columns -> column .

    FROM            reduce using rule 41 (columns -> column .)
    COMMA           reduce using rule 41 (columns -> column .)
    R_PAREN         reduce using rule 41 (columns -> column .)


state 48

    (42) column -> TIMES .

    FROM            reduce using rule 42 (column -> TIMES .)
    COMMA           reduce using rule 42 (column -> TIMES .)
    R_PAREN         reduce using rule 42 (column -> TIMES .)


state 49

    (44) column -> call_function_prod .

    FROM            reduce using rule 44 (column -> call_function_prod .)
    COMMA           reduce using rule 44 (column -> call_function_prod .)
    R_PAREN         reduce using rule 44 (column -> call_function_prod .)


state 50

    (97) call_function_prod -> HOY . L_PAREN R_PAREN

    L_PAREN         shift and go to state 90


state 51

    (98) call_function_prod -> CONCATENAR . L_PAREN a COMMA a R_PAREN

    L_PAREN         shift and go to state 91


state 52

    (99) call_function_prod -> SUBSTRAER . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 92


state 53

    (100) call_function_prod -> CONTAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 93


state 54

    (101) call_function_prod -> SUMA . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 94


state 55

    (102) call_function_prod -> CAST . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 95


state 56

    (39) insert_statement -> INSERT INTO . NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    NAME            shift and go to state 96


state 57

    (51) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME SEMICOLON

    NAME            shift and go to state 97


state 58

    (55) drop_table_statement -> DROP TABLE . NAME SEMICOLON

    NAME            shift and go to state 98


state 59

    (53) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 99
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 60

    (54) exec_statement -> EXEC NAME . vals SEMICOLON
    (45) vals -> . vals COMMA a
    (46) vals -> . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    vals                           shift and go to state 100
    a                              shift and go to state 101
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 61

    (62) case_statement -> CASE WHEN . a THEN a when_statement ELSE THEN a END
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 102
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 62

    (56) update_statement -> UPDATE NAME . SET column_assignments WHERE a SEMICOLON

    SET             shift and go to state 103


state 63

    (59) while_statement -> WHILE a . BEGIN statements END SEMICOLON
    (72) a -> a . OR b

    BEGIN           shift and go to state 104
    OR              shift and go to state 105


state 64

    (73) a -> b .
    (74) b -> b . AND c

    BEGIN           reduce using rule 73 (a -> b .)
    OR              reduce using rule 73 (a -> b .)
    COMMA           reduce using rule 73 (a -> b .)
    SEMICOLON       reduce using rule 73 (a -> b .)
    THEN            reduce using rule 73 (a -> b .)
    R_PAREN         reduce using rule 73 (a -> b .)
    AS              reduce using rule 73 (a -> b .)
    WHEN            reduce using rule 73 (a -> b .)
    ELSE            reduce using rule 73 (a -> b .)
    WHERE           reduce using rule 73 (a -> b .)
    END             reduce using rule 73 (a -> b .)
    AND             shift and go to state 106


state 65

    (75) b -> c .

    AND             reduce using rule 75 (b -> c .)
    BEGIN           reduce using rule 75 (b -> c .)
    OR              reduce using rule 75 (b -> c .)
    COMMA           reduce using rule 75 (b -> c .)
    SEMICOLON       reduce using rule 75 (b -> c .)
    THEN            reduce using rule 75 (b -> c .)
    R_PAREN         reduce using rule 75 (b -> c .)
    AS              reduce using rule 75 (b -> c .)
    WHEN            reduce using rule 75 (b -> c .)
    ELSE            reduce using rule 75 (b -> c .)
    WHERE           reduce using rule 75 (b -> c .)
    END             reduce using rule 75 (b -> c .)


state 66

    (76) c -> NOT_SIGN . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    d                              shift and go to state 107
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 67

    (77) c -> d .
    (78) d -> d . EQUALS e
    (79) d -> d . NOT_EQ e
    (80) d -> d . LESS_THAN e
    (81) d -> d . GREATER_THAN e
    (82) d -> d . LESS_EQ e
    (83) d -> d . GREATER_EQ e

    AND             reduce using rule 77 (c -> d .)
    BEGIN           reduce using rule 77 (c -> d .)
    OR              reduce using rule 77 (c -> d .)
    COMMA           reduce using rule 77 (c -> d .)
    SEMICOLON       reduce using rule 77 (c -> d .)
    THEN            reduce using rule 77 (c -> d .)
    R_PAREN         reduce using rule 77 (c -> d .)
    AS              reduce using rule 77 (c -> d .)
    WHEN            reduce using rule 77 (c -> d .)
    ELSE            reduce using rule 77 (c -> d .)
    WHERE           reduce using rule 77 (c -> d .)
    END             reduce using rule 77 (c -> d .)
    EQUALS          shift and go to state 108
    NOT_EQ          shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_THAN    shift and go to state 111
    LESS_EQ         shift and go to state 112
    GREATER_EQ      shift and go to state 113


state 68

    (84) d -> e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 84 (d -> e .)
    NOT_EQ          reduce using rule 84 (d -> e .)
    LESS_THAN       reduce using rule 84 (d -> e .)
    GREATER_THAN    reduce using rule 84 (d -> e .)
    LESS_EQ         reduce using rule 84 (d -> e .)
    GREATER_EQ      reduce using rule 84 (d -> e .)
    AND             reduce using rule 84 (d -> e .)
    BEGIN           reduce using rule 84 (d -> e .)
    OR              reduce using rule 84 (d -> e .)
    COMMA           reduce using rule 84 (d -> e .)
    SEMICOLON       reduce using rule 84 (d -> e .)
    THEN            reduce using rule 84 (d -> e .)
    R_PAREN         reduce using rule 84 (d -> e .)
    AS              reduce using rule 84 (d -> e .)
    WHEN            reduce using rule 84 (d -> e .)
    ELSE            reduce using rule 84 (d -> e .)
    WHERE           reduce using rule 84 (d -> e .)
    END             reduce using rule 84 (d -> e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 69

    (87) e -> f .
    (88) f -> f . TIMES g
    (89) f -> f . DIVIDE g

    PLUS            reduce using rule 87 (e -> f .)
    MINUS           reduce using rule 87 (e -> f .)
    EQUALS          reduce using rule 87 (e -> f .)
    NOT_EQ          reduce using rule 87 (e -> f .)
    LESS_THAN       reduce using rule 87 (e -> f .)
    GREATER_THAN    reduce using rule 87 (e -> f .)
    LESS_EQ         reduce using rule 87 (e -> f .)
    GREATER_EQ      reduce using rule 87 (e -> f .)
    AND             reduce using rule 87 (e -> f .)
    BEGIN           reduce using rule 87 (e -> f .)
    OR              reduce using rule 87 (e -> f .)
    COMMA           reduce using rule 87 (e -> f .)
    SEMICOLON       reduce using rule 87 (e -> f .)
    THEN            reduce using rule 87 (e -> f .)
    R_PAREN         reduce using rule 87 (e -> f .)
    AS              reduce using rule 87 (e -> f .)
    WHEN            reduce using rule 87 (e -> f .)
    ELSE            reduce using rule 87 (e -> f .)
    WHERE           reduce using rule 87 (e -> f .)
    END             reduce using rule 87 (e -> f .)
    TIMES           shift and go to state 116
    DIVIDE          shift and go to state 117


state 70

    (91) g -> MINUS . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    h                              shift and go to state 118

state 71

    (90) f -> g .

    TIMES           reduce using rule 90 (f -> g .)
    DIVIDE          reduce using rule 90 (f -> g .)
    PLUS            reduce using rule 90 (f -> g .)
    MINUS           reduce using rule 90 (f -> g .)
    EQUALS          reduce using rule 90 (f -> g .)
    NOT_EQ          reduce using rule 90 (f -> g .)
    LESS_THAN       reduce using rule 90 (f -> g .)
    GREATER_THAN    reduce using rule 90 (f -> g .)
    LESS_EQ         reduce using rule 90 (f -> g .)
    GREATER_EQ      reduce using rule 90 (f -> g .)
    AND             reduce using rule 90 (f -> g .)
    BEGIN           reduce using rule 90 (f -> g .)
    OR              reduce using rule 90 (f -> g .)
    COMMA           reduce using rule 90 (f -> g .)
    SEMICOLON       reduce using rule 90 (f -> g .)
    THEN            reduce using rule 90 (f -> g .)
    R_PAREN         reduce using rule 90 (f -> g .)
    AS              reduce using rule 90 (f -> g .)
    WHEN            reduce using rule 90 (f -> g .)
    ELSE            reduce using rule 90 (f -> g .)
    WHERE           reduce using rule 90 (f -> g .)
    END             reduce using rule 90 (f -> g .)


state 72

    (92) g -> h .

    TIMES           reduce using rule 92 (g -> h .)
    DIVIDE          reduce using rule 92 (g -> h .)
    PLUS            reduce using rule 92 (g -> h .)
    MINUS           reduce using rule 92 (g -> h .)
    EQUALS          reduce using rule 92 (g -> h .)
    NOT_EQ          reduce using rule 92 (g -> h .)
    LESS_THAN       reduce using rule 92 (g -> h .)
    GREATER_THAN    reduce using rule 92 (g -> h .)
    LESS_EQ         reduce using rule 92 (g -> h .)
    GREATER_EQ      reduce using rule 92 (g -> h .)
    AND             reduce using rule 92 (g -> h .)
    BEGIN           reduce using rule 92 (g -> h .)
    OR              reduce using rule 92 (g -> h .)
    COMMA           reduce using rule 92 (g -> h .)
    SEMICOLON       reduce using rule 92 (g -> h .)
    THEN            reduce using rule 92 (g -> h .)
    R_PAREN         reduce using rule 92 (g -> h .)
    AS              reduce using rule 92 (g -> h .)
    WHEN            reduce using rule 92 (g -> h .)
    ELSE            reduce using rule 92 (g -> h .)
    WHERE           reduce using rule 92 (g -> h .)
    END             reduce using rule 92 (g -> h .)


state 73

    (93) h -> INTEGER_VALUE .

    TIMES           reduce using rule 93 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 93 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 93 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 93 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 93 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 93 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 93 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 93 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 93 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 93 (h -> INTEGER_VALUE .)
    AND             reduce using rule 93 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 93 (h -> INTEGER_VALUE .)
    OR              reduce using rule 93 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 93 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 93 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 93 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 93 (h -> INTEGER_VALUE .)
    AS              reduce using rule 93 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 93 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 93 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 93 (h -> INTEGER_VALUE .)
    END             reduce using rule 93 (h -> INTEGER_VALUE .)


state 74

    (94) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 94 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 94 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 94 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 94 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 94 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 94 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 94 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 94 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 94 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 94 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 94 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 94 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 94 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 94 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 94 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 94 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 94 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 94 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 94 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 94 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 94 (h -> DECIMAL_VALUE .)
    END             reduce using rule 94 (h -> DECIMAL_VALUE .)


state 75

    (95) h -> STRING .

    TIMES           reduce using rule 95 (h -> STRING .)
    DIVIDE          reduce using rule 95 (h -> STRING .)
    PLUS            reduce using rule 95 (h -> STRING .)
    MINUS           reduce using rule 95 (h -> STRING .)
    EQUALS          reduce using rule 95 (h -> STRING .)
    NOT_EQ          reduce using rule 95 (h -> STRING .)
    LESS_THAN       reduce using rule 95 (h -> STRING .)
    GREATER_THAN    reduce using rule 95 (h -> STRING .)
    LESS_EQ         reduce using rule 95 (h -> STRING .)
    GREATER_EQ      reduce using rule 95 (h -> STRING .)
    AND             reduce using rule 95 (h -> STRING .)
    BEGIN           reduce using rule 95 (h -> STRING .)
    OR              reduce using rule 95 (h -> STRING .)
    COMMA           reduce using rule 95 (h -> STRING .)
    SEMICOLON       reduce using rule 95 (h -> STRING .)
    THEN            reduce using rule 95 (h -> STRING .)
    R_PAREN         reduce using rule 95 (h -> STRING .)
    AS              reduce using rule 95 (h -> STRING .)
    WHEN            reduce using rule 95 (h -> STRING .)
    ELSE            reduce using rule 95 (h -> STRING .)
    WHERE           reduce using rule 95 (h -> STRING .)
    END             reduce using rule 95 (h -> STRING .)


state 76

    (96) h -> ID .

    TIMES           reduce using rule 96 (h -> ID .)
    DIVIDE          reduce using rule 96 (h -> ID .)
    PLUS            reduce using rule 96 (h -> ID .)
    MINUS           reduce using rule 96 (h -> ID .)
    EQUALS          reduce using rule 96 (h -> ID .)
    NOT_EQ          reduce using rule 96 (h -> ID .)
    LESS_THAN       reduce using rule 96 (h -> ID .)
    GREATER_THAN    reduce using rule 96 (h -> ID .)
    LESS_EQ         reduce using rule 96 (h -> ID .)
    GREATER_EQ      reduce using rule 96 (h -> ID .)
    AND             reduce using rule 96 (h -> ID .)
    BEGIN           reduce using rule 96 (h -> ID .)
    OR              reduce using rule 96 (h -> ID .)
    COMMA           reduce using rule 96 (h -> ID .)
    SEMICOLON       reduce using rule 96 (h -> ID .)
    THEN            reduce using rule 96 (h -> ID .)
    R_PAREN         reduce using rule 96 (h -> ID .)
    AS              reduce using rule 96 (h -> ID .)
    WHEN            reduce using rule 96 (h -> ID .)
    ELSE            reduce using rule 96 (h -> ID .)
    WHERE           reduce using rule 96 (h -> ID .)
    END             reduce using rule 96 (h -> ID .)


state 77

    (60) truncate_statement -> TRUNCATE TABLE . NAME SEMICOLON

    NAME            shift and go to state 119


state 78

    (61) delete_statement -> DELETE FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 120


state 79

    (22) create_database_statement -> CREATE DATA BASE . NAME SEMICOLON

    NAME            shift and go to state 121


state 80

    (28) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN SEMICOLON

    L_PAREN         shift and go to state 122


state 81

    (47) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 123


state 82

    (48) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 124


state 83

    (23) use_statement -> USE NAME SEMICOLON .

    CREATE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    USE             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DECLARE         reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    SET             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    SELECT          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    INSERT          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    ALTER           reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    IF              reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    EXEC            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DROP            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    CASE            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    UPDATE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    WHILE           reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DELETE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    $end            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    END             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)


state 84

    (24) declare_statement -> DECLARE ID AS . type SEMICOLON
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 125

state 85

    (25) set_statement -> SET assignments SEMICOLON .

    CREATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    USE             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DECLARE         reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SET             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SELECT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    INSERT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    ALTER           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    IF              reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    EXEC            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DROP            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    CASE            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    UPDATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    WHILE           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    TRUNCATE        reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DELETE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    $end            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    END             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)


state 86

    (26) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 133


state 87

    (27) assignments -> ID ASSIGN . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 134
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 88

    (37) select_statement -> SELECT columns FROM . NAME SEMICOLON
    (38) select_statement -> SELECT columns FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 135


state 89

    (40) columns -> columns COMMA . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (97) call_function_prod -> . HOY L_PAREN R_PAREN
    (98) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (99) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (100) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (101) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (102) call_function_prod -> . CAST L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAST            shift and go to state 55

    column                         shift and go to state 136
    call_function_prod             shift and go to state 49

state 90

    (97) call_function_prod -> HOY L_PAREN . R_PAREN

    R_PAREN         shift and go to state 137


state 91

    (98) call_function_prod -> CONCATENAR L_PAREN . a COMMA a R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 138
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 92

    (99) call_function_prod -> SUBSTRAER L_PAREN . a R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 139
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 93

    (100) call_function_prod -> CONTAR L_PAREN . a R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 140
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 94

    (101) call_function_prod -> SUMA L_PAREN . a R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 141
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 95

    (102) call_function_prod -> CAST L_PAREN . a AS type R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 142
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 96

    (39) insert_statement -> INSERT INTO NAME . L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 143


state 97

    (51) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME SEMICOLON

    ADD             shift and go to state 144
    DROP            shift and go to state 145


state 98

    (55) drop_table_statement -> DROP TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 146


state 99

    (53) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN SEMICOLON
    (72) a -> a . OR b

    COMMA           shift and go to state 147
    OR              shift and go to state 105


state 100

    (54) exec_statement -> EXEC NAME vals . SEMICOLON
    (45) vals -> vals . COMMA a

    SEMICOLON       shift and go to state 148
    COMMA           shift and go to state 149


state 101

    (46) vals -> a .
    (72) a -> a . OR b

    SEMICOLON       reduce using rule 46 (vals -> a .)
    COMMA           reduce using rule 46 (vals -> a .)
    R_PAREN         reduce using rule 46 (vals -> a .)
    OR              shift and go to state 105


state 102

    (62) case_statement -> CASE WHEN a . THEN a when_statement ELSE THEN a END
    (72) a -> a . OR b

    THEN            shift and go to state 150
    OR              shift and go to state 105


state 103

    (56) update_statement -> UPDATE NAME SET . column_assignments WHERE a SEMICOLON
    (57) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (58) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 151

    column_assignments             shift and go to state 152

state 104

    (59) while_statement -> WHILE a BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 153

state 105

    (72) a -> a OR . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    b                              shift and go to state 154
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 106

    (74) b -> b AND . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    c                              shift and go to state 155
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 107

    (76) c -> NOT_SIGN d .
    (78) d -> d . EQUALS e
    (79) d -> d . NOT_EQ e
    (80) d -> d . LESS_THAN e
    (81) d -> d . GREATER_THAN e
    (82) d -> d . LESS_EQ e
    (83) d -> d . GREATER_EQ e

    AND             reduce using rule 76 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 76 (c -> NOT_SIGN d .)
    OR              reduce using rule 76 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 76 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 76 (c -> NOT_SIGN d .)
    THEN            reduce using rule 76 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 76 (c -> NOT_SIGN d .)
    AS              reduce using rule 76 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 76 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 76 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 76 (c -> NOT_SIGN d .)
    END             reduce using rule 76 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 108
    NOT_EQ          shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_THAN    shift and go to state 111
    LESS_EQ         shift and go to state 112
    GREATER_EQ      shift and go to state 113


state 108

    (78) d -> d EQUALS . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 156
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 109

    (79) d -> d NOT_EQ . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 157
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 110

    (80) d -> d LESS_THAN . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 158
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 111

    (81) d -> d GREATER_THAN . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 159
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 112

    (82) d -> d LESS_EQ . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 160
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 113

    (83) d -> d GREATER_EQ . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    e                              shift and go to state 161
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 114

    (85) e -> e PLUS . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    f                              shift and go to state 162
    g                              shift and go to state 71
    h                              shift and go to state 72

state 115

    (86) e -> e MINUS . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    f                              shift and go to state 163
    g                              shift and go to state 71
    h                              shift and go to state 72

state 116

    (88) f -> f TIMES . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    g                              shift and go to state 164
    h                              shift and go to state 72

state 117

    (89) f -> f DIVIDE . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    g                              shift and go to state 165
    h                              shift and go to state 72

state 118

    (91) g -> MINUS h .

    TIMES           reduce using rule 91 (g -> MINUS h .)
    DIVIDE          reduce using rule 91 (g -> MINUS h .)
    PLUS            reduce using rule 91 (g -> MINUS h .)
    MINUS           reduce using rule 91 (g -> MINUS h .)
    EQUALS          reduce using rule 91 (g -> MINUS h .)
    NOT_EQ          reduce using rule 91 (g -> MINUS h .)
    LESS_THAN       reduce using rule 91 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 91 (g -> MINUS h .)
    LESS_EQ         reduce using rule 91 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 91 (g -> MINUS h .)
    AND             reduce using rule 91 (g -> MINUS h .)
    BEGIN           reduce using rule 91 (g -> MINUS h .)
    OR              reduce using rule 91 (g -> MINUS h .)
    COMMA           reduce using rule 91 (g -> MINUS h .)
    SEMICOLON       reduce using rule 91 (g -> MINUS h .)
    THEN            reduce using rule 91 (g -> MINUS h .)
    R_PAREN         reduce using rule 91 (g -> MINUS h .)
    AS              reduce using rule 91 (g -> MINUS h .)
    WHEN            reduce using rule 91 (g -> MINUS h .)
    ELSE            reduce using rule 91 (g -> MINUS h .)
    WHERE           reduce using rule 91 (g -> MINUS h .)
    END             reduce using rule 91 (g -> MINUS h .)


state 119

    (60) truncate_statement -> TRUNCATE TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 166


state 120

    (61) delete_statement -> DELETE FROM NAME . WHERE a SEMICOLON

    WHERE           shift and go to state 167


state 121

    (22) create_database_statement -> CREATE DATA BASE NAME . SEMICOLON

    SEMICOLON       shift and go to state 168


state 122

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN SEMICOLON
    (29) properties -> . properties COMMA property
    (30) properties -> . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 169

    properties                     shift and go to state 170
    property                       shift and go to state 171

state 123

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (49) parameters -> . parameters COMMA ID AS type
    (50) parameters -> . ID AS type

    ID              shift and go to state 173

    parameters                     shift and go to state 172

state 124

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END SEMICOLON
    (49) parameters -> . parameters COMMA ID AS type
    (50) parameters -> . ID AS type

    ID              shift and go to state 173

    parameters                     shift and go to state 174

state 125

    (24) declare_statement -> DECLARE ID AS type . SEMICOLON

    SEMICOLON       shift and go to state 175


state 126

    (65) type -> INT .

    SEMICOLON       reduce using rule 65 (type -> INT .)
    NOT             reduce using rule 65 (type -> INT .)
    NULL            reduce using rule 65 (type -> INT .)
    PRIMARY         reduce using rule 65 (type -> INT .)
    REFERENCE       reduce using rule 65 (type -> INT .)
    R_PAREN         reduce using rule 65 (type -> INT .)
    COMMA           reduce using rule 65 (type -> INT .)
    AS              reduce using rule 65 (type -> INT .)


state 127

    (66) type -> DECIMAL .

    SEMICOLON       reduce using rule 66 (type -> DECIMAL .)
    NOT             reduce using rule 66 (type -> DECIMAL .)
    NULL            reduce using rule 66 (type -> DECIMAL .)
    PRIMARY         reduce using rule 66 (type -> DECIMAL .)
    REFERENCE       reduce using rule 66 (type -> DECIMAL .)
    R_PAREN         reduce using rule 66 (type -> DECIMAL .)
    COMMA           reduce using rule 66 (type -> DECIMAL .)
    AS              reduce using rule 66 (type -> DECIMAL .)


state 128

    (67) type -> BIT .

    SEMICOLON       reduce using rule 67 (type -> BIT .)
    NOT             reduce using rule 67 (type -> BIT .)
    NULL            reduce using rule 67 (type -> BIT .)
    PRIMARY         reduce using rule 67 (type -> BIT .)
    REFERENCE       reduce using rule 67 (type -> BIT .)
    R_PAREN         reduce using rule 67 (type -> BIT .)
    COMMA           reduce using rule 67 (type -> BIT .)
    AS              reduce using rule 67 (type -> BIT .)


state 129

    (68) type -> NCHAR .

    SEMICOLON       reduce using rule 68 (type -> NCHAR .)
    NOT             reduce using rule 68 (type -> NCHAR .)
    NULL            reduce using rule 68 (type -> NCHAR .)
    PRIMARY         reduce using rule 68 (type -> NCHAR .)
    REFERENCE       reduce using rule 68 (type -> NCHAR .)
    R_PAREN         reduce using rule 68 (type -> NCHAR .)
    COMMA           reduce using rule 68 (type -> NCHAR .)
    AS              reduce using rule 68 (type -> NCHAR .)


state 130

    (69) type -> NVARCHAR .

    SEMICOLON       reduce using rule 69 (type -> NVARCHAR .)
    NOT             reduce using rule 69 (type -> NVARCHAR .)
    NULL            reduce using rule 69 (type -> NVARCHAR .)
    PRIMARY         reduce using rule 69 (type -> NVARCHAR .)
    REFERENCE       reduce using rule 69 (type -> NVARCHAR .)
    R_PAREN         reduce using rule 69 (type -> NVARCHAR .)
    COMMA           reduce using rule 69 (type -> NVARCHAR .)
    AS              reduce using rule 69 (type -> NVARCHAR .)


state 131

    (70) type -> DATE .

    SEMICOLON       reduce using rule 70 (type -> DATE .)
    NOT             reduce using rule 70 (type -> DATE .)
    NULL            reduce using rule 70 (type -> DATE .)
    PRIMARY         reduce using rule 70 (type -> DATE .)
    REFERENCE       reduce using rule 70 (type -> DATE .)
    R_PAREN         reduce using rule 70 (type -> DATE .)
    COMMA           reduce using rule 70 (type -> DATE .)
    AS              reduce using rule 70 (type -> DATE .)


state 132

    (71) type -> DATETIME .

    SEMICOLON       reduce using rule 71 (type -> DATETIME .)
    NOT             reduce using rule 71 (type -> DATETIME .)
    NULL            reduce using rule 71 (type -> DATETIME .)
    PRIMARY         reduce using rule 71 (type -> DATETIME .)
    REFERENCE       reduce using rule 71 (type -> DATETIME .)
    R_PAREN         reduce using rule 71 (type -> DATETIME .)
    COMMA           reduce using rule 71 (type -> DATETIME .)
    AS              reduce using rule 71 (type -> DATETIME .)


state 133

    (26) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 176


state 134

    (27) assignments -> ID ASSIGN a .
    (72) a -> a . OR b

    SEMICOLON       reduce using rule 27 (assignments -> ID ASSIGN a .)
    COMMA           reduce using rule 27 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 105


state 135

    (37) select_statement -> SELECT columns FROM NAME . SEMICOLON
    (38) select_statement -> SELECT columns FROM NAME . WHERE a SEMICOLON

    SEMICOLON       shift and go to state 177
    WHERE           shift and go to state 178


state 136

    (40) columns -> columns COMMA column .

    FROM            reduce using rule 40 (columns -> columns COMMA column .)
    COMMA           reduce using rule 40 (columns -> columns COMMA column .)
    R_PAREN         reduce using rule 40 (columns -> columns COMMA column .)


state 137

    (97) call_function_prod -> HOY L_PAREN R_PAREN .

    FROM            reduce using rule 97 (call_function_prod -> HOY L_PAREN R_PAREN .)
    COMMA           reduce using rule 97 (call_function_prod -> HOY L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 97 (call_function_prod -> HOY L_PAREN R_PAREN .)


state 138

    (98) call_function_prod -> CONCATENAR L_PAREN a . COMMA a R_PAREN
    (72) a -> a . OR b

    COMMA           shift and go to state 179
    OR              shift and go to state 105


state 139

    (99) call_function_prod -> SUBSTRAER L_PAREN a . R_PAREN
    (72) a -> a . OR b

    R_PAREN         shift and go to state 180
    OR              shift and go to state 105


state 140

    (100) call_function_prod -> CONTAR L_PAREN a . R_PAREN
    (72) a -> a . OR b

    R_PAREN         shift and go to state 181
    OR              shift and go to state 105


state 141

    (101) call_function_prod -> SUMA L_PAREN a . R_PAREN
    (72) a -> a . OR b

    R_PAREN         shift and go to state 182
    OR              shift and go to state 105


state 142

    (102) call_function_prod -> CAST L_PAREN a . AS type R_PAREN
    (72) a -> a . OR b

    AS              shift and go to state 183
    OR              shift and go to state 105


state 143

    (39) insert_statement -> INSERT INTO NAME L_PAREN . columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (97) call_function_prod -> . HOY L_PAREN R_PAREN
    (98) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (99) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (100) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (101) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (102) call_function_prod -> . CAST L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAST            shift and go to state 55

    columns                        shift and go to state 184
    column                         shift and go to state 47
    call_function_prod             shift and go to state 49

state 144

    (51) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type SEMICOLON

    COLUMN          shift and go to state 185


state 145

    (52) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME SEMICOLON

    COLUMN          shift and go to state 186


state 146

    (55) drop_table_statement -> DROP TABLE NAME SEMICOLON .

    CREATE          reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    USE             reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SET             reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    IF              reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DROP            reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    CASE            reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    $end            reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    END             reduce using rule 55 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)


state 147

    (53) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 187
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 148

    (54) exec_statement -> EXEC NAME vals SEMICOLON .

    CREATE          reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    USE             reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DECLARE         reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SET             reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SELECT          reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    INSERT          reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ALTER           reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    IF              reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    EXEC            reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DROP            reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    CASE            reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    UPDATE          reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    WHILE           reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    TRUNCATE        reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DELETE          reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    $end            reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)
    END             reduce using rule 54 (exec_statement -> EXEC NAME vals SEMICOLON .)


state 149

    (45) vals -> vals COMMA . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 188
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 150

    (62) case_statement -> CASE WHEN a THEN . a when_statement ELSE THEN a END
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 189
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 151

    (58) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 190


state 152

    (56) update_statement -> UPDATE NAME SET column_assignments . WHERE a SEMICOLON
    (57) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 191
    COMMA           shift and go to state 192


state 153

    (59) while_statement -> WHILE a BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (54) exec_statement -> . EXEC NAME vals SEMICOLON
    (55) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (62) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (56) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (59) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (60) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (61) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 193
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 154

    (72) a -> a OR b .
    (74) b -> b . AND c

    BEGIN           reduce using rule 72 (a -> a OR b .)
    OR              reduce using rule 72 (a -> a OR b .)
    COMMA           reduce using rule 72 (a -> a OR b .)
    SEMICOLON       reduce using rule 72 (a -> a OR b .)
    THEN            reduce using rule 72 (a -> a OR b .)
    R_PAREN         reduce using rule 72 (a -> a OR b .)
    AS              reduce using rule 72 (a -> a OR b .)
    WHEN            reduce using rule 72 (a -> a OR b .)
    ELSE            reduce using rule 72 (a -> a OR b .)
    WHERE           reduce using rule 72 (a -> a OR b .)
    END             reduce using rule 72 (a -> a OR b .)
    AND             shift and go to state 106


state 155

    (74) b -> b AND c .

    AND             reduce using rule 74 (b -> b AND c .)
    BEGIN           reduce using rule 74 (b -> b AND c .)
    OR              reduce using rule 74 (b -> b AND c .)
    COMMA           reduce using rule 74 (b -> b AND c .)
    SEMICOLON       reduce using rule 74 (b -> b AND c .)
    THEN            reduce using rule 74 (b -> b AND c .)
    R_PAREN         reduce using rule 74 (b -> b AND c .)
    AS              reduce using rule 74 (b -> b AND c .)
    WHEN            reduce using rule 74 (b -> b AND c .)
    ELSE            reduce using rule 74 (b -> b AND c .)
    WHERE           reduce using rule 74 (b -> b AND c .)
    END             reduce using rule 74 (b -> b AND c .)


state 156

    (78) d -> d EQUALS e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 78 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 78 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 78 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 78 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 78 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 78 (d -> d EQUALS e .)
    AND             reduce using rule 78 (d -> d EQUALS e .)
    BEGIN           reduce using rule 78 (d -> d EQUALS e .)
    OR              reduce using rule 78 (d -> d EQUALS e .)
    COMMA           reduce using rule 78 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 78 (d -> d EQUALS e .)
    THEN            reduce using rule 78 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 78 (d -> d EQUALS e .)
    AS              reduce using rule 78 (d -> d EQUALS e .)
    WHEN            reduce using rule 78 (d -> d EQUALS e .)
    ELSE            reduce using rule 78 (d -> d EQUALS e .)
    WHERE           reduce using rule 78 (d -> d EQUALS e .)
    END             reduce using rule 78 (d -> d EQUALS e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 157

    (79) d -> d NOT_EQ e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 79 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 79 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 79 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 79 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 79 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 79 (d -> d NOT_EQ e .)
    AND             reduce using rule 79 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 79 (d -> d NOT_EQ e .)
    OR              reduce using rule 79 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 79 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 79 (d -> d NOT_EQ e .)
    THEN            reduce using rule 79 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 79 (d -> d NOT_EQ e .)
    AS              reduce using rule 79 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 79 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 79 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 79 (d -> d NOT_EQ e .)
    END             reduce using rule 79 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 158

    (80) d -> d LESS_THAN e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 80 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 80 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 80 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 80 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 80 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 80 (d -> d LESS_THAN e .)
    AND             reduce using rule 80 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 80 (d -> d LESS_THAN e .)
    OR              reduce using rule 80 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 80 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 80 (d -> d LESS_THAN e .)
    THEN            reduce using rule 80 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 80 (d -> d LESS_THAN e .)
    AS              reduce using rule 80 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 80 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 80 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 80 (d -> d LESS_THAN e .)
    END             reduce using rule 80 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 159

    (81) d -> d GREATER_THAN e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 81 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 81 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 81 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 81 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 81 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 81 (d -> d GREATER_THAN e .)
    AND             reduce using rule 81 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 81 (d -> d GREATER_THAN e .)
    OR              reduce using rule 81 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 81 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 81 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 81 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 81 (d -> d GREATER_THAN e .)
    AS              reduce using rule 81 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 81 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 81 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 81 (d -> d GREATER_THAN e .)
    END             reduce using rule 81 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 160

    (82) d -> d LESS_EQ e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 82 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 82 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 82 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 82 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 82 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 82 (d -> d LESS_EQ e .)
    AND             reduce using rule 82 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 82 (d -> d LESS_EQ e .)
    OR              reduce using rule 82 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 82 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 82 (d -> d LESS_EQ e .)
    THEN            reduce using rule 82 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 82 (d -> d LESS_EQ e .)
    AS              reduce using rule 82 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 82 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 82 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 82 (d -> d LESS_EQ e .)
    END             reduce using rule 82 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 161

    (83) d -> d GREATER_EQ e .
    (85) e -> e . PLUS f
    (86) e -> e . MINUS f

    EQUALS          reduce using rule 83 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 83 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 83 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 83 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 83 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 83 (d -> d GREATER_EQ e .)
    AND             reduce using rule 83 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 83 (d -> d GREATER_EQ e .)
    OR              reduce using rule 83 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 83 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 83 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 83 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 83 (d -> d GREATER_EQ e .)
    AS              reduce using rule 83 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 83 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 83 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 83 (d -> d GREATER_EQ e .)
    END             reduce using rule 83 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 162

    (85) e -> e PLUS f .
    (88) f -> f . TIMES g
    (89) f -> f . DIVIDE g

    PLUS            reduce using rule 85 (e -> e PLUS f .)
    MINUS           reduce using rule 85 (e -> e PLUS f .)
    EQUALS          reduce using rule 85 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 85 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 85 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 85 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 85 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 85 (e -> e PLUS f .)
    AND             reduce using rule 85 (e -> e PLUS f .)
    BEGIN           reduce using rule 85 (e -> e PLUS f .)
    OR              reduce using rule 85 (e -> e PLUS f .)
    COMMA           reduce using rule 85 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 85 (e -> e PLUS f .)
    THEN            reduce using rule 85 (e -> e PLUS f .)
    R_PAREN         reduce using rule 85 (e -> e PLUS f .)
    AS              reduce using rule 85 (e -> e PLUS f .)
    WHEN            reduce using rule 85 (e -> e PLUS f .)
    ELSE            reduce using rule 85 (e -> e PLUS f .)
    WHERE           reduce using rule 85 (e -> e PLUS f .)
    END             reduce using rule 85 (e -> e PLUS f .)
    TIMES           shift and go to state 116
    DIVIDE          shift and go to state 117


state 163

    (86) e -> e MINUS f .
    (88) f -> f . TIMES g
    (89) f -> f . DIVIDE g

    PLUS            reduce using rule 86 (e -> e MINUS f .)
    MINUS           reduce using rule 86 (e -> e MINUS f .)
    EQUALS          reduce using rule 86 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 86 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 86 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 86 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 86 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 86 (e -> e MINUS f .)
    AND             reduce using rule 86 (e -> e MINUS f .)
    BEGIN           reduce using rule 86 (e -> e MINUS f .)
    OR              reduce using rule 86 (e -> e MINUS f .)
    COMMA           reduce using rule 86 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 86 (e -> e MINUS f .)
    THEN            reduce using rule 86 (e -> e MINUS f .)
    R_PAREN         reduce using rule 86 (e -> e MINUS f .)
    AS              reduce using rule 86 (e -> e MINUS f .)
    WHEN            reduce using rule 86 (e -> e MINUS f .)
    ELSE            reduce using rule 86 (e -> e MINUS f .)
    WHERE           reduce using rule 86 (e -> e MINUS f .)
    END             reduce using rule 86 (e -> e MINUS f .)
    TIMES           shift and go to state 116
    DIVIDE          shift and go to state 117


state 164

    (88) f -> f TIMES g .

    TIMES           reduce using rule 88 (f -> f TIMES g .)
    DIVIDE          reduce using rule 88 (f -> f TIMES g .)
    PLUS            reduce using rule 88 (f -> f TIMES g .)
    MINUS           reduce using rule 88 (f -> f TIMES g .)
    EQUALS          reduce using rule 88 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 88 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 88 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 88 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 88 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 88 (f -> f TIMES g .)
    AND             reduce using rule 88 (f -> f TIMES g .)
    BEGIN           reduce using rule 88 (f -> f TIMES g .)
    OR              reduce using rule 88 (f -> f TIMES g .)
    COMMA           reduce using rule 88 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 88 (f -> f TIMES g .)
    THEN            reduce using rule 88 (f -> f TIMES g .)
    R_PAREN         reduce using rule 88 (f -> f TIMES g .)
    AS              reduce using rule 88 (f -> f TIMES g .)
    WHEN            reduce using rule 88 (f -> f TIMES g .)
    ELSE            reduce using rule 88 (f -> f TIMES g .)
    WHERE           reduce using rule 88 (f -> f TIMES g .)
    END             reduce using rule 88 (f -> f TIMES g .)


state 165

    (89) f -> f DIVIDE g .

    TIMES           reduce using rule 89 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 89 (f -> f DIVIDE g .)
    PLUS            reduce using rule 89 (f -> f DIVIDE g .)
    MINUS           reduce using rule 89 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 89 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 89 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 89 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 89 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 89 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 89 (f -> f DIVIDE g .)
    AND             reduce using rule 89 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 89 (f -> f DIVIDE g .)
    OR              reduce using rule 89 (f -> f DIVIDE g .)
    COMMA           reduce using rule 89 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 89 (f -> f DIVIDE g .)
    THEN            reduce using rule 89 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 89 (f -> f DIVIDE g .)
    AS              reduce using rule 89 (f -> f DIVIDE g .)
    WHEN            reduce using rule 89 (f -> f DIVIDE g .)
    ELSE            reduce using rule 89 (f -> f DIVIDE g .)
    WHERE           reduce using rule 89 (f -> f DIVIDE g .)
    END             reduce using rule 89 (f -> f DIVIDE g .)


state 166

    (60) truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .

    CREATE          reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    USE             reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SET             reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    IF              reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DROP            reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    CASE            reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    $end            reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    END             reduce using rule 60 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)


state 167

    (61) delete_statement -> DELETE FROM NAME WHERE . a SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 194
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 168

    (22) create_database_statement -> CREATE DATA BASE NAME SEMICOLON .

    CREATE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    USE             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DECLARE         reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SET             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SELECT          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    INSERT          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ALTER           reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    IF              reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    EXEC            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DROP            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    CASE            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    UPDATE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    WHILE           reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DELETE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    $end            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    END             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)


state 169

    (31) property -> NAME . type null_prod PRIMARY KEY
    (32) property -> NAME . type null_prod
    (33) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 195

state 170

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN SEMICOLON
    (29) properties -> properties . COMMA property

    R_PAREN         shift and go to state 196
    COMMA           shift and go to state 197


state 171

    (30) properties -> property .

    R_PAREN         reduce using rule 30 (properties -> property .)
    COMMA           reduce using rule 30 (properties -> property .)


state 172

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (49) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 198
    COMMA           shift and go to state 199


state 173

    (50) parameters -> ID . AS type

    AS              shift and go to state 200


state 174

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END SEMICOLON
    (49) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 201
    COMMA           shift and go to state 199


state 175

    (24) declare_statement -> DECLARE ID AS type SEMICOLON .

    CREATE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    USE             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DECLARE         reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SET             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SELECT          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    INSERT          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ALTER           reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    IF              reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    EXEC            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DROP            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    CASE            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    UPDATE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    WHILE           reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    TRUNCATE        reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DELETE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    $end            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    END             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)


state 176

    (26) assignments -> assignments COMMA ID ASSIGN . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 202
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 177

    (37) select_statement -> SELECT columns FROM NAME SEMICOLON .

    CREATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    USE             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DECLARE         reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SET             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SELECT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    INSERT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ALTER           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    IF              reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    EXEC            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DROP            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    CASE            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    UPDATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    WHILE           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    TRUNCATE        reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DELETE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    $end            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    END             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)


state 178

    (38) select_statement -> SELECT columns FROM NAME WHERE . a SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 203
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 179

    (98) call_function_prod -> CONCATENAR L_PAREN a COMMA . a R_PAREN
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 204
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 180

    (99) call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .

    FROM            reduce using rule 99 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    COMMA           reduce using rule 99 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 99 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)


state 181

    (100) call_function_prod -> CONTAR L_PAREN a R_PAREN .

    FROM            reduce using rule 100 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 100 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 100 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)


state 182

    (101) call_function_prod -> SUMA L_PAREN a R_PAREN .

    FROM            reduce using rule 101 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    COMMA           reduce using rule 101 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 101 (call_function_prod -> SUMA L_PAREN a R_PAREN .)


state 183

    (102) call_function_prod -> CAST L_PAREN a AS . type R_PAREN
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 205

state 184

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns . R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> columns . COMMA column

    R_PAREN         shift and go to state 206
    COMMA           shift and go to state 89


state 185

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type SEMICOLON

    NAME            shift and go to state 207


state 186

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME SEMICOLON

    NAME            shift and go to state 208


state 187

    (53) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN SEMICOLON
    (72) a -> a . OR b

    COMMA           shift and go to state 209
    OR              shift and go to state 105


state 188

    (45) vals -> vals COMMA a .
    (72) a -> a . OR b

    SEMICOLON       reduce using rule 45 (vals -> vals COMMA a .)
    COMMA           reduce using rule 45 (vals -> vals COMMA a .)
    R_PAREN         reduce using rule 45 (vals -> vals COMMA a .)
    OR              shift and go to state 105


state 189

    (62) case_statement -> CASE WHEN a THEN a . when_statement ELSE THEN a END
    (72) a -> a . OR b
    (63) when_statement -> . WHEN a THEN a when_statement
    (64) when_statement -> .

    OR              shift and go to state 105
    WHEN            shift and go to state 210
    ELSE            reduce using rule 64 (when_statement -> .)

    when_statement                 shift and go to state 211

state 190

    (58) column_assignments -> NAME ASSIGN . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 212
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 191

    (56) update_statement -> UPDATE NAME SET column_assignments WHERE . a SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 213
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 192

    (57) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 214


state 193

    (59) while_statement -> WHILE a BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 215


state 194

    (61) delete_statement -> DELETE FROM NAME WHERE a . SEMICOLON
    (72) a -> a . OR b

    SEMICOLON       shift and go to state 216
    OR              shift and go to state 105


state 195

    (31) property -> NAME type . null_prod PRIMARY KEY
    (32) property -> NAME type . null_prod
    (33) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (34) null_prod -> . NOT NULL
    (35) null_prod -> . NULL
    (36) null_prod -> .

    NOT             shift and go to state 218
    NULL            shift and go to state 219
    PRIMARY         reduce using rule 36 (null_prod -> .)
    REFERENCE       reduce using rule 36 (null_prod -> .)
    R_PAREN         reduce using rule 36 (null_prod -> .)
    COMMA           reduce using rule 36 (null_prod -> .)

    null_prod                      shift and go to state 217

state 196

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 220


state 197

    (29) properties -> properties COMMA . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 169

    property                       shift and go to state 221

state 198

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END SEMICOLON

    RETURN          shift and go to state 222


state 199

    (49) parameters -> parameters COMMA . ID AS type

    ID              shift and go to state 223


state 200

    (50) parameters -> ID AS . type
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 224

state 201

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 225


state 202

    (26) assignments -> assignments COMMA ID ASSIGN a .
    (72) a -> a . OR b

    SEMICOLON       reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    COMMA           reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 105


state 203

    (38) select_statement -> SELECT columns FROM NAME WHERE a . SEMICOLON
    (72) a -> a . OR b

    SEMICOLON       shift and go to state 226
    OR              shift and go to state 105


state 204

    (98) call_function_prod -> CONCATENAR L_PAREN a COMMA a . R_PAREN
    (72) a -> a . OR b

    R_PAREN         shift and go to state 227
    OR              shift and go to state 105


state 205

    (102) call_function_prod -> CAST L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 228


state 206

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN . VALUES L_PAREN vals R_PAREN SEMICOLON

    VALUES          shift and go to state 229


state 207

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type SEMICOLON
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 230

state 208

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME . SEMICOLON

    SEMICOLON       shift and go to state 231


state 209

    (53) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN SEMICOLON
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 232
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 210

    (63) when_statement -> WHEN . a THEN a when_statement
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 233
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 211

    (62) case_statement -> CASE WHEN a THEN a when_statement . ELSE THEN a END

    ELSE            shift and go to state 234


state 212

    (58) column_assignments -> NAME ASSIGN a .
    (72) a -> a . OR b

    WHERE           reduce using rule 58 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 58 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 105


state 213

    (56) update_statement -> UPDATE NAME SET column_assignments WHERE a . SEMICOLON
    (72) a -> a . OR b

    SEMICOLON       shift and go to state 235
    OR              shift and go to state 105


state 214

    (57) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 236


state 215

    (59) while_statement -> WHILE a BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    USE             reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SET             reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    IF              reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    $end            reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    END             reduce using rule 59 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)


state 216

    (61) delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    CASE            reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 61 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)


state 217

    (31) property -> NAME type null_prod . PRIMARY KEY
    (32) property -> NAME type null_prod .
    (33) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 237
    R_PAREN         reduce using rule 32 (property -> NAME type null_prod .)
    COMMA           reduce using rule 32 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 238


state 218

    (34) null_prod -> NOT . NULL

    NULL            shift and go to state 239


state 219

    (35) null_prod -> NULL .

    PRIMARY         reduce using rule 35 (null_prod -> NULL .)
    REFERENCE       reduce using rule 35 (null_prod -> NULL .)
    R_PAREN         reduce using rule 35 (null_prod -> NULL .)
    COMMA           reduce using rule 35 (null_prod -> NULL .)


state 220

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .

    CREATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    USE             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SET             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SELECT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    INSERT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ALTER           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    IF              reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    EXEC            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DROP            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    CASE            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    WHILE           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DELETE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    $end            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    END             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)


state 221

    (29) properties -> properties COMMA property .

    R_PAREN         reduce using rule 29 (properties -> properties COMMA property .)
    COMMA           reduce using rule 29 (properties -> properties COMMA property .)


state 222

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END SEMICOLON
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 240

state 223

    (49) parameters -> parameters COMMA ID . AS type

    AS              shift and go to state 241


state 224

    (50) parameters -> ID AS type .

    R_PAREN         reduce using rule 50 (parameters -> ID AS type .)
    COMMA           reduce using rule 50 (parameters -> ID AS type .)


state 225

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 242


state 226

    (38) select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    CASE            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)


state 227

    (98) call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .

    FROM            reduce using rule 98 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    COMMA           reduce using rule 98 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    R_PAREN         reduce using rule 98 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)


state 228

    (102) call_function_prod -> CAST L_PAREN a AS type R_PAREN .

    FROM            reduce using rule 102 (call_function_prod -> CAST L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 102 (call_function_prod -> CAST L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 102 (call_function_prod -> CAST L_PAREN a AS type R_PAREN .)


state 229

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES . L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 243


state 230

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type . SEMICOLON

    SEMICOLON       shift and go to state 244


state 231

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .

    CREATE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    USE             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DECLARE         reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SET             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SELECT          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    INSERT          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ALTER           reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    IF              reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    EXEC            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DROP            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    CASE            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    UPDATE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    WHILE           reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    TRUNCATE        reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DELETE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    $end            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    END             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)


state 232

    (53) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN SEMICOLON
    (72) a -> a . OR b

    R_PAREN         shift and go to state 245
    OR              shift and go to state 105


state 233

    (63) when_statement -> WHEN a . THEN a when_statement
    (72) a -> a . OR b

    THEN            shift and go to state 246
    OR              shift and go to state 105


state 234

    (62) case_statement -> CASE WHEN a THEN a when_statement ELSE . THEN a END

    THEN            shift and go to state 247


state 235

    (56) update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .

    CREATE          reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    USE             reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DECLARE         reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SET             reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SELECT          reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    INSERT          reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ALTER           reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    IF              reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    EXEC            reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DROP            reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    CASE            reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    UPDATE          reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    WHILE           reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DELETE          reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    $end            reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    END             reduce using rule 56 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)


state 236

    (57) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 248
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 237

    (31) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 249


state 238

    (33) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 250


state 239

    (34) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 34 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 34 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 34 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 34 (null_prod -> NOT NULL .)


state 240

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 251


state 241

    (49) parameters -> parameters COMMA ID AS . type
    (65) type -> . INT
    (66) type -> . DECIMAL
    (67) type -> . BIT
    (68) type -> . NCHAR
    (69) type -> . NVARCHAR
    (70) type -> . DATE
    (71) type -> . DATETIME

    INT             shift and go to state 126
    DECIMAL         shift and go to state 127
    BIT             shift and go to state 128
    NCHAR           shift and go to state 129
    NVARCHAR        shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132

    type                           shift and go to state 252

state 242

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 253

state 243

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN . vals R_PAREN SEMICOLON
    (45) vals -> . vals COMMA a
    (46) vals -> . a
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    vals                           shift and go to state 254
    a                              shift and go to state 101
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 244

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .

    CREATE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    USE             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DECLARE         reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SET             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SELECT          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    INSERT          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ALTER           reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    IF              reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    EXEC            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DROP            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    CASE            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    UPDATE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    WHILE           reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    TRUNCATE        reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DELETE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    $end            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    END             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)


state 245

    (53) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 255


state 246

    (63) when_statement -> WHEN a THEN . a when_statement
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 256
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 247

    (62) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN . a END
    (72) a -> . a OR b
    (73) a -> . b
    (74) b -> . b AND c
    (75) b -> . c
    (76) c -> . NOT_SIGN d
    (77) c -> . d
    (78) d -> . d EQUALS e
    (79) d -> . d NOT_EQ e
    (80) d -> . d LESS_THAN e
    (81) d -> . d GREATER_THAN e
    (82) d -> . d LESS_EQ e
    (83) d -> . d GREATER_EQ e
    (84) d -> . e
    (85) e -> . e PLUS f
    (86) e -> . e MINUS f
    (87) e -> . f
    (88) f -> . f TIMES g
    (89) f -> . f DIVIDE g
    (90) f -> . g
    (91) g -> . MINUS h
    (92) g -> . h
    (93) h -> . INTEGER_VALUE
    (94) h -> . DECIMAL_VALUE
    (95) h -> . STRING
    (96) h -> . ID

    NOT_SIGN        shift and go to state 66
    MINUS           shift and go to state 70
    INTEGER_VALUE   shift and go to state 73
    DECIMAL_VALUE   shift and go to state 74
    STRING          shift and go to state 75
    ID              shift and go to state 76

    a                              shift and go to state 257
    b                              shift and go to state 64
    c                              shift and go to state 65
    d                              shift and go to state 67
    e                              shift and go to state 68
    f                              shift and go to state 69
    g                              shift and go to state 71
    h                              shift and go to state 72

state 248

    (57) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (72) a -> a . OR b

    WHERE           reduce using rule 57 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 57 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 105


state 249

    (31) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)


state 250

    (33) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 258


state 251

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 259


state 252

    (49) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 49 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 49 (parameters -> parameters COMMA ID AS type .)


state 253

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (54) exec_statement -> . EXEC NAME vals SEMICOLON
    (55) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (62) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (56) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (59) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (60) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (61) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 260
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 254

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals . R_PAREN SEMICOLON
    (45) vals -> vals . COMMA a

    R_PAREN         shift and go to state 261
    COMMA           shift and go to state 149


state 255

    (53) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .

    CREATE          reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    USE             reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SET             reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SELECT          reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    INSERT          reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ALTER           reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    IF              reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    EXEC            reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DROP            reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    CASE            reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHILE           reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DELETE          reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    $end            reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    END             reduce using rule 53 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)


state 256

    (63) when_statement -> WHEN a THEN a . when_statement
    (72) a -> a . OR b
    (63) when_statement -> . WHEN a THEN a when_statement
    (64) when_statement -> .

    OR              shift and go to state 105
    WHEN            shift and go to state 210
    ELSE            reduce using rule 64 (when_statement -> .)

    when_statement                 shift and go to state 262

state 257

    (62) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a . END
    (72) a -> a . OR b

    END             shift and go to state 263
    OR              shift and go to state 105


state 258

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 264


state 259

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 265

state 260

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 266


state 261

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 267


state 262

    (63) when_statement -> WHEN a THEN a when_statement .

    ELSE            reduce using rule 63 (when_statement -> WHEN a THEN a when_statement .)


state 263

    (62) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .

    CREATE          reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    USE             reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DECLARE         reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    SET             reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    SELECT          reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    INSERT          reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    ALTER           reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    IF              reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    EXEC            reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DROP            reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    CASE            reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    UPDATE          reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    WHILE           reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    TRUNCATE        reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DELETE          reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    $end            reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    END             reduce using rule 62 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)


state 264

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 268


state 265

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (54) exec_statement -> . EXEC NAME vals SEMICOLON
    (55) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (62) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (56) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (59) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (60) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (61) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 269
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 266

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)


state 267

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .

    CREATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    USE             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SET             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SELECT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    INSERT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ALTER           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    EXEC            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DROP            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    CASE            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DELETE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    $end            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    END             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)


state 268

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 269

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 270


state 270

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)

