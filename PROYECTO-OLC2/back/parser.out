Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> create_database_statement
Rule 5     statement -> use_statement
Rule 6     statement -> declare_statement
Rule 7     statement -> set_statement
Rule 8     statement -> create_table_statement
Rule 9     statement -> select_statement
Rule 10    statement -> insert_statement
Rule 11    statement -> create_function_statement
Rule 12    statement -> create_procedure_statement
Rule 13    statement -> alter_table_statement
Rule 14    statement -> if_statement
Rule 15    statement -> exec_statement
Rule 16    statement -> drop_table_statement
Rule 17    statement -> case_statement
Rule 18    statement -> update_statement
Rule 19    statement -> while_statement
Rule 20    statement -> truncate_statement
Rule 21    statement -> delete_statement
Rule 22    create_database_statement -> CREATE DATA BASE NAME SEMICOLON
Rule 23    use_statement -> USE NAME SEMICOLON
Rule 24    declare_statement -> DECLARE ID AS type SEMICOLON
Rule 25    set_statement -> SET assignments SEMICOLON
Rule 26    assignments -> assignments COMMA ID ASSIGN a
Rule 27    assignments -> ID ASSIGN a
Rule 28    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
Rule 29    properties -> properties COMMA property
Rule 30    properties -> property
Rule 31    property -> NAME type null_prod PRIMARY KEY
Rule 32    property -> NAME type null_prod
Rule 33    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 34    null_prod -> NOT NULL
Rule 35    null_prod -> NULL
Rule 36    null_prod -> <empty>
Rule 37    select_statement -> SELECT columns FROM NAME SEMICOLON
Rule 38    select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON
Rule 39    insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
Rule 40    columns -> columns COMMA column
Rule 41    columns -> column
Rule 42    column -> TIMES
Rule 43    column -> NAME
Rule 44    column -> call_function_prod
Rule 45    vals -> vals COMMA a
Rule 46    vals -> a
Rule 47    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
Rule 48    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
Rule 49    parameters -> parameters COMMA ID AS type
Rule 50    parameters -> ID AS type
Rule 51    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
Rule 52    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
Rule 53    if_statement -> IF a THEN statement END IF SEMICOLON
Rule 54    if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON
Rule 55    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
Rule 56    exec_statement -> EXEC NAME vals SEMICOLON
Rule 57    drop_table_statement -> DROP TABLE NAME SEMICOLON
Rule 58    update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON
Rule 59    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 60    column_assignments -> NAME ASSIGN a
Rule 61    while_statement -> WHILE a BEGIN statements END SEMICOLON
Rule 62    truncate_statement -> TRUNCATE TABLE NAME SEMICOLON
Rule 63    delete_statement -> DELETE FROM NAME WHERE a SEMICOLON
Rule 64    case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END
Rule 65    when_statement -> WHEN a THEN a when_statement
Rule 66    when_statement -> <empty>
Rule 67    type -> INT
Rule 68    type -> DECIMAL
Rule 69    type -> DATE
Rule 70    type -> DATETIME
Rule 71    type -> NCHAR L_PAREN a R_PAREN
Rule 72    type -> NVARCHAR L_PAREN a R_PAREN
Rule 73    a -> a OR b
Rule 74    a -> b
Rule 75    b -> b AND c
Rule 76    b -> c
Rule 77    c -> NOT_SIGN d
Rule 78    c -> d
Rule 79    d -> d EQUALS e
Rule 80    d -> d NOT_EQ e
Rule 81    d -> d LESS_THAN e
Rule 82    d -> d GREATER_THAN e
Rule 83    d -> d LESS_EQ e
Rule 84    d -> d GREATER_EQ e
Rule 85    d -> e
Rule 86    e -> e PLUS f
Rule 87    e -> e MINUS f
Rule 88    e -> f
Rule 89    f -> f TIMES g
Rule 90    f -> f DIVIDE g
Rule 91    f -> g
Rule 92    g -> MINUS h
Rule 93    g -> h
Rule 94    h -> INTEGER_VALUE
Rule 95    h -> DECIMAL_VALUE
Rule 96    h -> STRING
Rule 97    h -> ID
Rule 98    h -> NAME
Rule 99    call_function_prod -> HOY L_PAREN R_PAREN
Rule 100   call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN
Rule 101   call_function_prod -> SUBSTRAER L_PAREN a R_PAREN
Rule 102   call_function_prod -> CONTAR L_PAREN a R_PAREN
Rule 103   call_function_prod -> SUMA L_PAREN a R_PAREN
Rule 104   call_function_prod -> CAS L_PAREN a AS type R_PAREN

Terminals, with rules where they appear

ADD                  : 51
ALTER                : 51 52
AND                  : 75
AS                   : 24 47 48 49 50 104
ASSIGN               : 26 27 59 60
BASE                 : 22
BEGIN                : 47 48 61
CAS                  : 104
CASE                 : 64
COLUMN               : 51 52
COMMA                : 26 29 40 45 49 55 55 59 100
CONCATENAR           : 100
CONTAR               : 102
CREATE               : 22 28 47 48
DATA                 : 22
DATE                 : 69
DATETIME             : 70
DECIMAL              : 68
DECIMAL_VALUE        : 95
DECLARE              : 24
DELETE               : 63
DIVIDE               : 90
DROP                 : 52 57
ELSE                 : 54 64
END                  : 47 48 53 54 61 64
EQUALS               : 79
EXEC                 : 56
FROM                 : 37 38 63
FUNCTION             : 47
GREATER_EQ           : 84
GREATER_THAN         : 82
HOY                  : 99
ID                   : 24 26 27 49 50 97
IF                   : 53 53 54 54 55
INSERT               : 39
INT                  : 67
INTEGER_VALUE        : 94
INTO                 : 39
KEY                  : 31
LESS_EQ              : 83
LESS_THAN            : 81
L_PAREN              : 28 33 39 39 47 48 55 71 72 99 100 101 102 103 104
MINUS                : 87 92
NAME                 : 22 23 28 31 32 33 33 33 37 38 39 43 47 48 51 51 52 52 56 57 58 59 60 62 63 98
NCHAR                : 71
NOT                  : 34
NOT_EQ               : 80
NOT_SIGN             : 77
NULL                 : 34 35
NVARCHAR             : 72
OR                   : 73
PLUS                 : 86
PRIMARY              : 31
PROCEDURE            : 48
REFERENCE            : 33
RETURN               : 47
R_PAREN              : 28 33 39 39 47 48 55 71 72 99 100 101 102 103 104
SELECT               : 37 38
SEMICOLON            : 22 23 24 25 28 37 38 39 47 48 51 52 53 54 55 56 57 58 61 62 63
SET                  : 25 58
STRING               : 96
SUBSTRAER            : 101
SUMA                 : 103
TABLE                : 28 51 52 57 62
THEN                 : 53 54 64 64 65
TIMES                : 42 89
TRUNCATE             : 62
UPDATE               : 58
USE                  : 23
VALUES               : 39
WHEN                 : 64 65
WHERE                : 38 58 63
WHILE                : 61
error                : 

Nonterminals, with rules where they appear

a                    : 26 27 38 45 46 53 54 55 55 55 58 59 60 61 63 64 64 64 65 65 71 72 73 100 100 101 102 103 104
alter_table_statement : 13
assignments          : 25 26
b                    : 73 74 75
c                    : 75 76
call_function_prod   : 44
case_statement       : 17
column               : 40 41
column_assignments   : 58 59
columns              : 37 38 39 40
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 77 78 79 80 81 82 83 84
declare_statement    : 6
delete_statement     : 21
drop_table_statement : 16
e                    : 79 80 81 82 83 84 85 86 87
exec_statement       : 15
f                    : 86 87 88 89 90
g                    : 89 90 91
h                    : 92 93
if_statement         : 14
init                 : 0
insert_statement     : 10
null_prod            : 31 32 33
parameters           : 47 48 49
properties           : 28 29
property             : 29 30
select_statement     : 9
set_statement        : 7
statement            : 2 53 54 54
statements           : 1 2 47 48 61
truncate_statement   : 20
type                 : 24 31 32 33 47 49 50 51 104
update_statement     : 18
use_statement        : 5
vals                 : 39 45 56
when_statement       : 64 65
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    init                           shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 3

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    CASE            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> create_database_statement .

    CREATE          reduce using rule 4 (statement -> create_database_statement .)
    USE             reduce using rule 4 (statement -> create_database_statement .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement .)
    SET             reduce using rule 4 (statement -> create_database_statement .)
    SELECT          reduce using rule 4 (statement -> create_database_statement .)
    INSERT          reduce using rule 4 (statement -> create_database_statement .)
    ALTER           reduce using rule 4 (statement -> create_database_statement .)
    IF              reduce using rule 4 (statement -> create_database_statement .)
    EXEC            reduce using rule 4 (statement -> create_database_statement .)
    DROP            reduce using rule 4 (statement -> create_database_statement .)
    CASE            reduce using rule 4 (statement -> create_database_statement .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement .)
    WHILE           reduce using rule 4 (statement -> create_database_statement .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement .)
    DELETE          reduce using rule 4 (statement -> create_database_statement .)
    $end            reduce using rule 4 (statement -> create_database_statement .)
    END             reduce using rule 4 (statement -> create_database_statement .)
    ELSE            reduce using rule 4 (statement -> create_database_statement .)


state 5

    (5) statement -> use_statement .

    CREATE          reduce using rule 5 (statement -> use_statement .)
    USE             reduce using rule 5 (statement -> use_statement .)
    DECLARE         reduce using rule 5 (statement -> use_statement .)
    SET             reduce using rule 5 (statement -> use_statement .)
    SELECT          reduce using rule 5 (statement -> use_statement .)
    INSERT          reduce using rule 5 (statement -> use_statement .)
    ALTER           reduce using rule 5 (statement -> use_statement .)
    IF              reduce using rule 5 (statement -> use_statement .)
    EXEC            reduce using rule 5 (statement -> use_statement .)
    DROP            reduce using rule 5 (statement -> use_statement .)
    CASE            reduce using rule 5 (statement -> use_statement .)
    UPDATE          reduce using rule 5 (statement -> use_statement .)
    WHILE           reduce using rule 5 (statement -> use_statement .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement .)
    DELETE          reduce using rule 5 (statement -> use_statement .)
    $end            reduce using rule 5 (statement -> use_statement .)
    END             reduce using rule 5 (statement -> use_statement .)
    ELSE            reduce using rule 5 (statement -> use_statement .)


state 6

    (6) statement -> declare_statement .

    CREATE          reduce using rule 6 (statement -> declare_statement .)
    USE             reduce using rule 6 (statement -> declare_statement .)
    DECLARE         reduce using rule 6 (statement -> declare_statement .)
    SET             reduce using rule 6 (statement -> declare_statement .)
    SELECT          reduce using rule 6 (statement -> declare_statement .)
    INSERT          reduce using rule 6 (statement -> declare_statement .)
    ALTER           reduce using rule 6 (statement -> declare_statement .)
    IF              reduce using rule 6 (statement -> declare_statement .)
    EXEC            reduce using rule 6 (statement -> declare_statement .)
    DROP            reduce using rule 6 (statement -> declare_statement .)
    CASE            reduce using rule 6 (statement -> declare_statement .)
    UPDATE          reduce using rule 6 (statement -> declare_statement .)
    WHILE           reduce using rule 6 (statement -> declare_statement .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement .)
    DELETE          reduce using rule 6 (statement -> declare_statement .)
    $end            reduce using rule 6 (statement -> declare_statement .)
    END             reduce using rule 6 (statement -> declare_statement .)
    ELSE            reduce using rule 6 (statement -> declare_statement .)


state 7

    (7) statement -> set_statement .

    CREATE          reduce using rule 7 (statement -> set_statement .)
    USE             reduce using rule 7 (statement -> set_statement .)
    DECLARE         reduce using rule 7 (statement -> set_statement .)
    SET             reduce using rule 7 (statement -> set_statement .)
    SELECT          reduce using rule 7 (statement -> set_statement .)
    INSERT          reduce using rule 7 (statement -> set_statement .)
    ALTER           reduce using rule 7 (statement -> set_statement .)
    IF              reduce using rule 7 (statement -> set_statement .)
    EXEC            reduce using rule 7 (statement -> set_statement .)
    DROP            reduce using rule 7 (statement -> set_statement .)
    CASE            reduce using rule 7 (statement -> set_statement .)
    UPDATE          reduce using rule 7 (statement -> set_statement .)
    WHILE           reduce using rule 7 (statement -> set_statement .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement .)
    DELETE          reduce using rule 7 (statement -> set_statement .)
    $end            reduce using rule 7 (statement -> set_statement .)
    END             reduce using rule 7 (statement -> set_statement .)
    ELSE            reduce using rule 7 (statement -> set_statement .)


state 8

    (8) statement -> create_table_statement .

    CREATE          reduce using rule 8 (statement -> create_table_statement .)
    USE             reduce using rule 8 (statement -> create_table_statement .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement .)
    SET             reduce using rule 8 (statement -> create_table_statement .)
    SELECT          reduce using rule 8 (statement -> create_table_statement .)
    INSERT          reduce using rule 8 (statement -> create_table_statement .)
    ALTER           reduce using rule 8 (statement -> create_table_statement .)
    IF              reduce using rule 8 (statement -> create_table_statement .)
    EXEC            reduce using rule 8 (statement -> create_table_statement .)
    DROP            reduce using rule 8 (statement -> create_table_statement .)
    CASE            reduce using rule 8 (statement -> create_table_statement .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement .)
    WHILE           reduce using rule 8 (statement -> create_table_statement .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement .)
    DELETE          reduce using rule 8 (statement -> create_table_statement .)
    $end            reduce using rule 8 (statement -> create_table_statement .)
    END             reduce using rule 8 (statement -> create_table_statement .)
    ELSE            reduce using rule 8 (statement -> create_table_statement .)


state 9

    (9) statement -> select_statement .

    CREATE          reduce using rule 9 (statement -> select_statement .)
    USE             reduce using rule 9 (statement -> select_statement .)
    DECLARE         reduce using rule 9 (statement -> select_statement .)
    SET             reduce using rule 9 (statement -> select_statement .)
    SELECT          reduce using rule 9 (statement -> select_statement .)
    INSERT          reduce using rule 9 (statement -> select_statement .)
    ALTER           reduce using rule 9 (statement -> select_statement .)
    IF              reduce using rule 9 (statement -> select_statement .)
    EXEC            reduce using rule 9 (statement -> select_statement .)
    DROP            reduce using rule 9 (statement -> select_statement .)
    CASE            reduce using rule 9 (statement -> select_statement .)
    UPDATE          reduce using rule 9 (statement -> select_statement .)
    WHILE           reduce using rule 9 (statement -> select_statement .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement .)
    DELETE          reduce using rule 9 (statement -> select_statement .)
    $end            reduce using rule 9 (statement -> select_statement .)
    END             reduce using rule 9 (statement -> select_statement .)
    ELSE            reduce using rule 9 (statement -> select_statement .)


state 10

    (10) statement -> insert_statement .

    CREATE          reduce using rule 10 (statement -> insert_statement .)
    USE             reduce using rule 10 (statement -> insert_statement .)
    DECLARE         reduce using rule 10 (statement -> insert_statement .)
    SET             reduce using rule 10 (statement -> insert_statement .)
    SELECT          reduce using rule 10 (statement -> insert_statement .)
    INSERT          reduce using rule 10 (statement -> insert_statement .)
    ALTER           reduce using rule 10 (statement -> insert_statement .)
    IF              reduce using rule 10 (statement -> insert_statement .)
    EXEC            reduce using rule 10 (statement -> insert_statement .)
    DROP            reduce using rule 10 (statement -> insert_statement .)
    CASE            reduce using rule 10 (statement -> insert_statement .)
    UPDATE          reduce using rule 10 (statement -> insert_statement .)
    WHILE           reduce using rule 10 (statement -> insert_statement .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement .)
    DELETE          reduce using rule 10 (statement -> insert_statement .)
    $end            reduce using rule 10 (statement -> insert_statement .)
    END             reduce using rule 10 (statement -> insert_statement .)
    ELSE            reduce using rule 10 (statement -> insert_statement .)


state 11

    (11) statement -> create_function_statement .

    CREATE          reduce using rule 11 (statement -> create_function_statement .)
    USE             reduce using rule 11 (statement -> create_function_statement .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement .)
    SET             reduce using rule 11 (statement -> create_function_statement .)
    SELECT          reduce using rule 11 (statement -> create_function_statement .)
    INSERT          reduce using rule 11 (statement -> create_function_statement .)
    ALTER           reduce using rule 11 (statement -> create_function_statement .)
    IF              reduce using rule 11 (statement -> create_function_statement .)
    EXEC            reduce using rule 11 (statement -> create_function_statement .)
    DROP            reduce using rule 11 (statement -> create_function_statement .)
    CASE            reduce using rule 11 (statement -> create_function_statement .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement .)
    WHILE           reduce using rule 11 (statement -> create_function_statement .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement .)
    DELETE          reduce using rule 11 (statement -> create_function_statement .)
    $end            reduce using rule 11 (statement -> create_function_statement .)
    END             reduce using rule 11 (statement -> create_function_statement .)
    ELSE            reduce using rule 11 (statement -> create_function_statement .)


state 12

    (12) statement -> create_procedure_statement .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement .)
    USE             reduce using rule 12 (statement -> create_procedure_statement .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement .)
    SET             reduce using rule 12 (statement -> create_procedure_statement .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement .)
    IF              reduce using rule 12 (statement -> create_procedure_statement .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement .)
    CASE            reduce using rule 12 (statement -> create_procedure_statement .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement .)
    $end            reduce using rule 12 (statement -> create_procedure_statement .)
    END             reduce using rule 12 (statement -> create_procedure_statement .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement .)


state 13

    (13) statement -> alter_table_statement .

    CREATE          reduce using rule 13 (statement -> alter_table_statement .)
    USE             reduce using rule 13 (statement -> alter_table_statement .)
    DECLARE         reduce using rule 13 (statement -> alter_table_statement .)
    SET             reduce using rule 13 (statement -> alter_table_statement .)
    SELECT          reduce using rule 13 (statement -> alter_table_statement .)
    INSERT          reduce using rule 13 (statement -> alter_table_statement .)
    ALTER           reduce using rule 13 (statement -> alter_table_statement .)
    IF              reduce using rule 13 (statement -> alter_table_statement .)
    EXEC            reduce using rule 13 (statement -> alter_table_statement .)
    DROP            reduce using rule 13 (statement -> alter_table_statement .)
    CASE            reduce using rule 13 (statement -> alter_table_statement .)
    UPDATE          reduce using rule 13 (statement -> alter_table_statement .)
    WHILE           reduce using rule 13 (statement -> alter_table_statement .)
    TRUNCATE        reduce using rule 13 (statement -> alter_table_statement .)
    DELETE          reduce using rule 13 (statement -> alter_table_statement .)
    $end            reduce using rule 13 (statement -> alter_table_statement .)
    END             reduce using rule 13 (statement -> alter_table_statement .)
    ELSE            reduce using rule 13 (statement -> alter_table_statement .)


state 14

    (14) statement -> if_statement .

    CREATE          reduce using rule 14 (statement -> if_statement .)
    USE             reduce using rule 14 (statement -> if_statement .)
    DECLARE         reduce using rule 14 (statement -> if_statement .)
    SET             reduce using rule 14 (statement -> if_statement .)
    SELECT          reduce using rule 14 (statement -> if_statement .)
    INSERT          reduce using rule 14 (statement -> if_statement .)
    ALTER           reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    EXEC            reduce using rule 14 (statement -> if_statement .)
    DROP            reduce using rule 14 (statement -> if_statement .)
    CASE            reduce using rule 14 (statement -> if_statement .)
    UPDATE          reduce using rule 14 (statement -> if_statement .)
    WHILE           reduce using rule 14 (statement -> if_statement .)
    TRUNCATE        reduce using rule 14 (statement -> if_statement .)
    DELETE          reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    END             reduce using rule 14 (statement -> if_statement .)
    ELSE            reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> exec_statement .

    CREATE          reduce using rule 15 (statement -> exec_statement .)
    USE             reduce using rule 15 (statement -> exec_statement .)
    DECLARE         reduce using rule 15 (statement -> exec_statement .)
    SET             reduce using rule 15 (statement -> exec_statement .)
    SELECT          reduce using rule 15 (statement -> exec_statement .)
    INSERT          reduce using rule 15 (statement -> exec_statement .)
    ALTER           reduce using rule 15 (statement -> exec_statement .)
    IF              reduce using rule 15 (statement -> exec_statement .)
    EXEC            reduce using rule 15 (statement -> exec_statement .)
    DROP            reduce using rule 15 (statement -> exec_statement .)
    CASE            reduce using rule 15 (statement -> exec_statement .)
    UPDATE          reduce using rule 15 (statement -> exec_statement .)
    WHILE           reduce using rule 15 (statement -> exec_statement .)
    TRUNCATE        reduce using rule 15 (statement -> exec_statement .)
    DELETE          reduce using rule 15 (statement -> exec_statement .)
    $end            reduce using rule 15 (statement -> exec_statement .)
    END             reduce using rule 15 (statement -> exec_statement .)
    ELSE            reduce using rule 15 (statement -> exec_statement .)


state 16

    (16) statement -> drop_table_statement .

    CREATE          reduce using rule 16 (statement -> drop_table_statement .)
    USE             reduce using rule 16 (statement -> drop_table_statement .)
    DECLARE         reduce using rule 16 (statement -> drop_table_statement .)
    SET             reduce using rule 16 (statement -> drop_table_statement .)
    SELECT          reduce using rule 16 (statement -> drop_table_statement .)
    INSERT          reduce using rule 16 (statement -> drop_table_statement .)
    ALTER           reduce using rule 16 (statement -> drop_table_statement .)
    IF              reduce using rule 16 (statement -> drop_table_statement .)
    EXEC            reduce using rule 16 (statement -> drop_table_statement .)
    DROP            reduce using rule 16 (statement -> drop_table_statement .)
    CASE            reduce using rule 16 (statement -> drop_table_statement .)
    UPDATE          reduce using rule 16 (statement -> drop_table_statement .)
    WHILE           reduce using rule 16 (statement -> drop_table_statement .)
    TRUNCATE        reduce using rule 16 (statement -> drop_table_statement .)
    DELETE          reduce using rule 16 (statement -> drop_table_statement .)
    $end            reduce using rule 16 (statement -> drop_table_statement .)
    END             reduce using rule 16 (statement -> drop_table_statement .)
    ELSE            reduce using rule 16 (statement -> drop_table_statement .)


state 17

    (17) statement -> case_statement .

    CREATE          reduce using rule 17 (statement -> case_statement .)
    USE             reduce using rule 17 (statement -> case_statement .)
    DECLARE         reduce using rule 17 (statement -> case_statement .)
    SET             reduce using rule 17 (statement -> case_statement .)
    SELECT          reduce using rule 17 (statement -> case_statement .)
    INSERT          reduce using rule 17 (statement -> case_statement .)
    ALTER           reduce using rule 17 (statement -> case_statement .)
    IF              reduce using rule 17 (statement -> case_statement .)
    EXEC            reduce using rule 17 (statement -> case_statement .)
    DROP            reduce using rule 17 (statement -> case_statement .)
    CASE            reduce using rule 17 (statement -> case_statement .)
    UPDATE          reduce using rule 17 (statement -> case_statement .)
    WHILE           reduce using rule 17 (statement -> case_statement .)
    TRUNCATE        reduce using rule 17 (statement -> case_statement .)
    DELETE          reduce using rule 17 (statement -> case_statement .)
    $end            reduce using rule 17 (statement -> case_statement .)
    END             reduce using rule 17 (statement -> case_statement .)
    ELSE            reduce using rule 17 (statement -> case_statement .)


state 18

    (18) statement -> update_statement .

    CREATE          reduce using rule 18 (statement -> update_statement .)
    USE             reduce using rule 18 (statement -> update_statement .)
    DECLARE         reduce using rule 18 (statement -> update_statement .)
    SET             reduce using rule 18 (statement -> update_statement .)
    SELECT          reduce using rule 18 (statement -> update_statement .)
    INSERT          reduce using rule 18 (statement -> update_statement .)
    ALTER           reduce using rule 18 (statement -> update_statement .)
    IF              reduce using rule 18 (statement -> update_statement .)
    EXEC            reduce using rule 18 (statement -> update_statement .)
    DROP            reduce using rule 18 (statement -> update_statement .)
    CASE            reduce using rule 18 (statement -> update_statement .)
    UPDATE          reduce using rule 18 (statement -> update_statement .)
    WHILE           reduce using rule 18 (statement -> update_statement .)
    TRUNCATE        reduce using rule 18 (statement -> update_statement .)
    DELETE          reduce using rule 18 (statement -> update_statement .)
    $end            reduce using rule 18 (statement -> update_statement .)
    END             reduce using rule 18 (statement -> update_statement .)
    ELSE            reduce using rule 18 (statement -> update_statement .)


state 19

    (19) statement -> while_statement .

    CREATE          reduce using rule 19 (statement -> while_statement .)
    USE             reduce using rule 19 (statement -> while_statement .)
    DECLARE         reduce using rule 19 (statement -> while_statement .)
    SET             reduce using rule 19 (statement -> while_statement .)
    SELECT          reduce using rule 19 (statement -> while_statement .)
    INSERT          reduce using rule 19 (statement -> while_statement .)
    ALTER           reduce using rule 19 (statement -> while_statement .)
    IF              reduce using rule 19 (statement -> while_statement .)
    EXEC            reduce using rule 19 (statement -> while_statement .)
    DROP            reduce using rule 19 (statement -> while_statement .)
    CASE            reduce using rule 19 (statement -> while_statement .)
    UPDATE          reduce using rule 19 (statement -> while_statement .)
    WHILE           reduce using rule 19 (statement -> while_statement .)
    TRUNCATE        reduce using rule 19 (statement -> while_statement .)
    DELETE          reduce using rule 19 (statement -> while_statement .)
    $end            reduce using rule 19 (statement -> while_statement .)
    END             reduce using rule 19 (statement -> while_statement .)
    ELSE            reduce using rule 19 (statement -> while_statement .)


state 20

    (20) statement -> truncate_statement .

    CREATE          reduce using rule 20 (statement -> truncate_statement .)
    USE             reduce using rule 20 (statement -> truncate_statement .)
    DECLARE         reduce using rule 20 (statement -> truncate_statement .)
    SET             reduce using rule 20 (statement -> truncate_statement .)
    SELECT          reduce using rule 20 (statement -> truncate_statement .)
    INSERT          reduce using rule 20 (statement -> truncate_statement .)
    ALTER           reduce using rule 20 (statement -> truncate_statement .)
    IF              reduce using rule 20 (statement -> truncate_statement .)
    EXEC            reduce using rule 20 (statement -> truncate_statement .)
    DROP            reduce using rule 20 (statement -> truncate_statement .)
    CASE            reduce using rule 20 (statement -> truncate_statement .)
    UPDATE          reduce using rule 20 (statement -> truncate_statement .)
    WHILE           reduce using rule 20 (statement -> truncate_statement .)
    TRUNCATE        reduce using rule 20 (statement -> truncate_statement .)
    DELETE          reduce using rule 20 (statement -> truncate_statement .)
    $end            reduce using rule 20 (statement -> truncate_statement .)
    END             reduce using rule 20 (statement -> truncate_statement .)
    ELSE            reduce using rule 20 (statement -> truncate_statement .)


state 21

    (21) statement -> delete_statement .

    CREATE          reduce using rule 21 (statement -> delete_statement .)
    USE             reduce using rule 21 (statement -> delete_statement .)
    DECLARE         reduce using rule 21 (statement -> delete_statement .)
    SET             reduce using rule 21 (statement -> delete_statement .)
    SELECT          reduce using rule 21 (statement -> delete_statement .)
    INSERT          reduce using rule 21 (statement -> delete_statement .)
    ALTER           reduce using rule 21 (statement -> delete_statement .)
    IF              reduce using rule 21 (statement -> delete_statement .)
    EXEC            reduce using rule 21 (statement -> delete_statement .)
    DROP            reduce using rule 21 (statement -> delete_statement .)
    CASE            reduce using rule 21 (statement -> delete_statement .)
    UPDATE          reduce using rule 21 (statement -> delete_statement .)
    WHILE           reduce using rule 21 (statement -> delete_statement .)
    TRUNCATE        reduce using rule 21 (statement -> delete_statement .)
    DELETE          reduce using rule 21 (statement -> delete_statement .)
    $end            reduce using rule 21 (statement -> delete_statement .)
    END             reduce using rule 21 (statement -> delete_statement .)
    ELSE            reduce using rule 21 (statement -> delete_statement .)


state 22

    (22) create_database_statement -> CREATE . DATA BASE NAME SEMICOLON
    (28) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (47) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    DATA            shift and go to state 37
    TABLE           shift and go to state 38
    FUNCTION        shift and go to state 39
    PROCEDURE       shift and go to state 40


state 23

    (23) use_statement -> USE . NAME SEMICOLON

    NAME            shift and go to state 41


state 24

    (24) declare_statement -> DECLARE . ID AS type SEMICOLON

    ID              shift and go to state 42


state 25

    (25) set_statement -> SET . assignments SEMICOLON
    (26) assignments -> . assignments COMMA ID ASSIGN a
    (27) assignments -> . ID ASSIGN a

    ID              shift and go to state 44

    assignments                    shift and go to state 43

state 26

    (37) select_statement -> SELECT . columns FROM NAME SEMICOLON
    (38) select_statement -> SELECT . columns FROM NAME WHERE a SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (99) call_function_prod -> . HOY L_PAREN R_PAREN
    (100) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (101) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (102) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (103) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (104) call_function_prod -> . CAS L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAS             shift and go to state 55

    columns                        shift and go to state 45
    column                         shift and go to state 47
    call_function_prod             shift and go to state 49

state 27

    (39) insert_statement -> INSERT . INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    INTO            shift and go to state 56


state 28

    (51) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME SEMICOLON

    TABLE           shift and go to state 57


state 29

    (57) drop_table_statement -> DROP . TABLE NAME SEMICOLON

    TABLE           shift and go to state 58


state 30

    (53) if_statement -> IF . a THEN statement END IF SEMICOLON
    (54) if_statement -> IF . a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    L_PAREN         shift and go to state 60
    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 59
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 31

    (56) exec_statement -> EXEC . NAME vals SEMICOLON

    NAME            shift and go to state 75


state 32

    (64) case_statement -> CASE . WHEN a THEN a when_statement ELSE THEN a END

    WHEN            shift and go to state 76


state 33

    (58) update_statement -> UPDATE . NAME SET column_assignments WHERE a SEMICOLON

    NAME            shift and go to state 77


state 34

    (61) while_statement -> WHILE . a BEGIN statements END SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 78
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 35

    (62) truncate_statement -> TRUNCATE . TABLE NAME SEMICOLON

    TABLE           shift and go to state 79


state 36

    (63) delete_statement -> DELETE . FROM NAME WHERE a SEMICOLON

    FROM            shift and go to state 80


state 37

    (22) create_database_statement -> CREATE DATA . BASE NAME SEMICOLON

    BASE            shift and go to state 81


state 38

    (28) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN SEMICOLON

    NAME            shift and go to state 82


state 39

    (47) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 83


state 40

    (48) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 84


state 41

    (23) use_statement -> USE NAME . SEMICOLON

    SEMICOLON       shift and go to state 85


state 42

    (24) declare_statement -> DECLARE ID . AS type SEMICOLON

    AS              shift and go to state 86


state 43

    (25) set_statement -> SET assignments . SEMICOLON
    (26) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       shift and go to state 87
    COMMA           shift and go to state 88


state 44

    (27) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 89


state 45

    (37) select_statement -> SELECT columns . FROM NAME SEMICOLON
    (38) select_statement -> SELECT columns . FROM NAME WHERE a SEMICOLON
    (40) columns -> columns . COMMA column

    FROM            shift and go to state 90
    COMMA           shift and go to state 91


state 46

    (43) column -> NAME .

    FROM            reduce using rule 43 (column -> NAME .)
    COMMA           reduce using rule 43 (column -> NAME .)
    R_PAREN         reduce using rule 43 (column -> NAME .)


state 47

    (41) columns -> column .

    FROM            reduce using rule 41 (columns -> column .)
    COMMA           reduce using rule 41 (columns -> column .)
    R_PAREN         reduce using rule 41 (columns -> column .)


state 48

    (42) column -> TIMES .

    FROM            reduce using rule 42 (column -> TIMES .)
    COMMA           reduce using rule 42 (column -> TIMES .)
    R_PAREN         reduce using rule 42 (column -> TIMES .)


state 49

    (44) column -> call_function_prod .

    FROM            reduce using rule 44 (column -> call_function_prod .)
    COMMA           reduce using rule 44 (column -> call_function_prod .)
    R_PAREN         reduce using rule 44 (column -> call_function_prod .)


state 50

    (99) call_function_prod -> HOY . L_PAREN R_PAREN

    L_PAREN         shift and go to state 92


state 51

    (100) call_function_prod -> CONCATENAR . L_PAREN a COMMA a R_PAREN

    L_PAREN         shift and go to state 93


state 52

    (101) call_function_prod -> SUBSTRAER . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 94


state 53

    (102) call_function_prod -> CONTAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 95


state 54

    (103) call_function_prod -> SUMA . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 96


state 55

    (104) call_function_prod -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 97


state 56

    (39) insert_statement -> INSERT INTO . NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    NAME            shift and go to state 98


state 57

    (51) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME SEMICOLON

    NAME            shift and go to state 99


state 58

    (57) drop_table_statement -> DROP TABLE . NAME SEMICOLON

    NAME            shift and go to state 100


state 59

    (53) if_statement -> IF a . THEN statement END IF SEMICOLON
    (54) if_statement -> IF a . THEN statement ELSE statement END IF SEMICOLON
    (73) a -> a . OR b

    THEN            shift and go to state 101
    OR              shift and go to state 102


state 60

    (55) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 103
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 61

    (74) a -> b .
    (75) b -> b . AND c

    THEN            reduce using rule 74 (a -> b .)
    OR              reduce using rule 74 (a -> b .)
    BEGIN           reduce using rule 74 (a -> b .)
    COMMA           reduce using rule 74 (a -> b .)
    SEMICOLON       reduce using rule 74 (a -> b .)
    R_PAREN         reduce using rule 74 (a -> b .)
    AS              reduce using rule 74 (a -> b .)
    WHEN            reduce using rule 74 (a -> b .)
    ELSE            reduce using rule 74 (a -> b .)
    WHERE           reduce using rule 74 (a -> b .)
    END             reduce using rule 74 (a -> b .)
    AND             shift and go to state 104


state 62

    (76) b -> c .

    AND             reduce using rule 76 (b -> c .)
    THEN            reduce using rule 76 (b -> c .)
    OR              reduce using rule 76 (b -> c .)
    BEGIN           reduce using rule 76 (b -> c .)
    COMMA           reduce using rule 76 (b -> c .)
    SEMICOLON       reduce using rule 76 (b -> c .)
    R_PAREN         reduce using rule 76 (b -> c .)
    AS              reduce using rule 76 (b -> c .)
    WHEN            reduce using rule 76 (b -> c .)
    ELSE            reduce using rule 76 (b -> c .)
    WHERE           reduce using rule 76 (b -> c .)
    END             reduce using rule 76 (b -> c .)


state 63

    (77) c -> NOT_SIGN . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    d                              shift and go to state 105
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 64

    (78) c -> d .
    (79) d -> d . EQUALS e
    (80) d -> d . NOT_EQ e
    (81) d -> d . LESS_THAN e
    (82) d -> d . GREATER_THAN e
    (83) d -> d . LESS_EQ e
    (84) d -> d . GREATER_EQ e

    AND             reduce using rule 78 (c -> d .)
    THEN            reduce using rule 78 (c -> d .)
    OR              reduce using rule 78 (c -> d .)
    BEGIN           reduce using rule 78 (c -> d .)
    COMMA           reduce using rule 78 (c -> d .)
    SEMICOLON       reduce using rule 78 (c -> d .)
    R_PAREN         reduce using rule 78 (c -> d .)
    AS              reduce using rule 78 (c -> d .)
    WHEN            reduce using rule 78 (c -> d .)
    ELSE            reduce using rule 78 (c -> d .)
    WHERE           reduce using rule 78 (c -> d .)
    END             reduce using rule 78 (c -> d .)
    EQUALS          shift and go to state 106
    NOT_EQ          shift and go to state 107
    LESS_THAN       shift and go to state 108
    GREATER_THAN    shift and go to state 109
    LESS_EQ         shift and go to state 110
    GREATER_EQ      shift and go to state 111


state 65

    (85) d -> e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 85 (d -> e .)
    NOT_EQ          reduce using rule 85 (d -> e .)
    LESS_THAN       reduce using rule 85 (d -> e .)
    GREATER_THAN    reduce using rule 85 (d -> e .)
    LESS_EQ         reduce using rule 85 (d -> e .)
    GREATER_EQ      reduce using rule 85 (d -> e .)
    AND             reduce using rule 85 (d -> e .)
    THEN            reduce using rule 85 (d -> e .)
    OR              reduce using rule 85 (d -> e .)
    BEGIN           reduce using rule 85 (d -> e .)
    COMMA           reduce using rule 85 (d -> e .)
    SEMICOLON       reduce using rule 85 (d -> e .)
    R_PAREN         reduce using rule 85 (d -> e .)
    AS              reduce using rule 85 (d -> e .)
    WHEN            reduce using rule 85 (d -> e .)
    ELSE            reduce using rule 85 (d -> e .)
    WHERE           reduce using rule 85 (d -> e .)
    END             reduce using rule 85 (d -> e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 66

    (88) e -> f .
    (89) f -> f . TIMES g
    (90) f -> f . DIVIDE g

    PLUS            reduce using rule 88 (e -> f .)
    MINUS           reduce using rule 88 (e -> f .)
    EQUALS          reduce using rule 88 (e -> f .)
    NOT_EQ          reduce using rule 88 (e -> f .)
    LESS_THAN       reduce using rule 88 (e -> f .)
    GREATER_THAN    reduce using rule 88 (e -> f .)
    LESS_EQ         reduce using rule 88 (e -> f .)
    GREATER_EQ      reduce using rule 88 (e -> f .)
    AND             reduce using rule 88 (e -> f .)
    THEN            reduce using rule 88 (e -> f .)
    OR              reduce using rule 88 (e -> f .)
    BEGIN           reduce using rule 88 (e -> f .)
    COMMA           reduce using rule 88 (e -> f .)
    SEMICOLON       reduce using rule 88 (e -> f .)
    R_PAREN         reduce using rule 88 (e -> f .)
    AS              reduce using rule 88 (e -> f .)
    WHEN            reduce using rule 88 (e -> f .)
    ELSE            reduce using rule 88 (e -> f .)
    WHERE           reduce using rule 88 (e -> f .)
    END             reduce using rule 88 (e -> f .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 115


state 67

    (92) g -> MINUS . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    h                              shift and go to state 116

state 68

    (91) f -> g .

    TIMES           reduce using rule 91 (f -> g .)
    DIVIDE          reduce using rule 91 (f -> g .)
    PLUS            reduce using rule 91 (f -> g .)
    MINUS           reduce using rule 91 (f -> g .)
    EQUALS          reduce using rule 91 (f -> g .)
    NOT_EQ          reduce using rule 91 (f -> g .)
    LESS_THAN       reduce using rule 91 (f -> g .)
    GREATER_THAN    reduce using rule 91 (f -> g .)
    LESS_EQ         reduce using rule 91 (f -> g .)
    GREATER_EQ      reduce using rule 91 (f -> g .)
    AND             reduce using rule 91 (f -> g .)
    THEN            reduce using rule 91 (f -> g .)
    OR              reduce using rule 91 (f -> g .)
    BEGIN           reduce using rule 91 (f -> g .)
    COMMA           reduce using rule 91 (f -> g .)
    SEMICOLON       reduce using rule 91 (f -> g .)
    R_PAREN         reduce using rule 91 (f -> g .)
    AS              reduce using rule 91 (f -> g .)
    WHEN            reduce using rule 91 (f -> g .)
    ELSE            reduce using rule 91 (f -> g .)
    WHERE           reduce using rule 91 (f -> g .)
    END             reduce using rule 91 (f -> g .)


state 69

    (93) g -> h .

    TIMES           reduce using rule 93 (g -> h .)
    DIVIDE          reduce using rule 93 (g -> h .)
    PLUS            reduce using rule 93 (g -> h .)
    MINUS           reduce using rule 93 (g -> h .)
    EQUALS          reduce using rule 93 (g -> h .)
    NOT_EQ          reduce using rule 93 (g -> h .)
    LESS_THAN       reduce using rule 93 (g -> h .)
    GREATER_THAN    reduce using rule 93 (g -> h .)
    LESS_EQ         reduce using rule 93 (g -> h .)
    GREATER_EQ      reduce using rule 93 (g -> h .)
    AND             reduce using rule 93 (g -> h .)
    THEN            reduce using rule 93 (g -> h .)
    OR              reduce using rule 93 (g -> h .)
    BEGIN           reduce using rule 93 (g -> h .)
    COMMA           reduce using rule 93 (g -> h .)
    SEMICOLON       reduce using rule 93 (g -> h .)
    R_PAREN         reduce using rule 93 (g -> h .)
    AS              reduce using rule 93 (g -> h .)
    WHEN            reduce using rule 93 (g -> h .)
    ELSE            reduce using rule 93 (g -> h .)
    WHERE           reduce using rule 93 (g -> h .)
    END             reduce using rule 93 (g -> h .)


state 70

    (94) h -> INTEGER_VALUE .

    TIMES           reduce using rule 94 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 94 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 94 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 94 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 94 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 94 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 94 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 94 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 94 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 94 (h -> INTEGER_VALUE .)
    AND             reduce using rule 94 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 94 (h -> INTEGER_VALUE .)
    OR              reduce using rule 94 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 94 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 94 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 94 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 94 (h -> INTEGER_VALUE .)
    AS              reduce using rule 94 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 94 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 94 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 94 (h -> INTEGER_VALUE .)
    END             reduce using rule 94 (h -> INTEGER_VALUE .)


state 71

    (95) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 95 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 95 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 95 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 95 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 95 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 95 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 95 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 95 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 95 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 95 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 95 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 95 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 95 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 95 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 95 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 95 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 95 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 95 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 95 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 95 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 95 (h -> DECIMAL_VALUE .)
    END             reduce using rule 95 (h -> DECIMAL_VALUE .)


state 72

    (96) h -> STRING .

    TIMES           reduce using rule 96 (h -> STRING .)
    DIVIDE          reduce using rule 96 (h -> STRING .)
    PLUS            reduce using rule 96 (h -> STRING .)
    MINUS           reduce using rule 96 (h -> STRING .)
    EQUALS          reduce using rule 96 (h -> STRING .)
    NOT_EQ          reduce using rule 96 (h -> STRING .)
    LESS_THAN       reduce using rule 96 (h -> STRING .)
    GREATER_THAN    reduce using rule 96 (h -> STRING .)
    LESS_EQ         reduce using rule 96 (h -> STRING .)
    GREATER_EQ      reduce using rule 96 (h -> STRING .)
    AND             reduce using rule 96 (h -> STRING .)
    THEN            reduce using rule 96 (h -> STRING .)
    OR              reduce using rule 96 (h -> STRING .)
    BEGIN           reduce using rule 96 (h -> STRING .)
    COMMA           reduce using rule 96 (h -> STRING .)
    SEMICOLON       reduce using rule 96 (h -> STRING .)
    R_PAREN         reduce using rule 96 (h -> STRING .)
    AS              reduce using rule 96 (h -> STRING .)
    WHEN            reduce using rule 96 (h -> STRING .)
    ELSE            reduce using rule 96 (h -> STRING .)
    WHERE           reduce using rule 96 (h -> STRING .)
    END             reduce using rule 96 (h -> STRING .)


state 73

    (97) h -> ID .

    TIMES           reduce using rule 97 (h -> ID .)
    DIVIDE          reduce using rule 97 (h -> ID .)
    PLUS            reduce using rule 97 (h -> ID .)
    MINUS           reduce using rule 97 (h -> ID .)
    EQUALS          reduce using rule 97 (h -> ID .)
    NOT_EQ          reduce using rule 97 (h -> ID .)
    LESS_THAN       reduce using rule 97 (h -> ID .)
    GREATER_THAN    reduce using rule 97 (h -> ID .)
    LESS_EQ         reduce using rule 97 (h -> ID .)
    GREATER_EQ      reduce using rule 97 (h -> ID .)
    AND             reduce using rule 97 (h -> ID .)
    THEN            reduce using rule 97 (h -> ID .)
    OR              reduce using rule 97 (h -> ID .)
    BEGIN           reduce using rule 97 (h -> ID .)
    COMMA           reduce using rule 97 (h -> ID .)
    SEMICOLON       reduce using rule 97 (h -> ID .)
    R_PAREN         reduce using rule 97 (h -> ID .)
    AS              reduce using rule 97 (h -> ID .)
    WHEN            reduce using rule 97 (h -> ID .)
    ELSE            reduce using rule 97 (h -> ID .)
    WHERE           reduce using rule 97 (h -> ID .)
    END             reduce using rule 97 (h -> ID .)


state 74

    (98) h -> NAME .

    TIMES           reduce using rule 98 (h -> NAME .)
    DIVIDE          reduce using rule 98 (h -> NAME .)
    PLUS            reduce using rule 98 (h -> NAME .)
    MINUS           reduce using rule 98 (h -> NAME .)
    EQUALS          reduce using rule 98 (h -> NAME .)
    NOT_EQ          reduce using rule 98 (h -> NAME .)
    LESS_THAN       reduce using rule 98 (h -> NAME .)
    GREATER_THAN    reduce using rule 98 (h -> NAME .)
    LESS_EQ         reduce using rule 98 (h -> NAME .)
    GREATER_EQ      reduce using rule 98 (h -> NAME .)
    AND             reduce using rule 98 (h -> NAME .)
    THEN            reduce using rule 98 (h -> NAME .)
    OR              reduce using rule 98 (h -> NAME .)
    BEGIN           reduce using rule 98 (h -> NAME .)
    COMMA           reduce using rule 98 (h -> NAME .)
    SEMICOLON       reduce using rule 98 (h -> NAME .)
    R_PAREN         reduce using rule 98 (h -> NAME .)
    AS              reduce using rule 98 (h -> NAME .)
    WHEN            reduce using rule 98 (h -> NAME .)
    ELSE            reduce using rule 98 (h -> NAME .)
    WHERE           reduce using rule 98 (h -> NAME .)
    END             reduce using rule 98 (h -> NAME .)


state 75

    (56) exec_statement -> EXEC NAME . vals SEMICOLON
    (45) vals -> . vals COMMA a
    (46) vals -> . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    vals                           shift and go to state 117
    a                              shift and go to state 118
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 76

    (64) case_statement -> CASE WHEN . a THEN a when_statement ELSE THEN a END
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 119
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 77

    (58) update_statement -> UPDATE NAME . SET column_assignments WHERE a SEMICOLON

    SET             shift and go to state 120


state 78

    (61) while_statement -> WHILE a . BEGIN statements END SEMICOLON
    (73) a -> a . OR b

    BEGIN           shift and go to state 121
    OR              shift and go to state 102


state 79

    (62) truncate_statement -> TRUNCATE TABLE . NAME SEMICOLON

    NAME            shift and go to state 122


state 80

    (63) delete_statement -> DELETE FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 123


state 81

    (22) create_database_statement -> CREATE DATA BASE . NAME SEMICOLON

    NAME            shift and go to state 124


state 82

    (28) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN SEMICOLON

    L_PAREN         shift and go to state 125


state 83

    (47) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 126


state 84

    (48) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 127


state 85

    (23) use_statement -> USE NAME SEMICOLON .

    CREATE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    USE             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DECLARE         reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    SET             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    SELECT          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    INSERT          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    ALTER           reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    IF              reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    EXEC            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DROP            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    CASE            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    UPDATE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    WHILE           reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    DELETE          reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    $end            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    END             reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)
    ELSE            reduce using rule 23 (use_statement -> USE NAME SEMICOLON .)


state 86

    (24) declare_statement -> DECLARE ID AS . type SEMICOLON
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 128

state 87

    (25) set_statement -> SET assignments SEMICOLON .

    CREATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    USE             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DECLARE         reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SET             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SELECT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    INSERT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    ALTER           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    IF              reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    EXEC            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DROP            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    CASE            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    UPDATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    WHILE           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    TRUNCATE        reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DELETE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    $end            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    END             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    ELSE            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)


state 88

    (26) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 135


state 89

    (27) assignments -> ID ASSIGN . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 136
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 90

    (37) select_statement -> SELECT columns FROM . NAME SEMICOLON
    (38) select_statement -> SELECT columns FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 137


state 91

    (40) columns -> columns COMMA . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (99) call_function_prod -> . HOY L_PAREN R_PAREN
    (100) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (101) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (102) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (103) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (104) call_function_prod -> . CAS L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAS             shift and go to state 55

    column                         shift and go to state 138
    call_function_prod             shift and go to state 49

state 92

    (99) call_function_prod -> HOY L_PAREN . R_PAREN

    R_PAREN         shift and go to state 139


state 93

    (100) call_function_prod -> CONCATENAR L_PAREN . a COMMA a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 140
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 94

    (101) call_function_prod -> SUBSTRAER L_PAREN . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 141
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 95

    (102) call_function_prod -> CONTAR L_PAREN . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 142
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 96

    (103) call_function_prod -> SUMA L_PAREN . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 143
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 97

    (104) call_function_prod -> CAS L_PAREN . a AS type R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 144
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 98

    (39) insert_statement -> INSERT INTO NAME . L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 145


state 99

    (51) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME SEMICOLON

    ADD             shift and go to state 146
    DROP            shift and go to state 147


state 100

    (57) drop_table_statement -> DROP TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 148


state 101

    (53) if_statement -> IF a THEN . statement END IF SEMICOLON
    (54) if_statement -> IF a THEN . statement ELSE statement END IF SEMICOLON
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 149
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 102

    (73) a -> a OR . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    b                              shift and go to state 150
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 103

    (55) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN SEMICOLON
    (73) a -> a . OR b

    COMMA           shift and go to state 151
    OR              shift and go to state 102


state 104

    (75) b -> b AND . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    c                              shift and go to state 152
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 105

    (77) c -> NOT_SIGN d .
    (79) d -> d . EQUALS e
    (80) d -> d . NOT_EQ e
    (81) d -> d . LESS_THAN e
    (82) d -> d . GREATER_THAN e
    (83) d -> d . LESS_EQ e
    (84) d -> d . GREATER_EQ e

    AND             reduce using rule 77 (c -> NOT_SIGN d .)
    THEN            reduce using rule 77 (c -> NOT_SIGN d .)
    OR              reduce using rule 77 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 77 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 77 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 77 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 77 (c -> NOT_SIGN d .)
    AS              reduce using rule 77 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 77 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 77 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 77 (c -> NOT_SIGN d .)
    END             reduce using rule 77 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 106
    NOT_EQ          shift and go to state 107
    LESS_THAN       shift and go to state 108
    GREATER_THAN    shift and go to state 109
    LESS_EQ         shift and go to state 110
    GREATER_EQ      shift and go to state 111


state 106

    (79) d -> d EQUALS . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 153
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 107

    (80) d -> d NOT_EQ . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 154
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 108

    (81) d -> d LESS_THAN . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 155
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 109

    (82) d -> d GREATER_THAN . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 156
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 110

    (83) d -> d LESS_EQ . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 157
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 111

    (84) d -> d GREATER_EQ . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    e                              shift and go to state 158
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 112

    (86) e -> e PLUS . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    f                              shift and go to state 159
    g                              shift and go to state 68
    h                              shift and go to state 69

state 113

    (87) e -> e MINUS . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    f                              shift and go to state 160
    g                              shift and go to state 68
    h                              shift and go to state 69

state 114

    (89) f -> f TIMES . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    g                              shift and go to state 161
    h                              shift and go to state 69

state 115

    (90) f -> f DIVIDE . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    g                              shift and go to state 162
    h                              shift and go to state 69

state 116

    (92) g -> MINUS h .

    TIMES           reduce using rule 92 (g -> MINUS h .)
    DIVIDE          reduce using rule 92 (g -> MINUS h .)
    PLUS            reduce using rule 92 (g -> MINUS h .)
    MINUS           reduce using rule 92 (g -> MINUS h .)
    EQUALS          reduce using rule 92 (g -> MINUS h .)
    NOT_EQ          reduce using rule 92 (g -> MINUS h .)
    LESS_THAN       reduce using rule 92 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 92 (g -> MINUS h .)
    LESS_EQ         reduce using rule 92 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 92 (g -> MINUS h .)
    AND             reduce using rule 92 (g -> MINUS h .)
    THEN            reduce using rule 92 (g -> MINUS h .)
    OR              reduce using rule 92 (g -> MINUS h .)
    BEGIN           reduce using rule 92 (g -> MINUS h .)
    COMMA           reduce using rule 92 (g -> MINUS h .)
    SEMICOLON       reduce using rule 92 (g -> MINUS h .)
    R_PAREN         reduce using rule 92 (g -> MINUS h .)
    AS              reduce using rule 92 (g -> MINUS h .)
    WHEN            reduce using rule 92 (g -> MINUS h .)
    ELSE            reduce using rule 92 (g -> MINUS h .)
    WHERE           reduce using rule 92 (g -> MINUS h .)
    END             reduce using rule 92 (g -> MINUS h .)


state 117

    (56) exec_statement -> EXEC NAME vals . SEMICOLON
    (45) vals -> vals . COMMA a

    SEMICOLON       shift and go to state 163
    COMMA           shift and go to state 164


state 118

    (46) vals -> a .
    (73) a -> a . OR b

    SEMICOLON       reduce using rule 46 (vals -> a .)
    COMMA           reduce using rule 46 (vals -> a .)
    R_PAREN         reduce using rule 46 (vals -> a .)
    OR              shift and go to state 102


state 119

    (64) case_statement -> CASE WHEN a . THEN a when_statement ELSE THEN a END
    (73) a -> a . OR b

    THEN            shift and go to state 165
    OR              shift and go to state 102


state 120

    (58) update_statement -> UPDATE NAME SET . column_assignments WHERE a SEMICOLON
    (59) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (60) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 166

    column_assignments             shift and go to state 167

state 121

    (61) while_statement -> WHILE a BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 168

state 122

    (62) truncate_statement -> TRUNCATE TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 169


state 123

    (63) delete_statement -> DELETE FROM NAME . WHERE a SEMICOLON

    WHERE           shift and go to state 170


state 124

    (22) create_database_statement -> CREATE DATA BASE NAME . SEMICOLON

    SEMICOLON       shift and go to state 171


state 125

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN SEMICOLON
    (29) properties -> . properties COMMA property
    (30) properties -> . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 172

    properties                     shift and go to state 173
    property                       shift and go to state 174

state 126

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (49) parameters -> . parameters COMMA ID AS type
    (50) parameters -> . ID AS type

    ID              shift and go to state 176

    parameters                     shift and go to state 175

state 127

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END SEMICOLON
    (49) parameters -> . parameters COMMA ID AS type
    (50) parameters -> . ID AS type

    ID              shift and go to state 176

    parameters                     shift and go to state 177

state 128

    (24) declare_statement -> DECLARE ID AS type . SEMICOLON

    SEMICOLON       shift and go to state 178


state 129

    (67) type -> INT .

    SEMICOLON       reduce using rule 67 (type -> INT .)
    NOT             reduce using rule 67 (type -> INT .)
    NULL            reduce using rule 67 (type -> INT .)
    PRIMARY         reduce using rule 67 (type -> INT .)
    REFERENCE       reduce using rule 67 (type -> INT .)
    R_PAREN         reduce using rule 67 (type -> INT .)
    COMMA           reduce using rule 67 (type -> INT .)
    AS              reduce using rule 67 (type -> INT .)


state 130

    (68) type -> DECIMAL .

    SEMICOLON       reduce using rule 68 (type -> DECIMAL .)
    NOT             reduce using rule 68 (type -> DECIMAL .)
    NULL            reduce using rule 68 (type -> DECIMAL .)
    PRIMARY         reduce using rule 68 (type -> DECIMAL .)
    REFERENCE       reduce using rule 68 (type -> DECIMAL .)
    R_PAREN         reduce using rule 68 (type -> DECIMAL .)
    COMMA           reduce using rule 68 (type -> DECIMAL .)
    AS              reduce using rule 68 (type -> DECIMAL .)


state 131

    (69) type -> DATE .

    SEMICOLON       reduce using rule 69 (type -> DATE .)
    NOT             reduce using rule 69 (type -> DATE .)
    NULL            reduce using rule 69 (type -> DATE .)
    PRIMARY         reduce using rule 69 (type -> DATE .)
    REFERENCE       reduce using rule 69 (type -> DATE .)
    R_PAREN         reduce using rule 69 (type -> DATE .)
    COMMA           reduce using rule 69 (type -> DATE .)
    AS              reduce using rule 69 (type -> DATE .)


state 132

    (70) type -> DATETIME .

    SEMICOLON       reduce using rule 70 (type -> DATETIME .)
    NOT             reduce using rule 70 (type -> DATETIME .)
    NULL            reduce using rule 70 (type -> DATETIME .)
    PRIMARY         reduce using rule 70 (type -> DATETIME .)
    REFERENCE       reduce using rule 70 (type -> DATETIME .)
    R_PAREN         reduce using rule 70 (type -> DATETIME .)
    COMMA           reduce using rule 70 (type -> DATETIME .)
    AS              reduce using rule 70 (type -> DATETIME .)


state 133

    (71) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 179


state 134

    (72) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 180


state 135

    (26) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 181


state 136

    (27) assignments -> ID ASSIGN a .
    (73) a -> a . OR b

    SEMICOLON       reduce using rule 27 (assignments -> ID ASSIGN a .)
    COMMA           reduce using rule 27 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 102


state 137

    (37) select_statement -> SELECT columns FROM NAME . SEMICOLON
    (38) select_statement -> SELECT columns FROM NAME . WHERE a SEMICOLON

    SEMICOLON       shift and go to state 182
    WHERE           shift and go to state 183


state 138

    (40) columns -> columns COMMA column .

    FROM            reduce using rule 40 (columns -> columns COMMA column .)
    COMMA           reduce using rule 40 (columns -> columns COMMA column .)
    R_PAREN         reduce using rule 40 (columns -> columns COMMA column .)


state 139

    (99) call_function_prod -> HOY L_PAREN R_PAREN .

    FROM            reduce using rule 99 (call_function_prod -> HOY L_PAREN R_PAREN .)
    COMMA           reduce using rule 99 (call_function_prod -> HOY L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 99 (call_function_prod -> HOY L_PAREN R_PAREN .)


state 140

    (100) call_function_prod -> CONCATENAR L_PAREN a . COMMA a R_PAREN
    (73) a -> a . OR b

    COMMA           shift and go to state 184
    OR              shift and go to state 102


state 141

    (101) call_function_prod -> SUBSTRAER L_PAREN a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 185
    OR              shift and go to state 102


state 142

    (102) call_function_prod -> CONTAR L_PAREN a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 186
    OR              shift and go to state 102


state 143

    (103) call_function_prod -> SUMA L_PAREN a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 187
    OR              shift and go to state 102


state 144

    (104) call_function_prod -> CAS L_PAREN a . AS type R_PAREN
    (73) a -> a . OR b

    AS              shift and go to state 188
    OR              shift and go to state 102


state 145

    (39) insert_statement -> INSERT INTO NAME L_PAREN . columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . column
    (42) column -> . TIMES
    (43) column -> . NAME
    (44) column -> . call_function_prod
    (99) call_function_prod -> . HOY L_PAREN R_PAREN
    (100) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (101) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (102) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (103) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (104) call_function_prod -> . CAS L_PAREN a AS type R_PAREN

    TIMES           shift and go to state 48
    NAME            shift and go to state 46
    HOY             shift and go to state 50
    CONCATENAR      shift and go to state 51
    SUBSTRAER       shift and go to state 52
    CONTAR          shift and go to state 53
    SUMA            shift and go to state 54
    CAS             shift and go to state 55

    columns                        shift and go to state 189
    column                         shift and go to state 47
    call_function_prod             shift and go to state 49

state 146

    (51) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type SEMICOLON

    COLUMN          shift and go to state 190


state 147

    (52) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME SEMICOLON

    COLUMN          shift and go to state 191


state 148

    (57) drop_table_statement -> DROP TABLE NAME SEMICOLON .

    CREATE          reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    USE             reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SET             reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    IF              reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DROP            reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    CASE            reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    $end            reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    END             reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ELSE            reduce using rule 57 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)


state 149

    (53) if_statement -> IF a THEN statement . END IF SEMICOLON
    (54) if_statement -> IF a THEN statement . ELSE statement END IF SEMICOLON

    END             shift and go to state 192
    ELSE            shift and go to state 193


state 150

    (73) a -> a OR b .
    (75) b -> b . AND c

    THEN            reduce using rule 73 (a -> a OR b .)
    OR              reduce using rule 73 (a -> a OR b .)
    BEGIN           reduce using rule 73 (a -> a OR b .)
    COMMA           reduce using rule 73 (a -> a OR b .)
    SEMICOLON       reduce using rule 73 (a -> a OR b .)
    R_PAREN         reduce using rule 73 (a -> a OR b .)
    AS              reduce using rule 73 (a -> a OR b .)
    WHEN            reduce using rule 73 (a -> a OR b .)
    ELSE            reduce using rule 73 (a -> a OR b .)
    WHERE           reduce using rule 73 (a -> a OR b .)
    END             reduce using rule 73 (a -> a OR b .)
    AND             shift and go to state 104


state 151

    (55) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 194
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 152

    (75) b -> b AND c .

    AND             reduce using rule 75 (b -> b AND c .)
    THEN            reduce using rule 75 (b -> b AND c .)
    OR              reduce using rule 75 (b -> b AND c .)
    BEGIN           reduce using rule 75 (b -> b AND c .)
    COMMA           reduce using rule 75 (b -> b AND c .)
    SEMICOLON       reduce using rule 75 (b -> b AND c .)
    R_PAREN         reduce using rule 75 (b -> b AND c .)
    AS              reduce using rule 75 (b -> b AND c .)
    WHEN            reduce using rule 75 (b -> b AND c .)
    ELSE            reduce using rule 75 (b -> b AND c .)
    WHERE           reduce using rule 75 (b -> b AND c .)
    END             reduce using rule 75 (b -> b AND c .)


state 153

    (79) d -> d EQUALS e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 79 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 79 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 79 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 79 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 79 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 79 (d -> d EQUALS e .)
    AND             reduce using rule 79 (d -> d EQUALS e .)
    THEN            reduce using rule 79 (d -> d EQUALS e .)
    OR              reduce using rule 79 (d -> d EQUALS e .)
    BEGIN           reduce using rule 79 (d -> d EQUALS e .)
    COMMA           reduce using rule 79 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 79 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 79 (d -> d EQUALS e .)
    AS              reduce using rule 79 (d -> d EQUALS e .)
    WHEN            reduce using rule 79 (d -> d EQUALS e .)
    ELSE            reduce using rule 79 (d -> d EQUALS e .)
    WHERE           reduce using rule 79 (d -> d EQUALS e .)
    END             reduce using rule 79 (d -> d EQUALS e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 154

    (80) d -> d NOT_EQ e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 80 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 80 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 80 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 80 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 80 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 80 (d -> d NOT_EQ e .)
    AND             reduce using rule 80 (d -> d NOT_EQ e .)
    THEN            reduce using rule 80 (d -> d NOT_EQ e .)
    OR              reduce using rule 80 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 80 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 80 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 80 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 80 (d -> d NOT_EQ e .)
    AS              reduce using rule 80 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 80 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 80 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 80 (d -> d NOT_EQ e .)
    END             reduce using rule 80 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 155

    (81) d -> d LESS_THAN e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 81 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 81 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 81 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 81 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 81 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 81 (d -> d LESS_THAN e .)
    AND             reduce using rule 81 (d -> d LESS_THAN e .)
    THEN            reduce using rule 81 (d -> d LESS_THAN e .)
    OR              reduce using rule 81 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 81 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 81 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 81 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 81 (d -> d LESS_THAN e .)
    AS              reduce using rule 81 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 81 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 81 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 81 (d -> d LESS_THAN e .)
    END             reduce using rule 81 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 156

    (82) d -> d GREATER_THAN e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 82 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 82 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 82 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 82 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 82 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 82 (d -> d GREATER_THAN e .)
    AND             reduce using rule 82 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 82 (d -> d GREATER_THAN e .)
    OR              reduce using rule 82 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 82 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 82 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 82 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 82 (d -> d GREATER_THAN e .)
    AS              reduce using rule 82 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 82 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 82 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 82 (d -> d GREATER_THAN e .)
    END             reduce using rule 82 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 157

    (83) d -> d LESS_EQ e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 83 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 83 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 83 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 83 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 83 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 83 (d -> d LESS_EQ e .)
    AND             reduce using rule 83 (d -> d LESS_EQ e .)
    THEN            reduce using rule 83 (d -> d LESS_EQ e .)
    OR              reduce using rule 83 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 83 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 83 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 83 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 83 (d -> d LESS_EQ e .)
    AS              reduce using rule 83 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 83 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 83 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 83 (d -> d LESS_EQ e .)
    END             reduce using rule 83 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 158

    (84) d -> d GREATER_EQ e .
    (86) e -> e . PLUS f
    (87) e -> e . MINUS f

    EQUALS          reduce using rule 84 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 84 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 84 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 84 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 84 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 84 (d -> d GREATER_EQ e .)
    AND             reduce using rule 84 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 84 (d -> d GREATER_EQ e .)
    OR              reduce using rule 84 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 84 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 84 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 84 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 84 (d -> d GREATER_EQ e .)
    AS              reduce using rule 84 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 84 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 84 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 84 (d -> d GREATER_EQ e .)
    END             reduce using rule 84 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 159

    (86) e -> e PLUS f .
    (89) f -> f . TIMES g
    (90) f -> f . DIVIDE g

    PLUS            reduce using rule 86 (e -> e PLUS f .)
    MINUS           reduce using rule 86 (e -> e PLUS f .)
    EQUALS          reduce using rule 86 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 86 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 86 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 86 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 86 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 86 (e -> e PLUS f .)
    AND             reduce using rule 86 (e -> e PLUS f .)
    THEN            reduce using rule 86 (e -> e PLUS f .)
    OR              reduce using rule 86 (e -> e PLUS f .)
    BEGIN           reduce using rule 86 (e -> e PLUS f .)
    COMMA           reduce using rule 86 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 86 (e -> e PLUS f .)
    R_PAREN         reduce using rule 86 (e -> e PLUS f .)
    AS              reduce using rule 86 (e -> e PLUS f .)
    WHEN            reduce using rule 86 (e -> e PLUS f .)
    ELSE            reduce using rule 86 (e -> e PLUS f .)
    WHERE           reduce using rule 86 (e -> e PLUS f .)
    END             reduce using rule 86 (e -> e PLUS f .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 115


state 160

    (87) e -> e MINUS f .
    (89) f -> f . TIMES g
    (90) f -> f . DIVIDE g

    PLUS            reduce using rule 87 (e -> e MINUS f .)
    MINUS           reduce using rule 87 (e -> e MINUS f .)
    EQUALS          reduce using rule 87 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 87 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 87 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 87 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 87 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 87 (e -> e MINUS f .)
    AND             reduce using rule 87 (e -> e MINUS f .)
    THEN            reduce using rule 87 (e -> e MINUS f .)
    OR              reduce using rule 87 (e -> e MINUS f .)
    BEGIN           reduce using rule 87 (e -> e MINUS f .)
    COMMA           reduce using rule 87 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 87 (e -> e MINUS f .)
    R_PAREN         reduce using rule 87 (e -> e MINUS f .)
    AS              reduce using rule 87 (e -> e MINUS f .)
    WHEN            reduce using rule 87 (e -> e MINUS f .)
    ELSE            reduce using rule 87 (e -> e MINUS f .)
    WHERE           reduce using rule 87 (e -> e MINUS f .)
    END             reduce using rule 87 (e -> e MINUS f .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 115


state 161

    (89) f -> f TIMES g .

    TIMES           reduce using rule 89 (f -> f TIMES g .)
    DIVIDE          reduce using rule 89 (f -> f TIMES g .)
    PLUS            reduce using rule 89 (f -> f TIMES g .)
    MINUS           reduce using rule 89 (f -> f TIMES g .)
    EQUALS          reduce using rule 89 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 89 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 89 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 89 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 89 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 89 (f -> f TIMES g .)
    AND             reduce using rule 89 (f -> f TIMES g .)
    THEN            reduce using rule 89 (f -> f TIMES g .)
    OR              reduce using rule 89 (f -> f TIMES g .)
    BEGIN           reduce using rule 89 (f -> f TIMES g .)
    COMMA           reduce using rule 89 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 89 (f -> f TIMES g .)
    R_PAREN         reduce using rule 89 (f -> f TIMES g .)
    AS              reduce using rule 89 (f -> f TIMES g .)
    WHEN            reduce using rule 89 (f -> f TIMES g .)
    ELSE            reduce using rule 89 (f -> f TIMES g .)
    WHERE           reduce using rule 89 (f -> f TIMES g .)
    END             reduce using rule 89 (f -> f TIMES g .)


state 162

    (90) f -> f DIVIDE g .

    TIMES           reduce using rule 90 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 90 (f -> f DIVIDE g .)
    PLUS            reduce using rule 90 (f -> f DIVIDE g .)
    MINUS           reduce using rule 90 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 90 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 90 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 90 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 90 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 90 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 90 (f -> f DIVIDE g .)
    AND             reduce using rule 90 (f -> f DIVIDE g .)
    THEN            reduce using rule 90 (f -> f DIVIDE g .)
    OR              reduce using rule 90 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 90 (f -> f DIVIDE g .)
    COMMA           reduce using rule 90 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 90 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 90 (f -> f DIVIDE g .)
    AS              reduce using rule 90 (f -> f DIVIDE g .)
    WHEN            reduce using rule 90 (f -> f DIVIDE g .)
    ELSE            reduce using rule 90 (f -> f DIVIDE g .)
    WHERE           reduce using rule 90 (f -> f DIVIDE g .)
    END             reduce using rule 90 (f -> f DIVIDE g .)


state 163

    (56) exec_statement -> EXEC NAME vals SEMICOLON .

    CREATE          reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    USE             reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DECLARE         reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SET             reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SELECT          reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    INSERT          reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ALTER           reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    IF              reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    EXEC            reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DROP            reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    CASE            reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    UPDATE          reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    WHILE           reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    TRUNCATE        reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DELETE          reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    $end            reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    END             reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ELSE            reduce using rule 56 (exec_statement -> EXEC NAME vals SEMICOLON .)


state 164

    (45) vals -> vals COMMA . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 195
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 165

    (64) case_statement -> CASE WHEN a THEN . a when_statement ELSE THEN a END
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 196
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 166

    (60) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 197


state 167

    (58) update_statement -> UPDATE NAME SET column_assignments . WHERE a SEMICOLON
    (59) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 198
    COMMA           shift and go to state 199


state 168

    (61) while_statement -> WHILE a BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 200
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 169

    (62) truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .

    CREATE          reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    USE             reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SET             reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    IF              reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DROP            reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    CASE            reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    $end            reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    END             reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    ELSE            reduce using rule 62 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)


state 170

    (63) delete_statement -> DELETE FROM NAME WHERE . a SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 201
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 171

    (22) create_database_statement -> CREATE DATA BASE NAME SEMICOLON .

    CREATE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    USE             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DECLARE         reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SET             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SELECT          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    INSERT          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ALTER           reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    IF              reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    EXEC            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DROP            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    CASE            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    UPDATE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    WHILE           reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DELETE          reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    $end            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    END             reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ELSE            reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)


state 172

    (31) property -> NAME . type null_prod PRIMARY KEY
    (32) property -> NAME . type null_prod
    (33) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 202

state 173

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN SEMICOLON
    (29) properties -> properties . COMMA property

    R_PAREN         shift and go to state 203
    COMMA           shift and go to state 204


state 174

    (30) properties -> property .

    R_PAREN         reduce using rule 30 (properties -> property .)
    COMMA           reduce using rule 30 (properties -> property .)


state 175

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (49) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 205
    COMMA           shift and go to state 206


state 176

    (50) parameters -> ID . AS type

    AS              shift and go to state 207


state 177

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END SEMICOLON
    (49) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 208
    COMMA           shift and go to state 206


state 178

    (24) declare_statement -> DECLARE ID AS type SEMICOLON .

    CREATE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    USE             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DECLARE         reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SET             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SELECT          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    INSERT          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ALTER           reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    IF              reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    EXEC            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DROP            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    CASE            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    UPDATE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    WHILE           reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    TRUNCATE        reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DELETE          reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    $end            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    END             reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ELSE            reduce using rule 24 (declare_statement -> DECLARE ID AS type SEMICOLON .)


state 179

    (71) type -> NCHAR L_PAREN . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 209
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 180

    (72) type -> NVARCHAR L_PAREN . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 210
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 181

    (26) assignments -> assignments COMMA ID ASSIGN . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 211
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 182

    (37) select_statement -> SELECT columns FROM NAME SEMICOLON .

    CREATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    USE             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DECLARE         reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SET             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SELECT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    INSERT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ALTER           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    IF              reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    EXEC            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DROP            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    CASE            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    UPDATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    WHILE           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    TRUNCATE        reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DELETE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    $end            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    END             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ELSE            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)


state 183

    (38) select_statement -> SELECT columns FROM NAME WHERE . a SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 212
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 184

    (100) call_function_prod -> CONCATENAR L_PAREN a COMMA . a R_PAREN
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 213
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 185

    (101) call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .

    FROM            reduce using rule 101 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    COMMA           reduce using rule 101 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 101 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)


state 186

    (102) call_function_prod -> CONTAR L_PAREN a R_PAREN .

    FROM            reduce using rule 102 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 102 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 102 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)


state 187

    (103) call_function_prod -> SUMA L_PAREN a R_PAREN .

    FROM            reduce using rule 103 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    COMMA           reduce using rule 103 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 103 (call_function_prod -> SUMA L_PAREN a R_PAREN .)


state 188

    (104) call_function_prod -> CAS L_PAREN a AS . type R_PAREN
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 214

state 189

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns . R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> columns . COMMA column

    R_PAREN         shift and go to state 215
    COMMA           shift and go to state 91


state 190

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type SEMICOLON

    NAME            shift and go to state 216


state 191

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME SEMICOLON

    NAME            shift and go to state 217


state 192

    (53) if_statement -> IF a THEN statement END . IF SEMICOLON

    IF              shift and go to state 218


state 193

    (54) if_statement -> IF a THEN statement ELSE . statement END IF SEMICOLON
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 219
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 194

    (55) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN SEMICOLON
    (73) a -> a . OR b

    COMMA           shift and go to state 220
    OR              shift and go to state 102


state 195

    (45) vals -> vals COMMA a .
    (73) a -> a . OR b

    SEMICOLON       reduce using rule 45 (vals -> vals COMMA a .)
    COMMA           reduce using rule 45 (vals -> vals COMMA a .)
    R_PAREN         reduce using rule 45 (vals -> vals COMMA a .)
    OR              shift and go to state 102


state 196

    (64) case_statement -> CASE WHEN a THEN a . when_statement ELSE THEN a END
    (73) a -> a . OR b
    (65) when_statement -> . WHEN a THEN a when_statement
    (66) when_statement -> .

    OR              shift and go to state 102
    WHEN            shift and go to state 221
    ELSE            reduce using rule 66 (when_statement -> .)

    when_statement                 shift and go to state 222

state 197

    (60) column_assignments -> NAME ASSIGN . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 223
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 198

    (58) update_statement -> UPDATE NAME SET column_assignments WHERE . a SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 224
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 199

    (59) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 225


state 200

    (61) while_statement -> WHILE a BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 226


state 201

    (63) delete_statement -> DELETE FROM NAME WHERE a . SEMICOLON
    (73) a -> a . OR b

    SEMICOLON       shift and go to state 227
    OR              shift and go to state 102


state 202

    (31) property -> NAME type . null_prod PRIMARY KEY
    (32) property -> NAME type . null_prod
    (33) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (34) null_prod -> . NOT NULL
    (35) null_prod -> . NULL
    (36) null_prod -> .

    NOT             shift and go to state 229
    NULL            shift and go to state 230
    PRIMARY         reduce using rule 36 (null_prod -> .)
    REFERENCE       reduce using rule 36 (null_prod -> .)
    R_PAREN         reduce using rule 36 (null_prod -> .)
    COMMA           reduce using rule 36 (null_prod -> .)

    null_prod                      shift and go to state 228

state 203

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 204

    (29) properties -> properties COMMA . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 172

    property                       shift and go to state 232

state 205

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END SEMICOLON

    RETURN          shift and go to state 233


state 206

    (49) parameters -> parameters COMMA . ID AS type

    ID              shift and go to state 234


state 207

    (50) parameters -> ID AS . type
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 235

state 208

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 236


state 209

    (71) type -> NCHAR L_PAREN a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 237
    OR              shift and go to state 102


state 210

    (72) type -> NVARCHAR L_PAREN a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 238
    OR              shift and go to state 102


state 211

    (26) assignments -> assignments COMMA ID ASSIGN a .
    (73) a -> a . OR b

    SEMICOLON       reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    COMMA           reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 102


state 212

    (38) select_statement -> SELECT columns FROM NAME WHERE a . SEMICOLON
    (73) a -> a . OR b

    SEMICOLON       shift and go to state 239
    OR              shift and go to state 102


state 213

    (100) call_function_prod -> CONCATENAR L_PAREN a COMMA a . R_PAREN
    (73) a -> a . OR b

    R_PAREN         shift and go to state 240
    OR              shift and go to state 102


state 214

    (104) call_function_prod -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 241


state 215

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN . VALUES L_PAREN vals R_PAREN SEMICOLON

    VALUES          shift and go to state 242


state 216

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type SEMICOLON
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 243

state 217

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME . SEMICOLON

    SEMICOLON       shift and go to state 244


state 218

    (53) if_statement -> IF a THEN statement END IF . SEMICOLON

    SEMICOLON       shift and go to state 245


state 219

    (54) if_statement -> IF a THEN statement ELSE statement . END IF SEMICOLON

    END             shift and go to state 246


state 220

    (55) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN SEMICOLON
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 247
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 221

    (65) when_statement -> WHEN . a THEN a when_statement
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 248
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 222

    (64) case_statement -> CASE WHEN a THEN a when_statement . ELSE THEN a END

    ELSE            shift and go to state 249


state 223

    (60) column_assignments -> NAME ASSIGN a .
    (73) a -> a . OR b

    WHERE           reduce using rule 60 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 60 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 102


state 224

    (58) update_statement -> UPDATE NAME SET column_assignments WHERE a . SEMICOLON
    (73) a -> a . OR b

    SEMICOLON       shift and go to state 250
    OR              shift and go to state 102


state 225

    (59) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 251


state 226

    (61) while_statement -> WHILE a BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    USE             reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SET             reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    IF              reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    $end            reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    END             reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 61 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)


state 227

    (63) delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    CASE            reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    ELSE            reduce using rule 63 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)


state 228

    (31) property -> NAME type null_prod . PRIMARY KEY
    (32) property -> NAME type null_prod .
    (33) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 252
    R_PAREN         reduce using rule 32 (property -> NAME type null_prod .)
    COMMA           reduce using rule 32 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 253


state 229

    (34) null_prod -> NOT . NULL

    NULL            shift and go to state 254


state 230

    (35) null_prod -> NULL .

    PRIMARY         reduce using rule 35 (null_prod -> NULL .)
    REFERENCE       reduce using rule 35 (null_prod -> NULL .)
    R_PAREN         reduce using rule 35 (null_prod -> NULL .)
    COMMA           reduce using rule 35 (null_prod -> NULL .)


state 231

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .

    CREATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    USE             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SET             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SELECT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    INSERT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ALTER           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    IF              reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    EXEC            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DROP            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    CASE            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    WHILE           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DELETE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    $end            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    END             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ELSE            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)


state 232

    (29) properties -> properties COMMA property .

    R_PAREN         reduce using rule 29 (properties -> properties COMMA property .)
    COMMA           reduce using rule 29 (properties -> properties COMMA property .)


state 233

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END SEMICOLON
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 255

state 234

    (49) parameters -> parameters COMMA ID . AS type

    AS              shift and go to state 256


state 235

    (50) parameters -> ID AS type .

    R_PAREN         reduce using rule 50 (parameters -> ID AS type .)
    COMMA           reduce using rule 50 (parameters -> ID AS type .)


state 236

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 257


state 237

    (71) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 71 (type -> NCHAR L_PAREN a R_PAREN .)


state 238

    (72) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 72 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 239

    (38) select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    CASE            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ELSE            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)


state 240

    (100) call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .

    FROM            reduce using rule 100 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    COMMA           reduce using rule 100 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    R_PAREN         reduce using rule 100 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)


state 241

    (104) call_function_prod -> CAS L_PAREN a AS type R_PAREN .

    FROM            reduce using rule 104 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 104 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 104 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)


state 242

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES . L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 258


state 243

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type . SEMICOLON

    SEMICOLON       shift and go to state 259


state 244

    (52) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .

    CREATE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    USE             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DECLARE         reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SET             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SELECT          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    INSERT          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ALTER           reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    IF              reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    EXEC            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DROP            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    CASE            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    UPDATE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    WHILE           reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    TRUNCATE        reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DELETE          reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    $end            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    END             reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ELSE            reduce using rule 52 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)


state 245

    (53) if_statement -> IF a THEN statement END IF SEMICOLON .

    CREATE          reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    USE             reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    DECLARE         reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    SET             reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    SELECT          reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    INSERT          reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    ALTER           reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    IF              reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    EXEC            reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    DROP            reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    CASE            reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    UPDATE          reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    WHILE           reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    TRUNCATE        reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    DELETE          reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    $end            reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    END             reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)
    ELSE            reduce using rule 53 (if_statement -> IF a THEN statement END IF SEMICOLON .)


state 246

    (54) if_statement -> IF a THEN statement ELSE statement END . IF SEMICOLON

    IF              shift and go to state 260


state 247

    (55) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN SEMICOLON
    (73) a -> a . OR b

    R_PAREN         shift and go to state 261
    OR              shift and go to state 102


state 248

    (65) when_statement -> WHEN a . THEN a when_statement
    (73) a -> a . OR b

    THEN            shift and go to state 262
    OR              shift and go to state 102


state 249

    (64) case_statement -> CASE WHEN a THEN a when_statement ELSE . THEN a END

    THEN            shift and go to state 263


state 250

    (58) update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .

    CREATE          reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    USE             reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DECLARE         reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SET             reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SELECT          reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    INSERT          reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ALTER           reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    IF              reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    EXEC            reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DROP            reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    CASE            reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    UPDATE          reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    WHILE           reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DELETE          reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    $end            reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    END             reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ELSE            reduce using rule 58 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)


state 251

    (59) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 264
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 252

    (31) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 265


state 253

    (33) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 266


state 254

    (34) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 34 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 34 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 34 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 34 (null_prod -> NOT NULL .)


state 255

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 267


state 256

    (49) parameters -> parameters COMMA ID AS . type
    (67) type -> . INT
    (68) type -> . DECIMAL
    (69) type -> . DATE
    (70) type -> . DATETIME
    (71) type -> . NCHAR L_PAREN a R_PAREN
    (72) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 129
    DECIMAL         shift and go to state 130
    DATE            shift and go to state 131
    DATETIME        shift and go to state 132
    NCHAR           shift and go to state 133
    NVARCHAR        shift and go to state 134

    type                           shift and go to state 268

state 257

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 269

state 258

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN . vals R_PAREN SEMICOLON
    (45) vals -> . vals COMMA a
    (46) vals -> . a
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    vals                           shift and go to state 270
    a                              shift and go to state 118
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 259

    (51) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .

    CREATE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    USE             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DECLARE         reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SET             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SELECT          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    INSERT          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ALTER           reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    IF              reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    EXEC            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DROP            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    CASE            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    UPDATE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    WHILE           reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    TRUNCATE        reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DELETE          reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    $end            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    END             reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ELSE            reduce using rule 51 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)


state 260

    (54) if_statement -> IF a THEN statement ELSE statement END IF . SEMICOLON

    SEMICOLON       shift and go to state 271


state 261

    (55) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 272


state 262

    (65) when_statement -> WHEN a THEN . a when_statement
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 273
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 263

    (64) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN . a END
    (73) a -> . a OR b
    (74) a -> . b
    (75) b -> . b AND c
    (76) b -> . c
    (77) c -> . NOT_SIGN d
    (78) c -> . d
    (79) d -> . d EQUALS e
    (80) d -> . d NOT_EQ e
    (81) d -> . d LESS_THAN e
    (82) d -> . d GREATER_THAN e
    (83) d -> . d LESS_EQ e
    (84) d -> . d GREATER_EQ e
    (85) d -> . e
    (86) e -> . e PLUS f
    (87) e -> . e MINUS f
    (88) e -> . f
    (89) f -> . f TIMES g
    (90) f -> . f DIVIDE g
    (91) f -> . g
    (92) g -> . MINUS h
    (93) g -> . h
    (94) h -> . INTEGER_VALUE
    (95) h -> . DECIMAL_VALUE
    (96) h -> . STRING
    (97) h -> . ID
    (98) h -> . NAME

    NOT_SIGN        shift and go to state 63
    MINUS           shift and go to state 67
    INTEGER_VALUE   shift and go to state 70
    DECIMAL_VALUE   shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    NAME            shift and go to state 74

    a                              shift and go to state 274
    b                              shift and go to state 61
    c                              shift and go to state 62
    d                              shift and go to state 64
    e                              shift and go to state 65
    f                              shift and go to state 66
    g                              shift and go to state 68
    h                              shift and go to state 69

state 264

    (59) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (73) a -> a . OR b

    WHERE           reduce using rule 59 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 59 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 102


state 265

    (31) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)


state 266

    (33) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 275


state 267

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 276


state 268

    (49) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 49 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 49 (parameters -> parameters COMMA ID AS type .)


state 269

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 277
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 270

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals . R_PAREN SEMICOLON
    (45) vals -> vals . COMMA a

    R_PAREN         shift and go to state 278
    COMMA           shift and go to state 164


state 271

    (54) if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .

    CREATE          reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    USE             reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    DECLARE         reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    SET             reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    SELECT          reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    INSERT          reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    ALTER           reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    IF              reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    EXEC            reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    DROP            reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    CASE            reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    UPDATE          reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    WHILE           reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    TRUNCATE        reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    DELETE          reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    $end            reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    END             reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)
    ELSE            reduce using rule 54 (if_statement -> IF a THEN statement ELSE statement END IF SEMICOLON .)


state 272

    (55) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .

    CREATE          reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    USE             reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SET             reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SELECT          reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    INSERT          reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ALTER           reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    IF              reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    EXEC            reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DROP            reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    CASE            reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHILE           reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DELETE          reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    $end            reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    END             reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ELSE            reduce using rule 55 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)


state 273

    (65) when_statement -> WHEN a THEN a . when_statement
    (73) a -> a . OR b
    (65) when_statement -> . WHEN a THEN a when_statement
    (66) when_statement -> .

    OR              shift and go to state 102
    WHEN            shift and go to state 221
    ELSE            reduce using rule 66 (when_statement -> .)

    when_statement                 shift and go to state 279

state 274

    (64) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a . END
    (73) a -> a . OR b

    END             shift and go to state 280
    OR              shift and go to state 102


state 275

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 281


state 276

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 282

state 277

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 283


state 278

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 284


state 279

    (65) when_statement -> WHEN a THEN a when_statement .

    ELSE            reduce using rule 65 (when_statement -> WHEN a THEN a when_statement .)


state 280

    (64) case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .

    CREATE          reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    USE             reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DECLARE         reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    SET             reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    SELECT          reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    INSERT          reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    ALTER           reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    IF              reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    EXEC            reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DROP            reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    CASE            reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    UPDATE          reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    WHILE           reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    TRUNCATE        reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    DELETE          reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    $end            reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    END             reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)
    ELSE            reduce using rule 64 (case_statement -> CASE WHEN a THEN a when_statement ELSE THEN a END .)


state 281

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 285


state 282

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) statement -> . truncate_statement
    (21) statement -> . delete_statement
    (22) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (23) use_statement -> . USE NAME SEMICOLON
    (24) declare_statement -> . DECLARE ID AS type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (47) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (48) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (51) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (52) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (53) if_statement -> . IF a THEN statement END IF SEMICOLON
    (54) if_statement -> . IF a THEN statement ELSE statement END IF SEMICOLON
    (55) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (56) exec_statement -> . EXEC NAME vals SEMICOLON
    (57) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (64) case_statement -> . CASE WHEN a THEN a when_statement ELSE THEN a END
    (58) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (61) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (62) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (63) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 286
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 28
    IF              shift and go to state 30
    EXEC            shift and go to state 31
    DROP            shift and go to state 29
    CASE            shift and go to state 32
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    delete_statement               shift and go to state 21

state 283

    (48) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 48 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)


state 284

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .

    CREATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    USE             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SET             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SELECT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    INSERT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ALTER           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    EXEC            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DROP            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    CASE            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DELETE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    $end            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    END             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ELSE            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)


state 285

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 286

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 287


state 287

    (47) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 47 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)

