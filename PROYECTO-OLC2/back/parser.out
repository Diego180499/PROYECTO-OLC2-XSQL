Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CASE
    CAST
    CONCATENAR
    CONTAR
    DECIMAL_VALUE
    DIVIDE
    ELSE
    EQUALS
    FOREIGN
    GREATER_EQ
    GREATER_THAN
    HOY
    LESS_EQ
    LESS_THAN
    MINUS
    NOT_EQ
    NOT_SIGN
    OR
    PLUS
    RETURNS
    SUBSTRAER
    SUMA
    THEN
    TRUNCATE
    WHEN

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> create_database_statement
Rule 5     statement -> use_statement
Rule 6     statement -> declare_statement
Rule 7     statement -> set_statement
Rule 8     statement -> create_table_statement
Rule 9     statement -> select_statement
Rule 10    statement -> insert_statement
Rule 11    statement -> create_function_statement
Rule 12    statement -> create_procedure_statement
Rule 13    statement -> alter_table_statement
Rule 14    statement -> if_statement
Rule 15    statement -> exec_statement
Rule 16    statement -> drop_table_statement
Rule 17    statement -> case_statement
Rule 18    statement -> update_statement
Rule 19    statement -> while_statement
Rule 20    create_database_statement -> CREATE DATA BASE NAME SEMICOLON
Rule 21    use_statement -> USE NAME SEMICOLON
Rule 22    declare_statement -> DECLARE ID AS type SEMICOLON
Rule 23    set_statement -> SET assignments SEMICOLON
Rule 24    assignments -> assignments COMMA ID ASSIGN a
Rule 25    assignments -> ID ASSIGN a
Rule 26    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
Rule 27    properties -> properties COMMA property
Rule 28    properties -> property
Rule 29    property -> NAME type null_prod PRIMARY KEY
Rule 30    property -> NAME type null_prod
Rule 31    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 32    null_prod -> NOT NULL
Rule 33    null_prod -> NULL
Rule 34    null_prod -> <empty>
Rule 35    select_statement -> SELECT columns FROM NAME SEMICOLON
Rule 36    select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON
Rule 37    select_statement -> SELECT TIMES FROM NAME SEMICOLON
Rule 38    select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON
Rule 39    insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
Rule 40    columns -> columns COMMA NAME
Rule 41    columns -> NAME
Rule 42    vals -> vals COMMA a
Rule 43    vals -> a
Rule 44    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
Rule 45    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
Rule 46    parameters -> parameters COMMA ID AS type
Rule 47    parameters -> ID AS type
Rule 48    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
Rule 49    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
Rule 50    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
Rule 51    exec_statement -> EXEC NAME vals SEMICOLON
Rule 52    drop_table_statement -> DROP TABLE NAME SEMICOLON
Rule 53    update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON
Rule 54    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 55    column_assignments -> NAME ASSIGN a
Rule 56    case_statement -> <empty>
Rule 57    while_statement -> WHILE a BEGIN statements END SEMICOLON
Rule 58    type -> INT
Rule 59    type -> DECIMAL
Rule 60    type -> BIT
Rule 61    type -> NCHAR
Rule 62    type -> NVARCHAR
Rule 63    type -> DATE
Rule 64    type -> DATETIME
Rule 65    a -> INTEGER_VALUE
Rule 66    a -> STRING

Terminals, with rules where they appear

ADD                  : 48
ALTER                : 48 49
AND                  : 
AS                   : 22 44 45 46 47
ASSIGN               : 24 25 54 55
BASE                 : 20
BEGIN                : 44 45 57
BIT                  : 60
CASE                 : 
CAST                 : 
COLUMN               : 48 49
COMMA                : 24 27 40 42 46 50 50 54
CONCATENAR           : 
CONTAR               : 
CREATE               : 20 26 44 45
DATA                 : 20
DATE                 : 63
DATETIME             : 64
DECIMAL              : 59
DECIMAL_VALUE        : 
DECLARE              : 22
DIVIDE               : 
DROP                 : 49 52
ELSE                 : 
END                  : 44 45 57
EQUALS               : 
EXEC                 : 51
FOREIGN              : 
FROM                 : 35 36 37 38
FUNCTION             : 44
GREATER_EQ           : 
GREATER_THAN         : 
HOY                  : 
ID                   : 22 24 25 46 47
IF                   : 50
INSERT               : 39
INT                  : 58
INTEGER_VALUE        : 65
INTO                 : 39
KEY                  : 29
LESS_EQ              : 
LESS_THAN            : 
L_PAREN              : 26 31 39 39 44 45 50
MINUS                : 
NAME                 : 20 21 26 29 30 31 31 31 35 36 37 38 39 40 41 44 45 48 48 49 49 51 52 53 54 55
NCHAR                : 61
NOT                  : 32
NOT_EQ               : 
NOT_SIGN             : 
NULL                 : 32 33
NVARCHAR             : 62
OR                   : 
PLUS                 : 
PRIMARY              : 29
PROCEDURE            : 45
REFERENCE            : 31
RETURN               : 44
RETURNS              : 
R_PAREN              : 26 31 39 39 44 45 50
SELECT               : 35 36 37 38
SEMICOLON            : 20 21 22 23 26 35 36 37 38 39 44 45 48 49 50 51 52 53 57
SET                  : 23 53
STRING               : 66
SUBSTRAER            : 
SUMA                 : 
TABLE                : 26 48 49 52
THEN                 : 
TIMES                : 37 38
TRUNCATE             : 
UPDATE               : 53
USE                  : 21
VALUES               : 39
WHEN                 : 
WHERE                : 36 38 53
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

a                    : 24 25 36 38 42 43 50 50 50 53 54 55 57
alter_table_statement : 13
assignments          : 23 24
case_statement       : 17
column_assignments   : 53 54
columns              : 35 36 39 40
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
declare_statement    : 6
drop_table_statement : 16
exec_statement       : 15
if_statement         : 14
init                 : 0
insert_statement     : 10
null_prod            : 29 30 31
parameters           : 44 45 46
properties           : 26 27
property             : 27 28
select_statement     : 9
set_statement        : 7
statement            : 2
statements           : 1 2 44 45 57
type                 : 22 29 30 31 44 46 47 48
update_statement     : 18
use_statement        : 5
vals                 : 39 42 51
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    init                           shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (21) use_statement -> . USE NAME SEMICOLON
    (22) declare_statement -> . DECLARE ID AS type SEMICOLON
    (23) set_statement -> . SET assignments SEMICOLON
    (26) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (35) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (36) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (37) select_statement -> . SELECT TIMES FROM NAME SEMICOLON
    (38) select_statement -> . SELECT TIMES FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (44) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (45) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (48) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (50) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (51) exec_statement -> . EXEC NAME vals SEMICOLON
    (52) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (56) case_statement -> .
    (53) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (57) while_statement -> . WHILE a BEGIN statements END SEMICOLON

  ! shift/reduce conflict for CREATE resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for INSERT resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for EXEC resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (init -> statements .)
  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 20
    USE             shift and go to state 21
    DECLARE         shift and go to state 22
    SET             shift and go to state 23
    SELECT          shift and go to state 24
    INSERT          shift and go to state 25
    ALTER           shift and go to state 26
    IF              shift and go to state 28
    EXEC            shift and go to state 29
    DROP            shift and go to state 27
    UPDATE          shift and go to state 30
    WHILE           shift and go to state 31

  ! CREATE          [ reduce using rule 56 (case_statement -> .) ]
  ! USE             [ reduce using rule 56 (case_statement -> .) ]
  ! DECLARE         [ reduce using rule 56 (case_statement -> .) ]
  ! SET             [ reduce using rule 56 (case_statement -> .) ]
  ! SELECT          [ reduce using rule 56 (case_statement -> .) ]
  ! INSERT          [ reduce using rule 56 (case_statement -> .) ]
  ! ALTER           [ reduce using rule 56 (case_statement -> .) ]
  ! IF              [ reduce using rule 56 (case_statement -> .) ]
  ! EXEC            [ reduce using rule 56 (case_statement -> .) ]
  ! DROP            [ reduce using rule 56 (case_statement -> .) ]
  ! UPDATE          [ reduce using rule 56 (case_statement -> .) ]
  ! WHILE           [ reduce using rule 56 (case_statement -> .) ]
  ! $end            [ reduce using rule 56 (case_statement -> .) ]

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19

state 3

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> create_database_statement .

    CREATE          reduce using rule 4 (statement -> create_database_statement .)
    USE             reduce using rule 4 (statement -> create_database_statement .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement .)
    SET             reduce using rule 4 (statement -> create_database_statement .)
    SELECT          reduce using rule 4 (statement -> create_database_statement .)
    INSERT          reduce using rule 4 (statement -> create_database_statement .)
    ALTER           reduce using rule 4 (statement -> create_database_statement .)
    IF              reduce using rule 4 (statement -> create_database_statement .)
    EXEC            reduce using rule 4 (statement -> create_database_statement .)
    DROP            reduce using rule 4 (statement -> create_database_statement .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement .)
    WHILE           reduce using rule 4 (statement -> create_database_statement .)
    $end            reduce using rule 4 (statement -> create_database_statement .)
    END             reduce using rule 4 (statement -> create_database_statement .)


state 5

    (5) statement -> use_statement .

    CREATE          reduce using rule 5 (statement -> use_statement .)
    USE             reduce using rule 5 (statement -> use_statement .)
    DECLARE         reduce using rule 5 (statement -> use_statement .)
    SET             reduce using rule 5 (statement -> use_statement .)
    SELECT          reduce using rule 5 (statement -> use_statement .)
    INSERT          reduce using rule 5 (statement -> use_statement .)
    ALTER           reduce using rule 5 (statement -> use_statement .)
    IF              reduce using rule 5 (statement -> use_statement .)
    EXEC            reduce using rule 5 (statement -> use_statement .)
    DROP            reduce using rule 5 (statement -> use_statement .)
    UPDATE          reduce using rule 5 (statement -> use_statement .)
    WHILE           reduce using rule 5 (statement -> use_statement .)
    $end            reduce using rule 5 (statement -> use_statement .)
    END             reduce using rule 5 (statement -> use_statement .)


state 6

    (6) statement -> declare_statement .

    CREATE          reduce using rule 6 (statement -> declare_statement .)
    USE             reduce using rule 6 (statement -> declare_statement .)
    DECLARE         reduce using rule 6 (statement -> declare_statement .)
    SET             reduce using rule 6 (statement -> declare_statement .)
    SELECT          reduce using rule 6 (statement -> declare_statement .)
    INSERT          reduce using rule 6 (statement -> declare_statement .)
    ALTER           reduce using rule 6 (statement -> declare_statement .)
    IF              reduce using rule 6 (statement -> declare_statement .)
    EXEC            reduce using rule 6 (statement -> declare_statement .)
    DROP            reduce using rule 6 (statement -> declare_statement .)
    UPDATE          reduce using rule 6 (statement -> declare_statement .)
    WHILE           reduce using rule 6 (statement -> declare_statement .)
    $end            reduce using rule 6 (statement -> declare_statement .)
    END             reduce using rule 6 (statement -> declare_statement .)


state 7

    (7) statement -> set_statement .

    CREATE          reduce using rule 7 (statement -> set_statement .)
    USE             reduce using rule 7 (statement -> set_statement .)
    DECLARE         reduce using rule 7 (statement -> set_statement .)
    SET             reduce using rule 7 (statement -> set_statement .)
    SELECT          reduce using rule 7 (statement -> set_statement .)
    INSERT          reduce using rule 7 (statement -> set_statement .)
    ALTER           reduce using rule 7 (statement -> set_statement .)
    IF              reduce using rule 7 (statement -> set_statement .)
    EXEC            reduce using rule 7 (statement -> set_statement .)
    DROP            reduce using rule 7 (statement -> set_statement .)
    UPDATE          reduce using rule 7 (statement -> set_statement .)
    WHILE           reduce using rule 7 (statement -> set_statement .)
    $end            reduce using rule 7 (statement -> set_statement .)
    END             reduce using rule 7 (statement -> set_statement .)


state 8

    (8) statement -> create_table_statement .

    CREATE          reduce using rule 8 (statement -> create_table_statement .)
    USE             reduce using rule 8 (statement -> create_table_statement .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement .)
    SET             reduce using rule 8 (statement -> create_table_statement .)
    SELECT          reduce using rule 8 (statement -> create_table_statement .)
    INSERT          reduce using rule 8 (statement -> create_table_statement .)
    ALTER           reduce using rule 8 (statement -> create_table_statement .)
    IF              reduce using rule 8 (statement -> create_table_statement .)
    EXEC            reduce using rule 8 (statement -> create_table_statement .)
    DROP            reduce using rule 8 (statement -> create_table_statement .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement .)
    WHILE           reduce using rule 8 (statement -> create_table_statement .)
    $end            reduce using rule 8 (statement -> create_table_statement .)
    END             reduce using rule 8 (statement -> create_table_statement .)


state 9

    (9) statement -> select_statement .

    CREATE          reduce using rule 9 (statement -> select_statement .)
    USE             reduce using rule 9 (statement -> select_statement .)
    DECLARE         reduce using rule 9 (statement -> select_statement .)
    SET             reduce using rule 9 (statement -> select_statement .)
    SELECT          reduce using rule 9 (statement -> select_statement .)
    INSERT          reduce using rule 9 (statement -> select_statement .)
    ALTER           reduce using rule 9 (statement -> select_statement .)
    IF              reduce using rule 9 (statement -> select_statement .)
    EXEC            reduce using rule 9 (statement -> select_statement .)
    DROP            reduce using rule 9 (statement -> select_statement .)
    UPDATE          reduce using rule 9 (statement -> select_statement .)
    WHILE           reduce using rule 9 (statement -> select_statement .)
    $end            reduce using rule 9 (statement -> select_statement .)
    END             reduce using rule 9 (statement -> select_statement .)


state 10

    (10) statement -> insert_statement .

    CREATE          reduce using rule 10 (statement -> insert_statement .)
    USE             reduce using rule 10 (statement -> insert_statement .)
    DECLARE         reduce using rule 10 (statement -> insert_statement .)
    SET             reduce using rule 10 (statement -> insert_statement .)
    SELECT          reduce using rule 10 (statement -> insert_statement .)
    INSERT          reduce using rule 10 (statement -> insert_statement .)
    ALTER           reduce using rule 10 (statement -> insert_statement .)
    IF              reduce using rule 10 (statement -> insert_statement .)
    EXEC            reduce using rule 10 (statement -> insert_statement .)
    DROP            reduce using rule 10 (statement -> insert_statement .)
    UPDATE          reduce using rule 10 (statement -> insert_statement .)
    WHILE           reduce using rule 10 (statement -> insert_statement .)
    $end            reduce using rule 10 (statement -> insert_statement .)
    END             reduce using rule 10 (statement -> insert_statement .)


state 11

    (11) statement -> create_function_statement .

    CREATE          reduce using rule 11 (statement -> create_function_statement .)
    USE             reduce using rule 11 (statement -> create_function_statement .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement .)
    SET             reduce using rule 11 (statement -> create_function_statement .)
    SELECT          reduce using rule 11 (statement -> create_function_statement .)
    INSERT          reduce using rule 11 (statement -> create_function_statement .)
    ALTER           reduce using rule 11 (statement -> create_function_statement .)
    IF              reduce using rule 11 (statement -> create_function_statement .)
    EXEC            reduce using rule 11 (statement -> create_function_statement .)
    DROP            reduce using rule 11 (statement -> create_function_statement .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement .)
    WHILE           reduce using rule 11 (statement -> create_function_statement .)
    $end            reduce using rule 11 (statement -> create_function_statement .)
    END             reduce using rule 11 (statement -> create_function_statement .)


state 12

    (12) statement -> create_procedure_statement .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement .)
    USE             reduce using rule 12 (statement -> create_procedure_statement .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement .)
    SET             reduce using rule 12 (statement -> create_procedure_statement .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement .)
    IF              reduce using rule 12 (statement -> create_procedure_statement .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement .)
    $end            reduce using rule 12 (statement -> create_procedure_statement .)
    END             reduce using rule 12 (statement -> create_procedure_statement .)


state 13

    (13) statement -> alter_table_statement .

    CREATE          reduce using rule 13 (statement -> alter_table_statement .)
    USE             reduce using rule 13 (statement -> alter_table_statement .)
    DECLARE         reduce using rule 13 (statement -> alter_table_statement .)
    SET             reduce using rule 13 (statement -> alter_table_statement .)
    SELECT          reduce using rule 13 (statement -> alter_table_statement .)
    INSERT          reduce using rule 13 (statement -> alter_table_statement .)
    ALTER           reduce using rule 13 (statement -> alter_table_statement .)
    IF              reduce using rule 13 (statement -> alter_table_statement .)
    EXEC            reduce using rule 13 (statement -> alter_table_statement .)
    DROP            reduce using rule 13 (statement -> alter_table_statement .)
    UPDATE          reduce using rule 13 (statement -> alter_table_statement .)
    WHILE           reduce using rule 13 (statement -> alter_table_statement .)
    $end            reduce using rule 13 (statement -> alter_table_statement .)
    END             reduce using rule 13 (statement -> alter_table_statement .)


state 14

    (14) statement -> if_statement .

    CREATE          reduce using rule 14 (statement -> if_statement .)
    USE             reduce using rule 14 (statement -> if_statement .)
    DECLARE         reduce using rule 14 (statement -> if_statement .)
    SET             reduce using rule 14 (statement -> if_statement .)
    SELECT          reduce using rule 14 (statement -> if_statement .)
    INSERT          reduce using rule 14 (statement -> if_statement .)
    ALTER           reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    EXEC            reduce using rule 14 (statement -> if_statement .)
    DROP            reduce using rule 14 (statement -> if_statement .)
    UPDATE          reduce using rule 14 (statement -> if_statement .)
    WHILE           reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    END             reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> exec_statement .

    CREATE          reduce using rule 15 (statement -> exec_statement .)
    USE             reduce using rule 15 (statement -> exec_statement .)
    DECLARE         reduce using rule 15 (statement -> exec_statement .)
    SET             reduce using rule 15 (statement -> exec_statement .)
    SELECT          reduce using rule 15 (statement -> exec_statement .)
    INSERT          reduce using rule 15 (statement -> exec_statement .)
    ALTER           reduce using rule 15 (statement -> exec_statement .)
    IF              reduce using rule 15 (statement -> exec_statement .)
    EXEC            reduce using rule 15 (statement -> exec_statement .)
    DROP            reduce using rule 15 (statement -> exec_statement .)
    UPDATE          reduce using rule 15 (statement -> exec_statement .)
    WHILE           reduce using rule 15 (statement -> exec_statement .)
    $end            reduce using rule 15 (statement -> exec_statement .)
    END             reduce using rule 15 (statement -> exec_statement .)


state 16

    (16) statement -> drop_table_statement .

    CREATE          reduce using rule 16 (statement -> drop_table_statement .)
    USE             reduce using rule 16 (statement -> drop_table_statement .)
    DECLARE         reduce using rule 16 (statement -> drop_table_statement .)
    SET             reduce using rule 16 (statement -> drop_table_statement .)
    SELECT          reduce using rule 16 (statement -> drop_table_statement .)
    INSERT          reduce using rule 16 (statement -> drop_table_statement .)
    ALTER           reduce using rule 16 (statement -> drop_table_statement .)
    IF              reduce using rule 16 (statement -> drop_table_statement .)
    EXEC            reduce using rule 16 (statement -> drop_table_statement .)
    DROP            reduce using rule 16 (statement -> drop_table_statement .)
    UPDATE          reduce using rule 16 (statement -> drop_table_statement .)
    WHILE           reduce using rule 16 (statement -> drop_table_statement .)
    $end            reduce using rule 16 (statement -> drop_table_statement .)
    END             reduce using rule 16 (statement -> drop_table_statement .)


state 17

    (17) statement -> case_statement .

    CREATE          reduce using rule 17 (statement -> case_statement .)
    USE             reduce using rule 17 (statement -> case_statement .)
    DECLARE         reduce using rule 17 (statement -> case_statement .)
    SET             reduce using rule 17 (statement -> case_statement .)
    SELECT          reduce using rule 17 (statement -> case_statement .)
    INSERT          reduce using rule 17 (statement -> case_statement .)
    ALTER           reduce using rule 17 (statement -> case_statement .)
    IF              reduce using rule 17 (statement -> case_statement .)
    EXEC            reduce using rule 17 (statement -> case_statement .)
    DROP            reduce using rule 17 (statement -> case_statement .)
    UPDATE          reduce using rule 17 (statement -> case_statement .)
    WHILE           reduce using rule 17 (statement -> case_statement .)
    $end            reduce using rule 17 (statement -> case_statement .)
    END             reduce using rule 17 (statement -> case_statement .)


state 18

    (18) statement -> update_statement .

    CREATE          reduce using rule 18 (statement -> update_statement .)
    USE             reduce using rule 18 (statement -> update_statement .)
    DECLARE         reduce using rule 18 (statement -> update_statement .)
    SET             reduce using rule 18 (statement -> update_statement .)
    SELECT          reduce using rule 18 (statement -> update_statement .)
    INSERT          reduce using rule 18 (statement -> update_statement .)
    ALTER           reduce using rule 18 (statement -> update_statement .)
    IF              reduce using rule 18 (statement -> update_statement .)
    EXEC            reduce using rule 18 (statement -> update_statement .)
    DROP            reduce using rule 18 (statement -> update_statement .)
    UPDATE          reduce using rule 18 (statement -> update_statement .)
    WHILE           reduce using rule 18 (statement -> update_statement .)
    $end            reduce using rule 18 (statement -> update_statement .)
    END             reduce using rule 18 (statement -> update_statement .)


state 19

    (19) statement -> while_statement .

    CREATE          reduce using rule 19 (statement -> while_statement .)
    USE             reduce using rule 19 (statement -> while_statement .)
    DECLARE         reduce using rule 19 (statement -> while_statement .)
    SET             reduce using rule 19 (statement -> while_statement .)
    SELECT          reduce using rule 19 (statement -> while_statement .)
    INSERT          reduce using rule 19 (statement -> while_statement .)
    ALTER           reduce using rule 19 (statement -> while_statement .)
    IF              reduce using rule 19 (statement -> while_statement .)
    EXEC            reduce using rule 19 (statement -> while_statement .)
    DROP            reduce using rule 19 (statement -> while_statement .)
    UPDATE          reduce using rule 19 (statement -> while_statement .)
    WHILE           reduce using rule 19 (statement -> while_statement .)
    $end            reduce using rule 19 (statement -> while_statement .)
    END             reduce using rule 19 (statement -> while_statement .)


state 20

    (20) create_database_statement -> CREATE . DATA BASE NAME SEMICOLON
    (26) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (44) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (45) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    DATA            shift and go to state 32
    TABLE           shift and go to state 33
    FUNCTION        shift and go to state 34
    PROCEDURE       shift and go to state 35


state 21

    (21) use_statement -> USE . NAME SEMICOLON

    NAME            shift and go to state 36


state 22

    (22) declare_statement -> DECLARE . ID AS type SEMICOLON

    ID              shift and go to state 37


state 23

    (23) set_statement -> SET . assignments SEMICOLON
    (24) assignments -> . assignments COMMA ID ASSIGN a
    (25) assignments -> . ID ASSIGN a

    ID              shift and go to state 39

    assignments                    shift and go to state 38

state 24

    (35) select_statement -> SELECT . columns FROM NAME SEMICOLON
    (36) select_statement -> SELECT . columns FROM NAME WHERE a SEMICOLON
    (37) select_statement -> SELECT . TIMES FROM NAME SEMICOLON
    (38) select_statement -> SELECT . TIMES FROM NAME WHERE a SEMICOLON
    (40) columns -> . columns COMMA NAME
    (41) columns -> . NAME

    TIMES           shift and go to state 42
    NAME            shift and go to state 41

    columns                        shift and go to state 40

state 25

    (39) insert_statement -> INSERT . INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    INTO            shift and go to state 43


state 26

    (48) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME SEMICOLON

    TABLE           shift and go to state 44


state 27

    (52) drop_table_statement -> DROP . TABLE NAME SEMICOLON

    TABLE           shift and go to state 45


state 28

    (50) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON

    L_PAREN         shift and go to state 46


state 29

    (51) exec_statement -> EXEC . NAME vals SEMICOLON

    NAME            shift and go to state 47


state 30

    (53) update_statement -> UPDATE . NAME SET column_assignments WHERE a SEMICOLON

    NAME            shift and go to state 48


state 31

    (57) while_statement -> WHILE . a BEGIN statements END SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 49

state 32

    (20) create_database_statement -> CREATE DATA . BASE NAME SEMICOLON

    BASE            shift and go to state 52


state 33

    (26) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN SEMICOLON

    NAME            shift and go to state 53


state 34

    (44) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 54


state 35

    (45) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 55


state 36

    (21) use_statement -> USE NAME . SEMICOLON

    SEMICOLON       shift and go to state 56


state 37

    (22) declare_statement -> DECLARE ID . AS type SEMICOLON

    AS              shift and go to state 57


state 38

    (23) set_statement -> SET assignments . SEMICOLON
    (24) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       shift and go to state 58
    COMMA           shift and go to state 59


state 39

    (25) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 60


state 40

    (35) select_statement -> SELECT columns . FROM NAME SEMICOLON
    (36) select_statement -> SELECT columns . FROM NAME WHERE a SEMICOLON
    (40) columns -> columns . COMMA NAME

    FROM            shift and go to state 61
    COMMA           shift and go to state 62


state 41

    (41) columns -> NAME .

    FROM            reduce using rule 41 (columns -> NAME .)
    COMMA           reduce using rule 41 (columns -> NAME .)
    R_PAREN         reduce using rule 41 (columns -> NAME .)


state 42

    (37) select_statement -> SELECT TIMES . FROM NAME SEMICOLON
    (38) select_statement -> SELECT TIMES . FROM NAME WHERE a SEMICOLON

    FROM            shift and go to state 63


state 43

    (39) insert_statement -> INSERT INTO . NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    NAME            shift and go to state 64


state 44

    (48) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME SEMICOLON

    NAME            shift and go to state 65


state 45

    (52) drop_table_statement -> DROP TABLE . NAME SEMICOLON

    NAME            shift and go to state 66


state 46

    (50) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 67

state 47

    (51) exec_statement -> EXEC NAME . vals SEMICOLON
    (42) vals -> . vals COMMA a
    (43) vals -> . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    vals                           shift and go to state 68
    a                              shift and go to state 69

state 48

    (53) update_statement -> UPDATE NAME . SET column_assignments WHERE a SEMICOLON

    SET             shift and go to state 70


state 49

    (57) while_statement -> WHILE a . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 71


state 50

    (65) a -> INTEGER_VALUE .

    BEGIN           reduce using rule 65 (a -> INTEGER_VALUE .)
    COMMA           reduce using rule 65 (a -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 65 (a -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 65 (a -> INTEGER_VALUE .)
    WHERE           reduce using rule 65 (a -> INTEGER_VALUE .)


state 51

    (66) a -> STRING .

    BEGIN           reduce using rule 66 (a -> STRING .)
    COMMA           reduce using rule 66 (a -> STRING .)
    SEMICOLON       reduce using rule 66 (a -> STRING .)
    R_PAREN         reduce using rule 66 (a -> STRING .)
    WHERE           reduce using rule 66 (a -> STRING .)


state 52

    (20) create_database_statement -> CREATE DATA BASE . NAME SEMICOLON

    NAME            shift and go to state 72


state 53

    (26) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN SEMICOLON

    L_PAREN         shift and go to state 73


state 54

    (44) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 74


state 55

    (45) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 75


state 56

    (21) use_statement -> USE NAME SEMICOLON .

    CREATE          reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    USE             reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    DECLARE         reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    SET             reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    SELECT          reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    INSERT          reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    ALTER           reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    IF              reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    EXEC            reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    DROP            reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    UPDATE          reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    WHILE           reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    $end            reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)
    END             reduce using rule 21 (use_statement -> USE NAME SEMICOLON .)


state 57

    (22) declare_statement -> DECLARE ID AS . type SEMICOLON
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 76

state 58

    (23) set_statement -> SET assignments SEMICOLON .

    CREATE          reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    USE             reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    DECLARE         reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    SET             reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    SELECT          reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    INSERT          reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    ALTER           reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    IF              reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    EXEC            reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    DROP            reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    UPDATE          reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    WHILE           reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    $end            reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)
    END             reduce using rule 23 (set_statement -> SET assignments SEMICOLON .)


state 59

    (24) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 84


state 60

    (25) assignments -> ID ASSIGN . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 85

state 61

    (35) select_statement -> SELECT columns FROM . NAME SEMICOLON
    (36) select_statement -> SELECT columns FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 86


state 62

    (40) columns -> columns COMMA . NAME

    NAME            shift and go to state 87


state 63

    (37) select_statement -> SELECT TIMES FROM . NAME SEMICOLON
    (38) select_statement -> SELECT TIMES FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 88


state 64

    (39) insert_statement -> INSERT INTO NAME . L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 89


state 65

    (48) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME SEMICOLON

    ADD             shift and go to state 90
    DROP            shift and go to state 91


state 66

    (52) drop_table_statement -> DROP TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 92


state 67

    (50) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN SEMICOLON

    COMMA           shift and go to state 93


state 68

    (51) exec_statement -> EXEC NAME vals . SEMICOLON
    (42) vals -> vals . COMMA a

    SEMICOLON       shift and go to state 94
    COMMA           shift and go to state 95


state 69

    (43) vals -> a .

    SEMICOLON       reduce using rule 43 (vals -> a .)
    COMMA           reduce using rule 43 (vals -> a .)
    R_PAREN         reduce using rule 43 (vals -> a .)


state 70

    (53) update_statement -> UPDATE NAME SET . column_assignments WHERE a SEMICOLON
    (54) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (55) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 96

    column_assignments             shift and go to state 97

state 71

    (57) while_statement -> WHILE a BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)

    statements                     shift and go to state 98

state 72

    (20) create_database_statement -> CREATE DATA BASE NAME . SEMICOLON

    SEMICOLON       shift and go to state 99


state 73

    (26) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN SEMICOLON
    (27) properties -> . properties COMMA property
    (28) properties -> . property
    (29) property -> . NAME type null_prod PRIMARY KEY
    (30) property -> . NAME type null_prod
    (31) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 100

    properties                     shift and go to state 101
    property                       shift and go to state 102

state 74

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (46) parameters -> . parameters COMMA ID AS type
    (47) parameters -> . ID AS type

    ID              shift and go to state 104

    parameters                     shift and go to state 103

state 75

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END SEMICOLON
    (46) parameters -> . parameters COMMA ID AS type
    (47) parameters -> . ID AS type

    ID              shift and go to state 104

    parameters                     shift and go to state 105

state 76

    (22) declare_statement -> DECLARE ID AS type . SEMICOLON

    SEMICOLON       shift and go to state 106


state 77

    (58) type -> INT .

    SEMICOLON       reduce using rule 58 (type -> INT .)
    NOT             reduce using rule 58 (type -> INT .)
    NULL            reduce using rule 58 (type -> INT .)
    PRIMARY         reduce using rule 58 (type -> INT .)
    REFERENCE       reduce using rule 58 (type -> INT .)
    R_PAREN         reduce using rule 58 (type -> INT .)
    COMMA           reduce using rule 58 (type -> INT .)
    AS              reduce using rule 58 (type -> INT .)


state 78

    (59) type -> DECIMAL .

    SEMICOLON       reduce using rule 59 (type -> DECIMAL .)
    NOT             reduce using rule 59 (type -> DECIMAL .)
    NULL            reduce using rule 59 (type -> DECIMAL .)
    PRIMARY         reduce using rule 59 (type -> DECIMAL .)
    REFERENCE       reduce using rule 59 (type -> DECIMAL .)
    R_PAREN         reduce using rule 59 (type -> DECIMAL .)
    COMMA           reduce using rule 59 (type -> DECIMAL .)
    AS              reduce using rule 59 (type -> DECIMAL .)


state 79

    (60) type -> BIT .

    SEMICOLON       reduce using rule 60 (type -> BIT .)
    NOT             reduce using rule 60 (type -> BIT .)
    NULL            reduce using rule 60 (type -> BIT .)
    PRIMARY         reduce using rule 60 (type -> BIT .)
    REFERENCE       reduce using rule 60 (type -> BIT .)
    R_PAREN         reduce using rule 60 (type -> BIT .)
    COMMA           reduce using rule 60 (type -> BIT .)
    AS              reduce using rule 60 (type -> BIT .)


state 80

    (61) type -> NCHAR .

    SEMICOLON       reduce using rule 61 (type -> NCHAR .)
    NOT             reduce using rule 61 (type -> NCHAR .)
    NULL            reduce using rule 61 (type -> NCHAR .)
    PRIMARY         reduce using rule 61 (type -> NCHAR .)
    REFERENCE       reduce using rule 61 (type -> NCHAR .)
    R_PAREN         reduce using rule 61 (type -> NCHAR .)
    COMMA           reduce using rule 61 (type -> NCHAR .)
    AS              reduce using rule 61 (type -> NCHAR .)


state 81

    (62) type -> NVARCHAR .

    SEMICOLON       reduce using rule 62 (type -> NVARCHAR .)
    NOT             reduce using rule 62 (type -> NVARCHAR .)
    NULL            reduce using rule 62 (type -> NVARCHAR .)
    PRIMARY         reduce using rule 62 (type -> NVARCHAR .)
    REFERENCE       reduce using rule 62 (type -> NVARCHAR .)
    R_PAREN         reduce using rule 62 (type -> NVARCHAR .)
    COMMA           reduce using rule 62 (type -> NVARCHAR .)
    AS              reduce using rule 62 (type -> NVARCHAR .)


state 82

    (63) type -> DATE .

    SEMICOLON       reduce using rule 63 (type -> DATE .)
    NOT             reduce using rule 63 (type -> DATE .)
    NULL            reduce using rule 63 (type -> DATE .)
    PRIMARY         reduce using rule 63 (type -> DATE .)
    REFERENCE       reduce using rule 63 (type -> DATE .)
    R_PAREN         reduce using rule 63 (type -> DATE .)
    COMMA           reduce using rule 63 (type -> DATE .)
    AS              reduce using rule 63 (type -> DATE .)


state 83

    (64) type -> DATETIME .

    SEMICOLON       reduce using rule 64 (type -> DATETIME .)
    NOT             reduce using rule 64 (type -> DATETIME .)
    NULL            reduce using rule 64 (type -> DATETIME .)
    PRIMARY         reduce using rule 64 (type -> DATETIME .)
    REFERENCE       reduce using rule 64 (type -> DATETIME .)
    R_PAREN         reduce using rule 64 (type -> DATETIME .)
    COMMA           reduce using rule 64 (type -> DATETIME .)
    AS              reduce using rule 64 (type -> DATETIME .)


state 84

    (24) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 107


state 85

    (25) assignments -> ID ASSIGN a .

    SEMICOLON       reduce using rule 25 (assignments -> ID ASSIGN a .)
    COMMA           reduce using rule 25 (assignments -> ID ASSIGN a .)


state 86

    (35) select_statement -> SELECT columns FROM NAME . SEMICOLON
    (36) select_statement -> SELECT columns FROM NAME . WHERE a SEMICOLON

    SEMICOLON       shift and go to state 108
    WHERE           shift and go to state 109


state 87

    (40) columns -> columns COMMA NAME .

    FROM            reduce using rule 40 (columns -> columns COMMA NAME .)
    COMMA           reduce using rule 40 (columns -> columns COMMA NAME .)
    R_PAREN         reduce using rule 40 (columns -> columns COMMA NAME .)


state 88

    (37) select_statement -> SELECT TIMES FROM NAME . SEMICOLON
    (38) select_statement -> SELECT TIMES FROM NAME . WHERE a SEMICOLON

    SEMICOLON       shift and go to state 110
    WHERE           shift and go to state 111


state 89

    (39) insert_statement -> INSERT INTO NAME L_PAREN . columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> . columns COMMA NAME
    (41) columns -> . NAME

    NAME            shift and go to state 41

    columns                        shift and go to state 112

state 90

    (48) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type SEMICOLON

    COLUMN          shift and go to state 113


state 91

    (49) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME SEMICOLON

    COLUMN          shift and go to state 114


state 92

    (52) drop_table_statement -> DROP TABLE NAME SEMICOLON .

    CREATE          reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    USE             reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SET             reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    IF              reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DROP            reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    $end            reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    END             reduce using rule 52 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)


state 93

    (50) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 115

state 94

    (51) exec_statement -> EXEC NAME vals SEMICOLON .

    CREATE          reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    USE             reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DECLARE         reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SET             reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SELECT          reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    INSERT          reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ALTER           reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    IF              reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    EXEC            reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DROP            reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    UPDATE          reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    WHILE           reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    $end            reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)
    END             reduce using rule 51 (exec_statement -> EXEC NAME vals SEMICOLON .)


state 95

    (42) vals -> vals COMMA . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 116

state 96

    (55) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 117


state 97

    (53) update_statement -> UPDATE NAME SET column_assignments . WHERE a SEMICOLON
    (54) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 118
    COMMA           shift and go to state 119


state 98

    (57) while_statement -> WHILE a BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (21) use_statement -> . USE NAME SEMICOLON
    (22) declare_statement -> . DECLARE ID AS type SEMICOLON
    (23) set_statement -> . SET assignments SEMICOLON
    (26) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (35) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (36) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (37) select_statement -> . SELECT TIMES FROM NAME SEMICOLON
    (38) select_statement -> . SELECT TIMES FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (44) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (45) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (48) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (50) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (51) exec_statement -> . EXEC NAME vals SEMICOLON
    (52) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (56) case_statement -> .
    (53) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (57) while_statement -> . WHILE a BEGIN statements END SEMICOLON

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CREATE resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for INSERT resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for EXEC resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             shift and go to state 120
    CREATE          shift and go to state 20
    USE             shift and go to state 21
    DECLARE         shift and go to state 22
    SET             shift and go to state 23
    SELECT          shift and go to state 24
    INSERT          shift and go to state 25
    ALTER           shift and go to state 26
    IF              shift and go to state 28
    EXEC            shift and go to state 29
    DROP            shift and go to state 27
    UPDATE          shift and go to state 30
    WHILE           shift and go to state 31

  ! END             [ reduce using rule 56 (case_statement -> .) ]
  ! CREATE          [ reduce using rule 56 (case_statement -> .) ]
  ! USE             [ reduce using rule 56 (case_statement -> .) ]
  ! DECLARE         [ reduce using rule 56 (case_statement -> .) ]
  ! SET             [ reduce using rule 56 (case_statement -> .) ]
  ! SELECT          [ reduce using rule 56 (case_statement -> .) ]
  ! INSERT          [ reduce using rule 56 (case_statement -> .) ]
  ! ALTER           [ reduce using rule 56 (case_statement -> .) ]
  ! IF              [ reduce using rule 56 (case_statement -> .) ]
  ! EXEC            [ reduce using rule 56 (case_statement -> .) ]
  ! DROP            [ reduce using rule 56 (case_statement -> .) ]
  ! UPDATE          [ reduce using rule 56 (case_statement -> .) ]
  ! WHILE           [ reduce using rule 56 (case_statement -> .) ]

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19

state 99

    (20) create_database_statement -> CREATE DATA BASE NAME SEMICOLON .

    CREATE          reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    USE             reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DECLARE         reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SET             reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SELECT          reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    INSERT          reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ALTER           reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    IF              reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    EXEC            reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DROP            reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    UPDATE          reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    WHILE           reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    $end            reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    END             reduce using rule 20 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)


state 100

    (29) property -> NAME . type null_prod PRIMARY KEY
    (30) property -> NAME . type null_prod
    (31) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 121

state 101

    (26) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN SEMICOLON
    (27) properties -> properties . COMMA property

    R_PAREN         shift and go to state 122
    COMMA           shift and go to state 123


state 102

    (28) properties -> property .

    R_PAREN         reduce using rule 28 (properties -> property .)
    COMMA           reduce using rule 28 (properties -> property .)


state 103

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (46) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 124
    COMMA           shift and go to state 125


state 104

    (47) parameters -> ID . AS type

    AS              shift and go to state 126


state 105

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END SEMICOLON
    (46) parameters -> parameters . COMMA ID AS type

    R_PAREN         shift and go to state 127
    COMMA           shift and go to state 125


state 106

    (22) declare_statement -> DECLARE ID AS type SEMICOLON .

    CREATE          reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    USE             reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DECLARE         reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SET             reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SELECT          reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    INSERT          reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ALTER           reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    IF              reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    EXEC            reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DROP            reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    UPDATE          reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    WHILE           reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    $end            reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    END             reduce using rule 22 (declare_statement -> DECLARE ID AS type SEMICOLON .)


state 107

    (24) assignments -> assignments COMMA ID ASSIGN . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 128

state 108

    (35) select_statement -> SELECT columns FROM NAME SEMICOLON .

    CREATE          reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    USE             reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DECLARE         reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SET             reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SELECT          reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    INSERT          reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ALTER           reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    IF              reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    EXEC            reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DROP            reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    UPDATE          reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    WHILE           reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    $end            reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    END             reduce using rule 35 (select_statement -> SELECT columns FROM NAME SEMICOLON .)


state 109

    (36) select_statement -> SELECT columns FROM NAME WHERE . a SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 129

state 110

    (37) select_statement -> SELECT TIMES FROM NAME SEMICOLON .

    CREATE          reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    USE             reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    DECLARE         reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    SET             reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    SELECT          reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    INSERT          reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    ALTER           reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    IF              reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    EXEC            reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    DROP            reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    UPDATE          reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    WHILE           reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    $end            reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)
    END             reduce using rule 37 (select_statement -> SELECT TIMES FROM NAME SEMICOLON .)


state 111

    (38) select_statement -> SELECT TIMES FROM NAME WHERE . a SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 130

state 112

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns . R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> columns . COMMA NAME

    R_PAREN         shift and go to state 131
    COMMA           shift and go to state 62


state 113

    (48) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type SEMICOLON

    NAME            shift and go to state 132


state 114

    (49) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME SEMICOLON

    NAME            shift and go to state 133


state 115

    (50) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN SEMICOLON

    COMMA           shift and go to state 134


state 116

    (42) vals -> vals COMMA a .

    SEMICOLON       reduce using rule 42 (vals -> vals COMMA a .)
    COMMA           reduce using rule 42 (vals -> vals COMMA a .)
    R_PAREN         reduce using rule 42 (vals -> vals COMMA a .)


state 117

    (55) column_assignments -> NAME ASSIGN . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 135

state 118

    (53) update_statement -> UPDATE NAME SET column_assignments WHERE . a SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 136

state 119

    (54) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 137


state 120

    (57) while_statement -> WHILE a BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 138


state 121

    (29) property -> NAME type . null_prod PRIMARY KEY
    (30) property -> NAME type . null_prod
    (31) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (32) null_prod -> . NOT NULL
    (33) null_prod -> . NULL
    (34) null_prod -> .

    NOT             shift and go to state 140
    NULL            shift and go to state 141
    PRIMARY         reduce using rule 34 (null_prod -> .)
    REFERENCE       reduce using rule 34 (null_prod -> .)
    R_PAREN         reduce using rule 34 (null_prod -> .)
    COMMA           reduce using rule 34 (null_prod -> .)

    null_prod                      shift and go to state 139

state 122

    (26) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 142


state 123

    (27) properties -> properties COMMA . property
    (29) property -> . NAME type null_prod PRIMARY KEY
    (30) property -> . NAME type null_prod
    (31) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 100

    property                       shift and go to state 143

state 124

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END SEMICOLON

    RETURN          shift and go to state 144


state 125

    (46) parameters -> parameters COMMA . ID AS type

    ID              shift and go to state 145


state 126

    (47) parameters -> ID AS . type
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 146

state 127

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 147


state 128

    (24) assignments -> assignments COMMA ID ASSIGN a .

    SEMICOLON       reduce using rule 24 (assignments -> assignments COMMA ID ASSIGN a .)
    COMMA           reduce using rule 24 (assignments -> assignments COMMA ID ASSIGN a .)


state 129

    (36) select_statement -> SELECT columns FROM NAME WHERE a . SEMICOLON

    SEMICOLON       shift and go to state 148


state 130

    (38) select_statement -> SELECT TIMES FROM NAME WHERE a . SEMICOLON

    SEMICOLON       shift and go to state 149


state 131

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN . VALUES L_PAREN vals R_PAREN SEMICOLON

    VALUES          shift and go to state 150


state 132

    (48) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type SEMICOLON
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 151

state 133

    (49) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME . SEMICOLON

    SEMICOLON       shift and go to state 152


state 134

    (50) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN SEMICOLON
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 153

state 135

    (55) column_assignments -> NAME ASSIGN a .

    WHERE           reduce using rule 55 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 55 (column_assignments -> NAME ASSIGN a .)


state 136

    (53) update_statement -> UPDATE NAME SET column_assignments WHERE a . SEMICOLON

    SEMICOLON       shift and go to state 154


state 137

    (54) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 155


state 138

    (57) while_statement -> WHILE a BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    USE             reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SET             reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    IF              reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    $end            reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    END             reduce using rule 57 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)


state 139

    (29) property -> NAME type null_prod . PRIMARY KEY
    (30) property -> NAME type null_prod .
    (31) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 156
    R_PAREN         reduce using rule 30 (property -> NAME type null_prod .)
    COMMA           reduce using rule 30 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 157


state 140

    (32) null_prod -> NOT . NULL

    NULL            shift and go to state 158


state 141

    (33) null_prod -> NULL .

    PRIMARY         reduce using rule 33 (null_prod -> NULL .)
    REFERENCE       reduce using rule 33 (null_prod -> NULL .)
    R_PAREN         reduce using rule 33 (null_prod -> NULL .)
    COMMA           reduce using rule 33 (null_prod -> NULL .)


state 142

    (26) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .

    CREATE          reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    USE             reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SET             reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SELECT          reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    INSERT          reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ALTER           reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    IF              reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    EXEC            reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DROP            reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    WHILE           reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    $end            reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    END             reduce using rule 26 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)


state 143

    (27) properties -> properties COMMA property .

    R_PAREN         reduce using rule 27 (properties -> properties COMMA property .)
    COMMA           reduce using rule 27 (properties -> properties COMMA property .)


state 144

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END SEMICOLON
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 159

state 145

    (46) parameters -> parameters COMMA ID . AS type

    AS              shift and go to state 160


state 146

    (47) parameters -> ID AS type .

    R_PAREN         reduce using rule 47 (parameters -> ID AS type .)
    COMMA           reduce using rule 47 (parameters -> ID AS type .)


state 147

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 161


state 148

    (36) select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 36 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)


state 149

    (38) select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 38 (select_statement -> SELECT TIMES FROM NAME WHERE a SEMICOLON .)


state 150

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES . L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 162


state 151

    (48) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type . SEMICOLON

    SEMICOLON       shift and go to state 163


state 152

    (49) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .

    CREATE          reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    USE             reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DECLARE         reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SET             reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SELECT          reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    INSERT          reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ALTER           reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    IF              reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    EXEC            reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DROP            reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    UPDATE          reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    WHILE           reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    $end            reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    END             reduce using rule 49 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)


state 153

    (50) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 164


state 154

    (53) update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .

    CREATE          reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    USE             reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DECLARE         reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SET             reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SELECT          reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    INSERT          reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ALTER           reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    IF              reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    EXEC            reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DROP            reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    UPDATE          reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    WHILE           reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    $end            reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    END             reduce using rule 53 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)


state 155

    (54) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    a                              shift and go to state 165

state 156

    (29) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 166


state 157

    (31) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 167


state 158

    (32) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 32 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 32 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 32 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 32 (null_prod -> NOT NULL .)


state 159

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 168


state 160

    (46) parameters -> parameters COMMA ID AS . type
    (58) type -> . INT
    (59) type -> . DECIMAL
    (60) type -> . BIT
    (61) type -> . NCHAR
    (62) type -> . NVARCHAR
    (63) type -> . DATE
    (64) type -> . DATETIME

    INT             shift and go to state 77
    DECIMAL         shift and go to state 78
    BIT             shift and go to state 79
    NCHAR           shift and go to state 80
    NVARCHAR        shift and go to state 81
    DATE            shift and go to state 82
    DATETIME        shift and go to state 83

    type                           shift and go to state 169

state 161

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)

    statements                     shift and go to state 170

state 162

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN . vals R_PAREN SEMICOLON
    (42) vals -> . vals COMMA a
    (43) vals -> . a
    (65) a -> . INTEGER_VALUE
    (66) a -> . STRING

    INTEGER_VALUE   shift and go to state 50
    STRING          shift and go to state 51

    vals                           shift and go to state 171
    a                              shift and go to state 69

state 163

    (48) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .

    CREATE          reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    USE             reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DECLARE         reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SET             reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SELECT          reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    INSERT          reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ALTER           reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    IF              reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    EXEC            reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DROP            reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    UPDATE          reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    WHILE           reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    $end            reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    END             reduce using rule 48 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)


state 164

    (50) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 165

    (54) column_assignments -> column_assignments COMMA NAME ASSIGN a .

    WHERE           reduce using rule 54 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 54 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)


state 166

    (29) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 29 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 29 (property -> NAME type null_prod PRIMARY KEY .)


state 167

    (31) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 173


state 168

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 174


state 169

    (46) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 46 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 46 (parameters -> parameters COMMA ID AS type .)


state 170

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (21) use_statement -> . USE NAME SEMICOLON
    (22) declare_statement -> . DECLARE ID AS type SEMICOLON
    (23) set_statement -> . SET assignments SEMICOLON
    (26) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (35) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (36) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (37) select_statement -> . SELECT TIMES FROM NAME SEMICOLON
    (38) select_statement -> . SELECT TIMES FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (44) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (45) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (48) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (50) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (51) exec_statement -> . EXEC NAME vals SEMICOLON
    (52) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (56) case_statement -> .
    (53) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (57) while_statement -> . WHILE a BEGIN statements END SEMICOLON

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CREATE resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for INSERT resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for EXEC resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             shift and go to state 175
    CREATE          shift and go to state 20
    USE             shift and go to state 21
    DECLARE         shift and go to state 22
    SET             shift and go to state 23
    SELECT          shift and go to state 24
    INSERT          shift and go to state 25
    ALTER           shift and go to state 26
    IF              shift and go to state 28
    EXEC            shift and go to state 29
    DROP            shift and go to state 27
    UPDATE          shift and go to state 30
    WHILE           shift and go to state 31

  ! END             [ reduce using rule 56 (case_statement -> .) ]
  ! CREATE          [ reduce using rule 56 (case_statement -> .) ]
  ! USE             [ reduce using rule 56 (case_statement -> .) ]
  ! DECLARE         [ reduce using rule 56 (case_statement -> .) ]
  ! SET             [ reduce using rule 56 (case_statement -> .) ]
  ! SELECT          [ reduce using rule 56 (case_statement -> .) ]
  ! INSERT          [ reduce using rule 56 (case_statement -> .) ]
  ! ALTER           [ reduce using rule 56 (case_statement -> .) ]
  ! IF              [ reduce using rule 56 (case_statement -> .) ]
  ! EXEC            [ reduce using rule 56 (case_statement -> .) ]
  ! DROP            [ reduce using rule 56 (case_statement -> .) ]
  ! UPDATE          [ reduce using rule 56 (case_statement -> .) ]
  ! WHILE           [ reduce using rule 56 (case_statement -> .) ]

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19

state 171

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals . R_PAREN SEMICOLON
    (42) vals -> vals . COMMA a

    R_PAREN         shift and go to state 176
    COMMA           shift and go to state 95


state 172

    (50) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .

    CREATE          reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    USE             reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SET             reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SELECT          reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    INSERT          reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ALTER           reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    IF              reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    EXEC            reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DROP            reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHILE           reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    $end            reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    END             reduce using rule 50 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)


state 173

    (31) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 177


state 174

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)

    statements                     shift and go to state 178

state 175

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 179


state 176

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 180


state 177

    (31) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 181


state 178

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . case_statement
    (18) statement -> . update_statement
    (19) statement -> . while_statement
    (20) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (21) use_statement -> . USE NAME SEMICOLON
    (22) declare_statement -> . DECLARE ID AS type SEMICOLON
    (23) set_statement -> . SET assignments SEMICOLON
    (26) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (35) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (36) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (37) select_statement -> . SELECT TIMES FROM NAME SEMICOLON
    (38) select_statement -> . SELECT TIMES FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (44) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON
    (45) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (48) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (49) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (50) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (51) exec_statement -> . EXEC NAME vals SEMICOLON
    (52) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (56) case_statement -> .
    (53) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (57) while_statement -> . WHILE a BEGIN statements END SEMICOLON

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CREATE resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for INSERT resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for EXEC resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             shift and go to state 182
    CREATE          shift and go to state 20
    USE             shift and go to state 21
    DECLARE         shift and go to state 22
    SET             shift and go to state 23
    SELECT          shift and go to state 24
    INSERT          shift and go to state 25
    ALTER           shift and go to state 26
    IF              shift and go to state 28
    EXEC            shift and go to state 29
    DROP            shift and go to state 27
    UPDATE          shift and go to state 30
    WHILE           shift and go to state 31

  ! END             [ reduce using rule 56 (case_statement -> .) ]
  ! CREATE          [ reduce using rule 56 (case_statement -> .) ]
  ! USE             [ reduce using rule 56 (case_statement -> .) ]
  ! DECLARE         [ reduce using rule 56 (case_statement -> .) ]
  ! SET             [ reduce using rule 56 (case_statement -> .) ]
  ! SELECT          [ reduce using rule 56 (case_statement -> .) ]
  ! INSERT          [ reduce using rule 56 (case_statement -> .) ]
  ! ALTER           [ reduce using rule 56 (case_statement -> .) ]
  ! IF              [ reduce using rule 56 (case_statement -> .) ]
  ! EXEC            [ reduce using rule 56 (case_statement -> .) ]
  ! DROP            [ reduce using rule 56 (case_statement -> .) ]
  ! UPDATE          [ reduce using rule 56 (case_statement -> .) ]
  ! WHILE           [ reduce using rule 56 (case_statement -> .) ]

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    case_statement                 shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19

state 179

    (45) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 45 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)


state 180

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .

    CREATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    USE             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SET             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SELECT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    INSERT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ALTER           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    EXEC            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DROP            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    $end            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    END             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)


state 181

    (31) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 31 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 31 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 182

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 183


state 183

    (44) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 44 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CREATE in state 2 resolved as shift
WARNING: shift/reduce conflict for USE in state 2 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 2 resolved as shift
WARNING: shift/reduce conflict for SET in state 2 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 2 resolved as shift
WARNING: shift/reduce conflict for INSERT in state 2 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for EXEC in state 2 resolved as shift
WARNING: shift/reduce conflict for DROP in state 2 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for END in state 98 resolved as shift
WARNING: shift/reduce conflict for CREATE in state 98 resolved as shift
WARNING: shift/reduce conflict for USE in state 98 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 98 resolved as shift
WARNING: shift/reduce conflict for SET in state 98 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 98 resolved as shift
WARNING: shift/reduce conflict for INSERT in state 98 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for EXEC in state 98 resolved as shift
WARNING: shift/reduce conflict for DROP in state 98 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for END in state 170 resolved as shift
WARNING: shift/reduce conflict for CREATE in state 170 resolved as shift
WARNING: shift/reduce conflict for USE in state 170 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 170 resolved as shift
WARNING: shift/reduce conflict for SET in state 170 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 170 resolved as shift
WARNING: shift/reduce conflict for INSERT in state 170 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 170 resolved as shift
WARNING: shift/reduce conflict for IF in state 170 resolved as shift
WARNING: shift/reduce conflict for EXEC in state 170 resolved as shift
WARNING: shift/reduce conflict for DROP in state 170 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 170 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 170 resolved as shift
WARNING: shift/reduce conflict for END in state 178 resolved as shift
WARNING: shift/reduce conflict for CREATE in state 178 resolved as shift
WARNING: shift/reduce conflict for USE in state 178 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 178 resolved as shift
WARNING: shift/reduce conflict for SET in state 178 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 178 resolved as shift
WARNING: shift/reduce conflict for INSERT in state 178 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 178 resolved as shift
WARNING: shift/reduce conflict for IF in state 178 resolved as shift
WARNING: shift/reduce conflict for EXEC in state 178 resolved as shift
WARNING: shift/reduce conflict for DROP in state 178 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 178 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (init -> statements)
WARNING: rejected rule (case_statement -> <empty>) in state 2
WARNING: Rule (case_statement -> <empty>) is never reduced
