Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> create_database_statement SEMICOLON
Rule 5     statement -> use_statement SEMICOLON
Rule 6     statement -> declare_statement SEMICOLON
Rule 7     statement -> set_statement SEMICOLON
Rule 8     statement -> create_table_statement SEMICOLON
Rule 9     statement -> select_statement SEMICOLON
Rule 10    statement -> insert_statement SEMICOLON
Rule 11    statement -> create_function_statement SEMICOLON
Rule 12    statement -> create_procedure_statement SEMICOLON
Rule 13    statement -> alter_table_statement SEMICOLON
Rule 14    statement -> if_statement SEMICOLON
Rule 15    statement -> exec_statement SEMICOLON
Rule 16    statement -> drop_table_statement SEMICOLON
Rule 17    statement -> update_statement SEMICOLON
Rule 18    statement -> while_statement SEMICOLON
Rule 19    statement -> truncate_statement SEMICOLON
Rule 20    statement -> return_statement SEMICOLON
Rule 21    statement -> delete_statement SEMICOLON
Rule 22    create_database_statement -> CREATE DATA BASE NAME
Rule 23    use_statement -> USE NAME
Rule 24    declare_statement -> DECLARE ID AS type
Rule 25    declare_statement -> DECLARE ID type
Rule 26    set_statement -> SET assignments
Rule 27    assignments -> assignments COMMA ID ASSIGN a
Rule 28    assignments -> ID ASSIGN a
Rule 29    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN
Rule 30    properties -> properties COMMA property
Rule 31    properties -> property
Rule 32    property -> NAME type null_prod PRIMARY KEY
Rule 33    property -> NAME type null_prod
Rule 34    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 35    null_prod -> NOT NULL
Rule 36    null_prod -> NULL
Rule 37    null_prod -> <empty>
Rule 38    select_statement -> SELECT columns FROM NAME
Rule 39    select_statement -> SELECT columns FROM NAME WHERE a
Rule 40    insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
Rule 41    columns -> columns COMMA column
Rule 42    columns -> columns COMMA column POINT column
Rule 43    columns -> column POINT column
Rule 44    columns -> column
Rule 45    column -> TIMES
Rule 46    column -> NAME
Rule 47    column -> case_statement
Rule 48    column -> call_function_prod
Rule 49    column -> if_statement NAME
Rule 50    column -> a NAME
Rule 51    vals -> vals COMMA a
Rule 52    vals -> a
Rule 53    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
Rule 54    create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
Rule 55    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
Rule 56    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
Rule 57    parameters -> parameters COMMA ID AS type
Rule 58    parameters -> parameters COMMA ID type
Rule 59    parameters -> ID type
Rule 60    parameters -> ID AS type
Rule 61    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type
Rule 62    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME
Rule 63    if_statement -> IF a THEN statements END IF
Rule 64    if_statement -> IF a THEN statements ELSE statements END IF
Rule 65    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN
Rule 66    exec_statement -> EXEC NAME vals
Rule 67    exec_statement -> EXEC NAME args
Rule 68    exec_statement -> EXEC NAME
Rule 69    args -> args COMMA ID ASSIGN a
Rule 70    args -> ID ASSIGN a
Rule 71    drop_table_statement -> DROP TABLE NAME
Rule 72    update_statement -> UPDATE NAME SET column_assignments WHERE a
Rule 73    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 74    column_assignments -> NAME ASSIGN a
Rule 75    while_statement -> WHILE a BEGIN statements END
Rule 76    truncate_statement -> TRUNCATE TABLE NAME
Rule 77    delete_statement -> DELETE FROM NAME WHERE a
Rule 78    case_statement -> CASE when_statements END NAME
Rule 79    when_statements -> WHEN a THEN a when_statements
Rule 80    when_statements -> ELSE THEN a
Rule 81    type -> INT
Rule 82    type -> DECIMAL
Rule 83    type -> DATE
Rule 84    type -> DATETIME
Rule 85    type -> NCHAR L_PAREN a R_PAREN
Rule 86    type -> NVARCHAR L_PAREN a R_PAREN
Rule 87    a -> a OR b
Rule 88    a -> b
Rule 89    b -> b AND c
Rule 90    b -> c
Rule 91    c -> NOT_SIGN d
Rule 92    c -> d
Rule 93    d -> d EQUALS e
Rule 94    d -> d NOT_EQ e
Rule 95    d -> d LESS_THAN e
Rule 96    d -> d GREATER_THAN e
Rule 97    d -> d LESS_EQ e
Rule 98    d -> d GREATER_EQ e
Rule 99    d -> e
Rule 100   e -> e PLUS f
Rule 101   e -> e MINUS f
Rule 102   e -> f
Rule 103   f -> f TIMES g
Rule 104   f -> f DIVIDE g
Rule 105   f -> g
Rule 106   g -> MINUS h
Rule 107   g -> h
Rule 108   h -> INTEGER_VALUE
Rule 109   h -> DECIMAL_VALUE
Rule 110   h -> STRING
Rule 111   h -> ID
Rule 112   h -> NAME
Rule 113   h -> L_PAREN a R_PAREN
Rule 114   h -> exec_statement
Rule 115   call_function_prod -> HOY L_PAREN R_PAREN
Rule 116   call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN
Rule 117   call_function_prod -> SUBSTRAER L_PAREN a R_PAREN
Rule 118   call_function_prod -> CONTAR L_PAREN a R_PAREN
Rule 119   call_function_prod -> SUMA L_PAREN a R_PAREN
Rule 120   call_function_prod -> CAS L_PAREN a AS type R_PAREN
Rule 121   return_statement -> RETURN a

Terminals, with rules where they appear

ADD                  : 61
ALTER                : 61 62
AND                  : 89
AS                   : 24 53 54 55 56 57 60 120
ASSIGN               : 27 28 69 70 73 74
BASE                 : 22
BEGIN                : 53 54 55 56 75
CAS                  : 120
CASE                 : 78
COLUMN               : 61 62
COMMA                : 27 30 41 42 51 57 58 65 65 69 73 116
CONCATENAR           : 116
CONTAR               : 118
CREATE               : 22 29 53 54 55 56
DATA                 : 22
DATE                 : 83
DATETIME             : 84
DECIMAL              : 82
DECIMAL_VALUE        : 109
DECLARE              : 24 25
DELETE               : 77
DIVIDE               : 104
DROP                 : 62 71
ELSE                 : 64 80
END                  : 53 54 55 56 63 64 75 78
EQUALS               : 93
EXEC                 : 66 67 68
FROM                 : 38 39 77
FUNCTION             : 53 54
GREATER_EQ           : 98
GREATER_THAN         : 96
HOY                  : 115
ID                   : 24 25 27 28 57 58 59 60 69 70 111
IF                   : 63 63 64 64 65
INSERT               : 40
INT                  : 81
INTEGER_VALUE        : 108
INTO                 : 40
KEY                  : 32
LESS_EQ              : 97
LESS_THAN            : 95
L_PAREN              : 29 34 40 40 53 54 55 56 65 85 86 113 115 116 117 118 119 120
MINUS                : 101 106
NAME                 : 22 23 29 32 33 34 34 34 38 39 40 46 49 50 53 54 55 56 61 61 62 62 66 67 68 71 72 73 74 76 77 78 112
NCHAR                : 85
NOT                  : 35
NOT_EQ               : 94
NOT_SIGN             : 91
NULL                 : 35 36
NVARCHAR             : 86
OR                   : 87
PLUS                 : 100
POINT                : 42 43
PRIMARY              : 32
PROCEDURE            : 55 56
REFERENCE            : 34
RETURN               : 53 54 121
R_PAREN              : 29 34 40 40 53 54 55 56 65 85 86 113 115 116 117 118 119 120
SELECT               : 38 39
SEMICOLON            : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
SET                  : 26 72
STRING               : 110
SUBSTRAER            : 117
SUMA                 : 119
TABLE                : 29 61 62 71 76
THEN                 : 63 64 79 80
TIMES                : 45 103
TRUNCATE             : 76
UPDATE               : 72
USE                  : 23
VALUES               : 40
WHEN                 : 79
WHERE                : 39 72 77
WHILE                : 75
error                : 

Nonterminals, with rules where they appear

a                    : 27 28 39 50 51 52 63 64 65 65 65 69 70 72 73 74 75 77 79 79 80 85 86 87 113 116 116 117 118 119 120 121
alter_table_statement : 13
args                 : 67 69
assignments          : 26 27
b                    : 87 88 89
c                    : 89 90
call_function_prod   : 48
case_statement       : 47
column               : 41 42 42 43 43 44
column_assignments   : 72 73
columns              : 38 39 40 41 42
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 91 92 93 94 95 96 97 98
declare_statement    : 6
delete_statement     : 21
drop_table_statement : 16
e                    : 93 94 95 96 97 98 99 100 101
exec_statement       : 15 114
f                    : 100 101 102 103 104
g                    : 103 104 105
h                    : 106 107
if_statement         : 14 49
init                 : 0
insert_statement     : 10
null_prod            : 32 33 34
parameters           : 53 55 57 58
properties           : 29 30
property             : 30 31
return_statement     : 20
select_statement     : 9
set_statement        : 7
statement            : 2
statements           : 1 2 53 54 55 56 63 64 64 75
truncate_statement   : 19
type                 : 24 25 32 33 34 53 54 57 58 59 60 61 120
update_statement     : 17
use_statement        : 5
vals                 : 40 51 66
when_statements      : 78 79
while_statement      : 18

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    init                           shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 3

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> create_database_statement . SEMICOLON

    SEMICOLON       shift and go to state 37


state 5

    (5) statement -> use_statement . SEMICOLON

    SEMICOLON       shift and go to state 38


state 6

    (6) statement -> declare_statement . SEMICOLON

    SEMICOLON       shift and go to state 39


state 7

    (7) statement -> set_statement . SEMICOLON

    SEMICOLON       shift and go to state 40


state 8

    (8) statement -> create_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 41


state 9

    (9) statement -> select_statement . SEMICOLON

    SEMICOLON       shift and go to state 42


state 10

    (10) statement -> insert_statement . SEMICOLON

    SEMICOLON       shift and go to state 43


state 11

    (11) statement -> create_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 44


state 12

    (12) statement -> create_procedure_statement . SEMICOLON

    SEMICOLON       shift and go to state 45


state 13

    (13) statement -> alter_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 14

    (14) statement -> if_statement . SEMICOLON

    SEMICOLON       shift and go to state 47


state 15

    (15) statement -> exec_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 16

    (16) statement -> drop_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 49


state 17

    (17) statement -> update_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 18

    (18) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 19

    (19) statement -> truncate_statement . SEMICOLON

    SEMICOLON       shift and go to state 52


state 20

    (20) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 53


state 21

    (21) statement -> delete_statement . SEMICOLON

    SEMICOLON       shift and go to state 54


state 22

    (22) create_database_statement -> CREATE . DATA BASE NAME
    (29) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN
    (53) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> CREATE . FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END

    DATA            shift and go to state 55
    TABLE           shift and go to state 56
    FUNCTION        shift and go to state 57
    PROCEDURE       shift and go to state 58


state 23

    (23) use_statement -> USE . NAME

    NAME            shift and go to state 59


state 24

    (24) declare_statement -> DECLARE . ID AS type
    (25) declare_statement -> DECLARE . ID type

    ID              shift and go to state 60


state 25

    (26) set_statement -> SET . assignments
    (27) assignments -> . assignments COMMA ID ASSIGN a
    (28) assignments -> . ID ASSIGN a

    ID              shift and go to state 62

    assignments                    shift and go to state 61

state 26

    (38) select_statement -> SELECT . columns FROM NAME
    (39) select_statement -> SELECT . columns FROM NAME WHERE a
    (41) columns -> . columns COMMA column
    (42) columns -> . columns COMMA column POINT column
    (43) columns -> . column POINT column
    (44) columns -> . column
    (45) column -> . TIMES
    (46) column -> . NAME
    (47) column -> . case_statement
    (48) column -> . call_function_prod
    (49) column -> . if_statement NAME
    (50) column -> . a NAME
    (78) case_statement -> . CASE when_statements END NAME
    (115) call_function_prod -> . HOY L_PAREN R_PAREN
    (116) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (117) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (118) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (119) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (120) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    TIMES           shift and go to state 67
    NAME            shift and go to state 64
    CASE            shift and go to state 71
    HOY             shift and go to state 72
    CONCATENAR      shift and go to state 74
    SUBSTRAER       shift and go to state 75
    CONTAR          shift and go to state 76
    SUMA            shift and go to state 77
    CAS             shift and go to state 78
    IF              shift and go to state 31
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    columns                        shift and go to state 63
    a                              shift and go to state 65
    column                         shift and go to state 66
    case_statement                 shift and go to state 68
    call_function_prod             shift and go to state 69
    if_statement                   shift and go to state 70
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 27

    (40) insert_statement -> INSERT . INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN

    INTO            shift and go to state 93


state 28

    (121) return_statement -> RETURN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 94
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 29

    (61) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME

    TABLE           shift and go to state 96


state 30

    (71) drop_table_statement -> DROP . TABLE NAME

    TABLE           shift and go to state 97


state 31

    (63) if_statement -> IF . a THEN statements END IF
    (64) if_statement -> IF . a THEN statements ELSE statements END IF
    (65) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    L_PAREN         shift and go to state 99
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    EXEC            shift and go to state 32

    a                              shift and go to state 98
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 32

    (66) exec_statement -> EXEC . NAME vals
    (67) exec_statement -> EXEC . NAME args
    (68) exec_statement -> EXEC . NAME

    NAME            shift and go to state 100


state 33

    (72) update_statement -> UPDATE . NAME SET column_assignments WHERE a

    NAME            shift and go to state 101


state 34

    (75) while_statement -> WHILE . a BEGIN statements END
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 102
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 35

    (76) truncate_statement -> TRUNCATE . TABLE NAME

    TABLE           shift and go to state 103


state 36

    (77) delete_statement -> DELETE . FROM NAME WHERE a

    FROM            shift and go to state 104


state 37

    (4) statement -> create_database_statement SEMICOLON .

    CREATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    USE             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SET             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SELECT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    INSERT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ALTER           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    IF              reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    EXEC            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DROP            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DELETE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    END             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ELSE            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)


state 38

    (5) statement -> use_statement SEMICOLON .

    CREATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    USE             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DECLARE         reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SET             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SELECT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    INSERT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ALTER           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    IF              reduce using rule 5 (statement -> use_statement SEMICOLON .)
    EXEC            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DROP            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    UPDATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DELETE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    $end            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    END             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> use_statement SEMICOLON .)


state 39

    (6) statement -> declare_statement SEMICOLON .

    CREATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    USE             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DECLARE         reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SET             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SELECT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    INSERT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ALTER           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    IF              reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    EXEC            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DROP            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    UPDATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DELETE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    $end            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    END             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declare_statement SEMICOLON .)


state 40

    (7) statement -> set_statement SEMICOLON .

    CREATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    USE             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DECLARE         reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SET             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SELECT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    INSERT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    IF              reduce using rule 7 (statement -> set_statement SEMICOLON .)
    EXEC            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DROP            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    UPDATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DELETE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    $end            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    END             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> set_statement SEMICOLON .)


state 41

    (8) statement -> create_table_statement SEMICOLON .

    CREATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    USE             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SET             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SELECT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    INSERT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    IF              reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    EXEC            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DROP            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DELETE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    $end            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    END             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)


state 42

    (9) statement -> select_statement SEMICOLON .

    CREATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    USE             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DECLARE         reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SET             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SELECT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    INSERT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    IF              reduce using rule 9 (statement -> select_statement SEMICOLON .)
    EXEC            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DROP            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    UPDATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DELETE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    $end            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    END             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> select_statement SEMICOLON .)


state 43

    (10) statement -> insert_statement SEMICOLON .

    CREATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    USE             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DECLARE         reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SET             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SELECT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    INSERT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    IF              reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    EXEC            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DROP            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    UPDATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DELETE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    $end            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    END             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> insert_statement SEMICOLON .)


state 44

    (11) statement -> create_function_statement SEMICOLON .

    CREATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    USE             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SET             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SELECT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    INSERT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    IF              reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    EXEC            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DROP            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DELETE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    $end            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    END             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)


state 45

    (12) statement -> create_procedure_statement SEMICOLON .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    USE             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SET             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    IF              reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    $end            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    END             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)


state 46

    (13) statement -> alter_table_statement SEMICOLON .

    CREATE          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    USE             reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    DECLARE         reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    SET             reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    SELECT          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    INSERT          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    IF              reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    EXEC            reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    DROP            reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    UPDATE          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    DELETE          reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    $end            reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    END             reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> alter_table_statement SEMICOLON .)


state 47

    (14) statement -> if_statement SEMICOLON .

    CREATE          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    USE             reduce using rule 14 (statement -> if_statement SEMICOLON .)
    DECLARE         reduce using rule 14 (statement -> if_statement SEMICOLON .)
    SET             reduce using rule 14 (statement -> if_statement SEMICOLON .)
    SELECT          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    INSERT          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> if_statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> if_statement SEMICOLON .)
    EXEC            reduce using rule 14 (statement -> if_statement SEMICOLON .)
    DROP            reduce using rule 14 (statement -> if_statement SEMICOLON .)
    UPDATE          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> if_statement SEMICOLON .)
    TRUNCATE        reduce using rule 14 (statement -> if_statement SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    DELETE          reduce using rule 14 (statement -> if_statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> if_statement SEMICOLON .)
    END             reduce using rule 14 (statement -> if_statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> if_statement SEMICOLON .)


state 48

    (15) statement -> exec_statement SEMICOLON .

    CREATE          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    USE             reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    DECLARE         reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    SET             reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    SELECT          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    INSERT          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    EXEC            reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    DROP            reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    UPDATE          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    TRUNCATE        reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    DELETE          reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    END             reduce using rule 15 (statement -> exec_statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> exec_statement SEMICOLON .)


state 49

    (16) statement -> drop_table_statement SEMICOLON .

    CREATE          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    USE             reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    DECLARE         reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    SET             reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    SELECT          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    INSERT          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    IF              reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    EXEC            reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    DROP            reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    UPDATE          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    DELETE          reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    $end            reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    END             reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> drop_table_statement SEMICOLON .)


state 50

    (17) statement -> update_statement SEMICOLON .

    CREATE          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    USE             reduce using rule 17 (statement -> update_statement SEMICOLON .)
    DECLARE         reduce using rule 17 (statement -> update_statement SEMICOLON .)
    SET             reduce using rule 17 (statement -> update_statement SEMICOLON .)
    SELECT          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    INSERT          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> update_statement SEMICOLON .)
    IF              reduce using rule 17 (statement -> update_statement SEMICOLON .)
    EXEC            reduce using rule 17 (statement -> update_statement SEMICOLON .)
    DROP            reduce using rule 17 (statement -> update_statement SEMICOLON .)
    UPDATE          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> update_statement SEMICOLON .)
    TRUNCATE        reduce using rule 17 (statement -> update_statement SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    DELETE          reduce using rule 17 (statement -> update_statement SEMICOLON .)
    $end            reduce using rule 17 (statement -> update_statement SEMICOLON .)
    END             reduce using rule 17 (statement -> update_statement SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> update_statement SEMICOLON .)


state 51

    (18) statement -> while_statement SEMICOLON .

    CREATE          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    USE             reduce using rule 18 (statement -> while_statement SEMICOLON .)
    DECLARE         reduce using rule 18 (statement -> while_statement SEMICOLON .)
    SET             reduce using rule 18 (statement -> while_statement SEMICOLON .)
    SELECT          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    INSERT          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> while_statement SEMICOLON .)
    IF              reduce using rule 18 (statement -> while_statement SEMICOLON .)
    EXEC            reduce using rule 18 (statement -> while_statement SEMICOLON .)
    DROP            reduce using rule 18 (statement -> while_statement SEMICOLON .)
    UPDATE          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> while_statement SEMICOLON .)
    TRUNCATE        reduce using rule 18 (statement -> while_statement SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    DELETE          reduce using rule 18 (statement -> while_statement SEMICOLON .)
    $end            reduce using rule 18 (statement -> while_statement SEMICOLON .)
    END             reduce using rule 18 (statement -> while_statement SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> while_statement SEMICOLON .)


state 52

    (19) statement -> truncate_statement SEMICOLON .

    CREATE          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    USE             reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    DECLARE         reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    SET             reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    SELECT          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    INSERT          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    IF              reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    EXEC            reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    DROP            reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    UPDATE          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    TRUNCATE        reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    DELETE          reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    $end            reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    END             reduce using rule 19 (statement -> truncate_statement SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> truncate_statement SEMICOLON .)


state 53

    (20) statement -> return_statement SEMICOLON .

    CREATE          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    USE             reduce using rule 20 (statement -> return_statement SEMICOLON .)
    DECLARE         reduce using rule 20 (statement -> return_statement SEMICOLON .)
    SET             reduce using rule 20 (statement -> return_statement SEMICOLON .)
    SELECT          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    INSERT          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 20 (statement -> return_statement SEMICOLON .)
    EXEC            reduce using rule 20 (statement -> return_statement SEMICOLON .)
    DROP            reduce using rule 20 (statement -> return_statement SEMICOLON .)
    UPDATE          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> return_statement SEMICOLON .)
    TRUNCATE        reduce using rule 20 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    DELETE          reduce using rule 20 (statement -> return_statement SEMICOLON .)
    $end            reduce using rule 20 (statement -> return_statement SEMICOLON .)
    END             reduce using rule 20 (statement -> return_statement SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> return_statement SEMICOLON .)


state 54

    (21) statement -> delete_statement SEMICOLON .

    CREATE          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    USE             reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    DECLARE         reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    SET             reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    SELECT          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    INSERT          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    EXEC            reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    DROP            reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    UPDATE          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    TRUNCATE        reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    DELETE          reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    $end            reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    END             reduce using rule 21 (statement -> delete_statement SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> delete_statement SEMICOLON .)


state 55

    (22) create_database_statement -> CREATE DATA . BASE NAME

    BASE            shift and go to state 105


state 56

    (29) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN

    NAME            shift and go to state 106


state 57

    (53) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> CREATE FUNCTION . NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END

    NAME            shift and go to state 107


state 58

    (55) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN R_PAREN AS BEGIN statements END

    NAME            shift and go to state 108


state 59

    (23) use_statement -> USE NAME .

    SEMICOLON       reduce using rule 23 (use_statement -> USE NAME .)


state 60

    (24) declare_statement -> DECLARE ID . AS type
    (25) declare_statement -> DECLARE ID . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 109
    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 110

state 61

    (26) set_statement -> SET assignments .
    (27) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       reduce using rule 26 (set_statement -> SET assignments .)
    COMMA           shift and go to state 117


state 62

    (28) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 118


state 63

    (38) select_statement -> SELECT columns . FROM NAME
    (39) select_statement -> SELECT columns . FROM NAME WHERE a
    (41) columns -> columns . COMMA column
    (42) columns -> columns . COMMA column POINT column

    FROM            shift and go to state 119
    COMMA           shift and go to state 120


state 64

    (46) column -> NAME .
    (112) h -> NAME .

    POINT           reduce using rule 46 (column -> NAME .)
    FROM            reduce using rule 46 (column -> NAME .)
    COMMA           reduce using rule 46 (column -> NAME .)
    R_PAREN         reduce using rule 46 (column -> NAME .)
    TIMES           reduce using rule 112 (h -> NAME .)
    DIVIDE          reduce using rule 112 (h -> NAME .)
    PLUS            reduce using rule 112 (h -> NAME .)
    MINUS           reduce using rule 112 (h -> NAME .)
    EQUALS          reduce using rule 112 (h -> NAME .)
    NOT_EQ          reduce using rule 112 (h -> NAME .)
    LESS_THAN       reduce using rule 112 (h -> NAME .)
    GREATER_THAN    reduce using rule 112 (h -> NAME .)
    LESS_EQ         reduce using rule 112 (h -> NAME .)
    GREATER_EQ      reduce using rule 112 (h -> NAME .)
    AND             reduce using rule 112 (h -> NAME .)
    NAME            reduce using rule 112 (h -> NAME .)
    OR              reduce using rule 112 (h -> NAME .)


state 65

    (50) column -> a . NAME
    (87) a -> a . OR b

    NAME            shift and go to state 121
    OR              shift and go to state 122


state 66

    (43) columns -> column . POINT column
    (44) columns -> column .

    POINT           shift and go to state 123
    FROM            reduce using rule 44 (columns -> column .)
    COMMA           reduce using rule 44 (columns -> column .)
    R_PAREN         reduce using rule 44 (columns -> column .)


state 67

    (45) column -> TIMES .

    POINT           reduce using rule 45 (column -> TIMES .)
    FROM            reduce using rule 45 (column -> TIMES .)
    COMMA           reduce using rule 45 (column -> TIMES .)
    R_PAREN         reduce using rule 45 (column -> TIMES .)


state 68

    (47) column -> case_statement .

    POINT           reduce using rule 47 (column -> case_statement .)
    FROM            reduce using rule 47 (column -> case_statement .)
    COMMA           reduce using rule 47 (column -> case_statement .)
    R_PAREN         reduce using rule 47 (column -> case_statement .)


state 69

    (48) column -> call_function_prod .

    POINT           reduce using rule 48 (column -> call_function_prod .)
    FROM            reduce using rule 48 (column -> call_function_prod .)
    COMMA           reduce using rule 48 (column -> call_function_prod .)
    R_PAREN         reduce using rule 48 (column -> call_function_prod .)


state 70

    (49) column -> if_statement . NAME

    NAME            shift and go to state 124


state 71

    (78) case_statement -> CASE . when_statements END NAME
    (79) when_statements -> . WHEN a THEN a when_statements
    (80) when_statements -> . ELSE THEN a

    WHEN            shift and go to state 126
    ELSE            shift and go to state 127

    when_statements                shift and go to state 125

state 72

    (115) call_function_prod -> HOY . L_PAREN R_PAREN

    L_PAREN         shift and go to state 128


state 73

    (113) h -> L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 129
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 74

    (116) call_function_prod -> CONCATENAR . L_PAREN a COMMA a R_PAREN

    L_PAREN         shift and go to state 130


state 75

    (117) call_function_prod -> SUBSTRAER . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 131


state 76

    (118) call_function_prod -> CONTAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 132


state 77

    (119) call_function_prod -> SUMA . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 133


state 78

    (120) call_function_prod -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 134


state 79

    (88) a -> b .
    (89) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 88 (a -> b .)
    OR              reduce using rule 88 (a -> b .)
    SEMICOLON       reduce using rule 88 (a -> b .)
    THEN            reduce using rule 88 (a -> b .)
    BEGIN           reduce using rule 88 (a -> b .)
    R_PAREN         reduce using rule 88 (a -> b .)
    COMMA           reduce using rule 88 (a -> b .)
    EQUALS          reduce using rule 88 (a -> b .)
    NOT_EQ          reduce using rule 88 (a -> b .)
    LESS_THAN       reduce using rule 88 (a -> b .)
    GREATER_THAN    reduce using rule 88 (a -> b .)
    LESS_EQ         reduce using rule 88 (a -> b .)
    GREATER_EQ      reduce using rule 88 (a -> b .)
    TIMES           reduce using rule 88 (a -> b .)
    DIVIDE          reduce using rule 88 (a -> b .)
    PLUS            reduce using rule 88 (a -> b .)
    MINUS           reduce using rule 88 (a -> b .)
    AS              reduce using rule 88 (a -> b .)
    END             reduce using rule 88 (a -> b .)
    WHEN            reduce using rule 88 (a -> b .)
    ELSE            reduce using rule 88 (a -> b .)
    WHERE           reduce using rule 88 (a -> b .)
    AND             shift and go to state 135

  ! AND             [ reduce using rule 88 (a -> b .) ]


state 80

    (90) b -> c .

    AND             reduce using rule 90 (b -> c .)
    NAME            reduce using rule 90 (b -> c .)
    OR              reduce using rule 90 (b -> c .)
    SEMICOLON       reduce using rule 90 (b -> c .)
    THEN            reduce using rule 90 (b -> c .)
    BEGIN           reduce using rule 90 (b -> c .)
    R_PAREN         reduce using rule 90 (b -> c .)
    COMMA           reduce using rule 90 (b -> c .)
    EQUALS          reduce using rule 90 (b -> c .)
    NOT_EQ          reduce using rule 90 (b -> c .)
    LESS_THAN       reduce using rule 90 (b -> c .)
    GREATER_THAN    reduce using rule 90 (b -> c .)
    LESS_EQ         reduce using rule 90 (b -> c .)
    GREATER_EQ      reduce using rule 90 (b -> c .)
    TIMES           reduce using rule 90 (b -> c .)
    DIVIDE          reduce using rule 90 (b -> c .)
    PLUS            reduce using rule 90 (b -> c .)
    MINUS           reduce using rule 90 (b -> c .)
    AS              reduce using rule 90 (b -> c .)
    END             reduce using rule 90 (b -> c .)
    WHEN            reduce using rule 90 (b -> c .)
    ELSE            reduce using rule 90 (b -> c .)
    WHERE           reduce using rule 90 (b -> c .)


state 81

    (91) c -> NOT_SIGN . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    d                              shift and go to state 136
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 82

    (92) c -> d .
    (93) d -> d . EQUALS e
    (94) d -> d . NOT_EQ e
    (95) d -> d . LESS_THAN e
    (96) d -> d . GREATER_THAN e
    (97) d -> d . LESS_EQ e
    (98) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 92 (c -> d .)
    NAME            reduce using rule 92 (c -> d .)
    OR              reduce using rule 92 (c -> d .)
    SEMICOLON       reduce using rule 92 (c -> d .)
    THEN            reduce using rule 92 (c -> d .)
    BEGIN           reduce using rule 92 (c -> d .)
    R_PAREN         reduce using rule 92 (c -> d .)
    COMMA           reduce using rule 92 (c -> d .)
    TIMES           reduce using rule 92 (c -> d .)
    DIVIDE          reduce using rule 92 (c -> d .)
    PLUS            reduce using rule 92 (c -> d .)
    MINUS           reduce using rule 92 (c -> d .)
    AS              reduce using rule 92 (c -> d .)
    END             reduce using rule 92 (c -> d .)
    WHEN            reduce using rule 92 (c -> d .)
    ELSE            reduce using rule 92 (c -> d .)
    WHERE           reduce using rule 92 (c -> d .)
    EQUALS          shift and go to state 137
    NOT_EQ          shift and go to state 138
    LESS_THAN       shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_EQ         shift and go to state 141
    GREATER_EQ      shift and go to state 142

  ! EQUALS          [ reduce using rule 92 (c -> d .) ]
  ! NOT_EQ          [ reduce using rule 92 (c -> d .) ]
  ! LESS_THAN       [ reduce using rule 92 (c -> d .) ]
  ! GREATER_THAN    [ reduce using rule 92 (c -> d .) ]
  ! LESS_EQ         [ reduce using rule 92 (c -> d .) ]
  ! GREATER_EQ      [ reduce using rule 92 (c -> d .) ]


state 83

    (99) d -> e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 99 (d -> e .)
    NOT_EQ          reduce using rule 99 (d -> e .)
    LESS_THAN       reduce using rule 99 (d -> e .)
    GREATER_THAN    reduce using rule 99 (d -> e .)
    LESS_EQ         reduce using rule 99 (d -> e .)
    GREATER_EQ      reduce using rule 99 (d -> e .)
    AND             reduce using rule 99 (d -> e .)
    NAME            reduce using rule 99 (d -> e .)
    OR              reduce using rule 99 (d -> e .)
    SEMICOLON       reduce using rule 99 (d -> e .)
    THEN            reduce using rule 99 (d -> e .)
    BEGIN           reduce using rule 99 (d -> e .)
    R_PAREN         reduce using rule 99 (d -> e .)
    COMMA           reduce using rule 99 (d -> e .)
    TIMES           reduce using rule 99 (d -> e .)
    DIVIDE          reduce using rule 99 (d -> e .)
    AS              reduce using rule 99 (d -> e .)
    END             reduce using rule 99 (d -> e .)
    WHEN            reduce using rule 99 (d -> e .)
    ELSE            reduce using rule 99 (d -> e .)
    WHERE           reduce using rule 99 (d -> e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 99 (d -> e .) ]
  ! MINUS           [ reduce using rule 99 (d -> e .) ]


state 84

    (102) e -> f .
    (103) f -> f . TIMES g
    (104) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 102 (e -> f .)
    MINUS           reduce using rule 102 (e -> f .)
    EQUALS          reduce using rule 102 (e -> f .)
    NOT_EQ          reduce using rule 102 (e -> f .)
    LESS_THAN       reduce using rule 102 (e -> f .)
    GREATER_THAN    reduce using rule 102 (e -> f .)
    LESS_EQ         reduce using rule 102 (e -> f .)
    GREATER_EQ      reduce using rule 102 (e -> f .)
    AND             reduce using rule 102 (e -> f .)
    NAME            reduce using rule 102 (e -> f .)
    OR              reduce using rule 102 (e -> f .)
    SEMICOLON       reduce using rule 102 (e -> f .)
    THEN            reduce using rule 102 (e -> f .)
    BEGIN           reduce using rule 102 (e -> f .)
    R_PAREN         reduce using rule 102 (e -> f .)
    COMMA           reduce using rule 102 (e -> f .)
    AS              reduce using rule 102 (e -> f .)
    END             reduce using rule 102 (e -> f .)
    WHEN            reduce using rule 102 (e -> f .)
    ELSE            reduce using rule 102 (e -> f .)
    WHERE           reduce using rule 102 (e -> f .)
    TIMES           shift and go to state 145
    DIVIDE          shift and go to state 146

  ! TIMES           [ reduce using rule 102 (e -> f .) ]
  ! DIVIDE          [ reduce using rule 102 (e -> f .) ]


state 85

    (106) g -> MINUS . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    h                              shift and go to state 147
    exec_statement                 shift and go to state 92

state 86

    (105) f -> g .

    TIMES           reduce using rule 105 (f -> g .)
    DIVIDE          reduce using rule 105 (f -> g .)
    PLUS            reduce using rule 105 (f -> g .)
    MINUS           reduce using rule 105 (f -> g .)
    EQUALS          reduce using rule 105 (f -> g .)
    NOT_EQ          reduce using rule 105 (f -> g .)
    LESS_THAN       reduce using rule 105 (f -> g .)
    GREATER_THAN    reduce using rule 105 (f -> g .)
    LESS_EQ         reduce using rule 105 (f -> g .)
    GREATER_EQ      reduce using rule 105 (f -> g .)
    AND             reduce using rule 105 (f -> g .)
    NAME            reduce using rule 105 (f -> g .)
    OR              reduce using rule 105 (f -> g .)
    SEMICOLON       reduce using rule 105 (f -> g .)
    THEN            reduce using rule 105 (f -> g .)
    BEGIN           reduce using rule 105 (f -> g .)
    R_PAREN         reduce using rule 105 (f -> g .)
    COMMA           reduce using rule 105 (f -> g .)
    AS              reduce using rule 105 (f -> g .)
    END             reduce using rule 105 (f -> g .)
    WHEN            reduce using rule 105 (f -> g .)
    ELSE            reduce using rule 105 (f -> g .)
    WHERE           reduce using rule 105 (f -> g .)


state 87

    (107) g -> h .

    TIMES           reduce using rule 107 (g -> h .)
    DIVIDE          reduce using rule 107 (g -> h .)
    PLUS            reduce using rule 107 (g -> h .)
    MINUS           reduce using rule 107 (g -> h .)
    EQUALS          reduce using rule 107 (g -> h .)
    NOT_EQ          reduce using rule 107 (g -> h .)
    LESS_THAN       reduce using rule 107 (g -> h .)
    GREATER_THAN    reduce using rule 107 (g -> h .)
    LESS_EQ         reduce using rule 107 (g -> h .)
    GREATER_EQ      reduce using rule 107 (g -> h .)
    AND             reduce using rule 107 (g -> h .)
    NAME            reduce using rule 107 (g -> h .)
    OR              reduce using rule 107 (g -> h .)
    SEMICOLON       reduce using rule 107 (g -> h .)
    THEN            reduce using rule 107 (g -> h .)
    BEGIN           reduce using rule 107 (g -> h .)
    R_PAREN         reduce using rule 107 (g -> h .)
    COMMA           reduce using rule 107 (g -> h .)
    AS              reduce using rule 107 (g -> h .)
    END             reduce using rule 107 (g -> h .)
    WHEN            reduce using rule 107 (g -> h .)
    ELSE            reduce using rule 107 (g -> h .)
    WHERE           reduce using rule 107 (g -> h .)


state 88

    (108) h -> INTEGER_VALUE .

    TIMES           reduce using rule 108 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 108 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 108 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 108 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 108 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 108 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 108 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 108 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 108 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 108 (h -> INTEGER_VALUE .)
    AND             reduce using rule 108 (h -> INTEGER_VALUE .)
    NAME            reduce using rule 108 (h -> INTEGER_VALUE .)
    OR              reduce using rule 108 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 108 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 108 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 108 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 108 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 108 (h -> INTEGER_VALUE .)
    AS              reduce using rule 108 (h -> INTEGER_VALUE .)
    END             reduce using rule 108 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 108 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 108 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 108 (h -> INTEGER_VALUE .)


state 89

    (109) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 109 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 109 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 109 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 109 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 109 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 109 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 109 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 109 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 109 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 109 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 109 (h -> DECIMAL_VALUE .)
    NAME            reduce using rule 109 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 109 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 109 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 109 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 109 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 109 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 109 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 109 (h -> DECIMAL_VALUE .)
    END             reduce using rule 109 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 109 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 109 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 109 (h -> DECIMAL_VALUE .)


state 90

    (110) h -> STRING .

    TIMES           reduce using rule 110 (h -> STRING .)
    DIVIDE          reduce using rule 110 (h -> STRING .)
    PLUS            reduce using rule 110 (h -> STRING .)
    MINUS           reduce using rule 110 (h -> STRING .)
    EQUALS          reduce using rule 110 (h -> STRING .)
    NOT_EQ          reduce using rule 110 (h -> STRING .)
    LESS_THAN       reduce using rule 110 (h -> STRING .)
    GREATER_THAN    reduce using rule 110 (h -> STRING .)
    LESS_EQ         reduce using rule 110 (h -> STRING .)
    GREATER_EQ      reduce using rule 110 (h -> STRING .)
    AND             reduce using rule 110 (h -> STRING .)
    NAME            reduce using rule 110 (h -> STRING .)
    OR              reduce using rule 110 (h -> STRING .)
    SEMICOLON       reduce using rule 110 (h -> STRING .)
    THEN            reduce using rule 110 (h -> STRING .)
    BEGIN           reduce using rule 110 (h -> STRING .)
    R_PAREN         reduce using rule 110 (h -> STRING .)
    COMMA           reduce using rule 110 (h -> STRING .)
    AS              reduce using rule 110 (h -> STRING .)
    END             reduce using rule 110 (h -> STRING .)
    WHEN            reduce using rule 110 (h -> STRING .)
    ELSE            reduce using rule 110 (h -> STRING .)
    WHERE           reduce using rule 110 (h -> STRING .)


state 91

    (111) h -> ID .

    TIMES           reduce using rule 111 (h -> ID .)
    DIVIDE          reduce using rule 111 (h -> ID .)
    PLUS            reduce using rule 111 (h -> ID .)
    MINUS           reduce using rule 111 (h -> ID .)
    EQUALS          reduce using rule 111 (h -> ID .)
    NOT_EQ          reduce using rule 111 (h -> ID .)
    LESS_THAN       reduce using rule 111 (h -> ID .)
    GREATER_THAN    reduce using rule 111 (h -> ID .)
    LESS_EQ         reduce using rule 111 (h -> ID .)
    GREATER_EQ      reduce using rule 111 (h -> ID .)
    AND             reduce using rule 111 (h -> ID .)
    NAME            reduce using rule 111 (h -> ID .)
    OR              reduce using rule 111 (h -> ID .)
    SEMICOLON       reduce using rule 111 (h -> ID .)
    THEN            reduce using rule 111 (h -> ID .)
    BEGIN           reduce using rule 111 (h -> ID .)
    R_PAREN         reduce using rule 111 (h -> ID .)
    COMMA           reduce using rule 111 (h -> ID .)
    AS              reduce using rule 111 (h -> ID .)
    END             reduce using rule 111 (h -> ID .)
    WHEN            reduce using rule 111 (h -> ID .)
    ELSE            reduce using rule 111 (h -> ID .)
    WHERE           reduce using rule 111 (h -> ID .)


state 92

    (114) h -> exec_statement .

    TIMES           reduce using rule 114 (h -> exec_statement .)
    DIVIDE          reduce using rule 114 (h -> exec_statement .)
    PLUS            reduce using rule 114 (h -> exec_statement .)
    MINUS           reduce using rule 114 (h -> exec_statement .)
    EQUALS          reduce using rule 114 (h -> exec_statement .)
    NOT_EQ          reduce using rule 114 (h -> exec_statement .)
    LESS_THAN       reduce using rule 114 (h -> exec_statement .)
    GREATER_THAN    reduce using rule 114 (h -> exec_statement .)
    LESS_EQ         reduce using rule 114 (h -> exec_statement .)
    GREATER_EQ      reduce using rule 114 (h -> exec_statement .)
    AND             reduce using rule 114 (h -> exec_statement .)
    NAME            reduce using rule 114 (h -> exec_statement .)
    OR              reduce using rule 114 (h -> exec_statement .)
    SEMICOLON       reduce using rule 114 (h -> exec_statement .)
    THEN            reduce using rule 114 (h -> exec_statement .)
    BEGIN           reduce using rule 114 (h -> exec_statement .)
    R_PAREN         reduce using rule 114 (h -> exec_statement .)
    COMMA           reduce using rule 114 (h -> exec_statement .)
    AS              reduce using rule 114 (h -> exec_statement .)
    END             reduce using rule 114 (h -> exec_statement .)
    WHEN            reduce using rule 114 (h -> exec_statement .)
    ELSE            reduce using rule 114 (h -> exec_statement .)
    WHERE           reduce using rule 114 (h -> exec_statement .)


state 93

    (40) insert_statement -> INSERT INTO . NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN

    NAME            shift and go to state 148


state 94

    (121) return_statement -> RETURN a .
    (87) a -> a . OR b

    SEMICOLON       reduce using rule 121 (return_statement -> RETURN a .)
    OR              shift and go to state 122


state 95

    (112) h -> NAME .

    TIMES           reduce using rule 112 (h -> NAME .)
    DIVIDE          reduce using rule 112 (h -> NAME .)
    PLUS            reduce using rule 112 (h -> NAME .)
    MINUS           reduce using rule 112 (h -> NAME .)
    EQUALS          reduce using rule 112 (h -> NAME .)
    NOT_EQ          reduce using rule 112 (h -> NAME .)
    LESS_THAN       reduce using rule 112 (h -> NAME .)
    GREATER_THAN    reduce using rule 112 (h -> NAME .)
    LESS_EQ         reduce using rule 112 (h -> NAME .)
    GREATER_EQ      reduce using rule 112 (h -> NAME .)
    AND             reduce using rule 112 (h -> NAME .)
    OR              reduce using rule 112 (h -> NAME .)
    SEMICOLON       reduce using rule 112 (h -> NAME .)
    THEN            reduce using rule 112 (h -> NAME .)
    BEGIN           reduce using rule 112 (h -> NAME .)
    R_PAREN         reduce using rule 112 (h -> NAME .)
    NAME            reduce using rule 112 (h -> NAME .)
    COMMA           reduce using rule 112 (h -> NAME .)
    AS              reduce using rule 112 (h -> NAME .)
    END             reduce using rule 112 (h -> NAME .)
    WHEN            reduce using rule 112 (h -> NAME .)
    ELSE            reduce using rule 112 (h -> NAME .)
    WHERE           reduce using rule 112 (h -> NAME .)


state 96

    (61) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type
    (62) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME

    NAME            shift and go to state 149


state 97

    (71) drop_table_statement -> DROP TABLE . NAME

    NAME            shift and go to state 150


state 98

    (63) if_statement -> IF a . THEN statements END IF
    (64) if_statement -> IF a . THEN statements ELSE statements END IF
    (87) a -> a . OR b

    THEN            shift and go to state 151
    OR              shift and go to state 122


state 99

    (65) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN
    (113) h -> L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 152
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 100

    (66) exec_statement -> EXEC NAME . vals
    (67) exec_statement -> EXEC NAME . args
    (68) exec_statement -> EXEC NAME .
    (51) vals -> . vals COMMA a
    (52) vals -> . a
    (69) args -> . args COMMA ID ASSIGN a
    (70) args -> . ID ASSIGN a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    SEMICOLON       reduce using rule 68 (exec_statement -> EXEC NAME .)
    TIMES           reduce using rule 68 (exec_statement -> EXEC NAME .)
    DIVIDE          reduce using rule 68 (exec_statement -> EXEC NAME .)
    PLUS            reduce using rule 68 (exec_statement -> EXEC NAME .)
    EQUALS          reduce using rule 68 (exec_statement -> EXEC NAME .)
    NOT_EQ          reduce using rule 68 (exec_statement -> EXEC NAME .)
    LESS_THAN       reduce using rule 68 (exec_statement -> EXEC NAME .)
    GREATER_THAN    reduce using rule 68 (exec_statement -> EXEC NAME .)
    LESS_EQ         reduce using rule 68 (exec_statement -> EXEC NAME .)
    GREATER_EQ      reduce using rule 68 (exec_statement -> EXEC NAME .)
    AND             reduce using rule 68 (exec_statement -> EXEC NAME .)
    OR              reduce using rule 68 (exec_statement -> EXEC NAME .)
    THEN            reduce using rule 68 (exec_statement -> EXEC NAME .)
    BEGIN           reduce using rule 68 (exec_statement -> EXEC NAME .)
    R_PAREN         reduce using rule 68 (exec_statement -> EXEC NAME .)
    COMMA           reduce using rule 68 (exec_statement -> EXEC NAME .)
    AS              reduce using rule 68 (exec_statement -> EXEC NAME .)
    END             reduce using rule 68 (exec_statement -> EXEC NAME .)
    WHEN            reduce using rule 68 (exec_statement -> EXEC NAME .)
    ELSE            reduce using rule 68 (exec_statement -> EXEC NAME .)
    WHERE           reduce using rule 68 (exec_statement -> EXEC NAME .)
    ID              shift and go to state 156
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

  ! MINUS           [ reduce using rule 68 (exec_statement -> EXEC NAME .) ]
  ! NAME            [ reduce using rule 68 (exec_statement -> EXEC NAME .) ]

    vals                           shift and go to state 153
    args                           shift and go to state 154
    a                              shift and go to state 155
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 101

    (72) update_statement -> UPDATE NAME . SET column_assignments WHERE a

    SET             shift and go to state 157


state 102

    (75) while_statement -> WHILE a . BEGIN statements END
    (87) a -> a . OR b

    BEGIN           shift and go to state 158
    OR              shift and go to state 122


state 103

    (76) truncate_statement -> TRUNCATE TABLE . NAME

    NAME            shift and go to state 159


state 104

    (77) delete_statement -> DELETE FROM . NAME WHERE a

    NAME            shift and go to state 160


state 105

    (22) create_database_statement -> CREATE DATA BASE . NAME

    NAME            shift and go to state 161


state 106

    (29) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN

    L_PAREN         shift and go to state 162


state 107

    (53) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> CREATE FUNCTION NAME . L_PAREN R_PAREN RETURN type AS BEGIN statements END

    L_PAREN         shift and go to state 163


state 108

    (55) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN R_PAREN AS BEGIN statements END

    L_PAREN         shift and go to state 164


state 109

    (24) declare_statement -> DECLARE ID AS . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 165

state 110

    (25) declare_statement -> DECLARE ID type .

    SEMICOLON       reduce using rule 25 (declare_statement -> DECLARE ID type .)


state 111

    (81) type -> INT .

    SEMICOLON       reduce using rule 81 (type -> INT .)
    NOT             reduce using rule 81 (type -> INT .)
    NULL            reduce using rule 81 (type -> INT .)
    PRIMARY         reduce using rule 81 (type -> INT .)
    REFERENCE       reduce using rule 81 (type -> INT .)
    R_PAREN         reduce using rule 81 (type -> INT .)
    COMMA           reduce using rule 81 (type -> INT .)
    AS              reduce using rule 81 (type -> INT .)


state 112

    (82) type -> DECIMAL .

    SEMICOLON       reduce using rule 82 (type -> DECIMAL .)
    NOT             reduce using rule 82 (type -> DECIMAL .)
    NULL            reduce using rule 82 (type -> DECIMAL .)
    PRIMARY         reduce using rule 82 (type -> DECIMAL .)
    REFERENCE       reduce using rule 82 (type -> DECIMAL .)
    R_PAREN         reduce using rule 82 (type -> DECIMAL .)
    COMMA           reduce using rule 82 (type -> DECIMAL .)
    AS              reduce using rule 82 (type -> DECIMAL .)


state 113

    (83) type -> DATE .

    SEMICOLON       reduce using rule 83 (type -> DATE .)
    NOT             reduce using rule 83 (type -> DATE .)
    NULL            reduce using rule 83 (type -> DATE .)
    PRIMARY         reduce using rule 83 (type -> DATE .)
    REFERENCE       reduce using rule 83 (type -> DATE .)
    R_PAREN         reduce using rule 83 (type -> DATE .)
    COMMA           reduce using rule 83 (type -> DATE .)
    AS              reduce using rule 83 (type -> DATE .)


state 114

    (84) type -> DATETIME .

    SEMICOLON       reduce using rule 84 (type -> DATETIME .)
    NOT             reduce using rule 84 (type -> DATETIME .)
    NULL            reduce using rule 84 (type -> DATETIME .)
    PRIMARY         reduce using rule 84 (type -> DATETIME .)
    REFERENCE       reduce using rule 84 (type -> DATETIME .)
    R_PAREN         reduce using rule 84 (type -> DATETIME .)
    COMMA           reduce using rule 84 (type -> DATETIME .)
    AS              reduce using rule 84 (type -> DATETIME .)


state 115

    (85) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 166


state 116

    (86) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 167


state 117

    (27) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 168


state 118

    (28) assignments -> ID ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 169
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 119

    (38) select_statement -> SELECT columns FROM . NAME
    (39) select_statement -> SELECT columns FROM . NAME WHERE a

    NAME            shift and go to state 170


state 120

    (41) columns -> columns COMMA . column
    (42) columns -> columns COMMA . column POINT column
    (45) column -> . TIMES
    (46) column -> . NAME
    (47) column -> . case_statement
    (48) column -> . call_function_prod
    (49) column -> . if_statement NAME
    (50) column -> . a NAME
    (78) case_statement -> . CASE when_statements END NAME
    (115) call_function_prod -> . HOY L_PAREN R_PAREN
    (116) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (117) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (118) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (119) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (120) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    TIMES           shift and go to state 67
    NAME            shift and go to state 64
    CASE            shift and go to state 71
    HOY             shift and go to state 72
    CONCATENAR      shift and go to state 74
    SUBSTRAER       shift and go to state 75
    CONTAR          shift and go to state 76
    SUMA            shift and go to state 77
    CAS             shift and go to state 78
    IF              shift and go to state 31
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    column                         shift and go to state 171
    case_statement                 shift and go to state 68
    call_function_prod             shift and go to state 69
    if_statement                   shift and go to state 70
    a                              shift and go to state 65
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 121

    (50) column -> a NAME .

    POINT           reduce using rule 50 (column -> a NAME .)
    FROM            reduce using rule 50 (column -> a NAME .)
    COMMA           reduce using rule 50 (column -> a NAME .)
    R_PAREN         reduce using rule 50 (column -> a NAME .)


state 122

    (87) a -> a OR . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    b                              shift and go to state 172
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 123

    (43) columns -> column POINT . column
    (45) column -> . TIMES
    (46) column -> . NAME
    (47) column -> . case_statement
    (48) column -> . call_function_prod
    (49) column -> . if_statement NAME
    (50) column -> . a NAME
    (78) case_statement -> . CASE when_statements END NAME
    (115) call_function_prod -> . HOY L_PAREN R_PAREN
    (116) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (117) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (118) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (119) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (120) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    TIMES           shift and go to state 67
    NAME            shift and go to state 64
    CASE            shift and go to state 71
    HOY             shift and go to state 72
    CONCATENAR      shift and go to state 74
    SUBSTRAER       shift and go to state 75
    CONTAR          shift and go to state 76
    SUMA            shift and go to state 77
    CAS             shift and go to state 78
    IF              shift and go to state 31
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    column                         shift and go to state 173
    case_statement                 shift and go to state 68
    call_function_prod             shift and go to state 69
    if_statement                   shift and go to state 70
    a                              shift and go to state 65
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 124

    (49) column -> if_statement NAME .

    POINT           reduce using rule 49 (column -> if_statement NAME .)
    FROM            reduce using rule 49 (column -> if_statement NAME .)
    COMMA           reduce using rule 49 (column -> if_statement NAME .)
    R_PAREN         reduce using rule 49 (column -> if_statement NAME .)


state 125

    (78) case_statement -> CASE when_statements . END NAME

    END             shift and go to state 174


state 126

    (79) when_statements -> WHEN . a THEN a when_statements
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 175
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 127

    (80) when_statements -> ELSE . THEN a

    THEN            shift and go to state 176


state 128

    (115) call_function_prod -> HOY L_PAREN . R_PAREN

    R_PAREN         shift and go to state 177


state 129

    (113) h -> L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 178
    OR              shift and go to state 122


state 130

    (116) call_function_prod -> CONCATENAR L_PAREN . a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 179
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 131

    (117) call_function_prod -> SUBSTRAER L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 180
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 132

    (118) call_function_prod -> CONTAR L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 181
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 133

    (119) call_function_prod -> SUMA L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 182
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 134

    (120) call_function_prod -> CAS L_PAREN . a AS type R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 183
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 135

    (89) b -> b AND . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    c                              shift and go to state 184
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 136

    (91) c -> NOT_SIGN d .
    (93) d -> d . EQUALS e
    (94) d -> d . NOT_EQ e
    (95) d -> d . LESS_THAN e
    (96) d -> d . GREATER_THAN e
    (97) d -> d . LESS_EQ e
    (98) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 91 (c -> NOT_SIGN d .)
    NAME            reduce using rule 91 (c -> NOT_SIGN d .)
    OR              reduce using rule 91 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 91 (c -> NOT_SIGN d .)
    THEN            reduce using rule 91 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 91 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 91 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 91 (c -> NOT_SIGN d .)
    TIMES           reduce using rule 91 (c -> NOT_SIGN d .)
    DIVIDE          reduce using rule 91 (c -> NOT_SIGN d .)
    PLUS            reduce using rule 91 (c -> NOT_SIGN d .)
    MINUS           reduce using rule 91 (c -> NOT_SIGN d .)
    AS              reduce using rule 91 (c -> NOT_SIGN d .)
    END             reduce using rule 91 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 91 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 91 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 91 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 137
    NOT_EQ          shift and go to state 138
    LESS_THAN       shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_EQ         shift and go to state 141
    GREATER_EQ      shift and go to state 142

  ! EQUALS          [ reduce using rule 91 (c -> NOT_SIGN d .) ]
  ! NOT_EQ          [ reduce using rule 91 (c -> NOT_SIGN d .) ]
  ! LESS_THAN       [ reduce using rule 91 (c -> NOT_SIGN d .) ]
  ! GREATER_THAN    [ reduce using rule 91 (c -> NOT_SIGN d .) ]
  ! LESS_EQ         [ reduce using rule 91 (c -> NOT_SIGN d .) ]
  ! GREATER_EQ      [ reduce using rule 91 (c -> NOT_SIGN d .) ]


state 137

    (93) d -> d EQUALS . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 185
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 138

    (94) d -> d NOT_EQ . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 186
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 139

    (95) d -> d LESS_THAN . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 187
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 140

    (96) d -> d GREATER_THAN . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 188
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 141

    (97) d -> d LESS_EQ . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 189
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 142

    (98) d -> d GREATER_EQ . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    e                              shift and go to state 190
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 143

    (100) e -> e PLUS . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    f                              shift and go to state 191
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 144

    (101) e -> e MINUS . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    f                              shift and go to state 192
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 145

    (103) f -> f TIMES . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    g                              shift and go to state 193
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 146

    (104) f -> f DIVIDE . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    g                              shift and go to state 194
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 147

    (106) g -> MINUS h .

    TIMES           reduce using rule 106 (g -> MINUS h .)
    DIVIDE          reduce using rule 106 (g -> MINUS h .)
    PLUS            reduce using rule 106 (g -> MINUS h .)
    MINUS           reduce using rule 106 (g -> MINUS h .)
    EQUALS          reduce using rule 106 (g -> MINUS h .)
    NOT_EQ          reduce using rule 106 (g -> MINUS h .)
    LESS_THAN       reduce using rule 106 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 106 (g -> MINUS h .)
    LESS_EQ         reduce using rule 106 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 106 (g -> MINUS h .)
    AND             reduce using rule 106 (g -> MINUS h .)
    NAME            reduce using rule 106 (g -> MINUS h .)
    OR              reduce using rule 106 (g -> MINUS h .)
    SEMICOLON       reduce using rule 106 (g -> MINUS h .)
    THEN            reduce using rule 106 (g -> MINUS h .)
    BEGIN           reduce using rule 106 (g -> MINUS h .)
    R_PAREN         reduce using rule 106 (g -> MINUS h .)
    COMMA           reduce using rule 106 (g -> MINUS h .)
    AS              reduce using rule 106 (g -> MINUS h .)
    END             reduce using rule 106 (g -> MINUS h .)
    WHEN            reduce using rule 106 (g -> MINUS h .)
    ELSE            reduce using rule 106 (g -> MINUS h .)
    WHERE           reduce using rule 106 (g -> MINUS h .)


state 148

    (40) insert_statement -> INSERT INTO NAME . L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 195


state 149

    (61) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type
    (62) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME

    ADD             shift and go to state 196
    DROP            shift and go to state 197


state 150

    (71) drop_table_statement -> DROP TABLE NAME .

    SEMICOLON       reduce using rule 71 (drop_table_statement -> DROP TABLE NAME .)


state 151

    (63) if_statement -> IF a THEN . statements END IF
    (64) if_statement -> IF a THEN . statements ELSE statements END IF
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    ELSE            reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 198

state 152

    (65) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN
    (113) h -> L_PAREN a . R_PAREN
    (87) a -> a . OR b

    COMMA           shift and go to state 199
    R_PAREN         shift and go to state 178
    OR              shift and go to state 122


state 153

    (66) exec_statement -> EXEC NAME vals .
    (51) vals -> vals . COMMA a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    TIMES           reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    DIVIDE          reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    PLUS            reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    MINUS           reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    EQUALS          reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    NOT_EQ          reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    LESS_THAN       reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    GREATER_THAN    reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    LESS_EQ         reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    GREATER_EQ      reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    AND             reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    NAME            reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    OR              reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    THEN            reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    BEGIN           reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    R_PAREN         reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    AS              reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    END             reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    WHEN            reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    ELSE            reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    WHERE           reduce using rule 66 (exec_statement -> EXEC NAME vals .)
    COMMA           shift and go to state 200

  ! COMMA           [ reduce using rule 66 (exec_statement -> EXEC NAME vals .) ]


state 154

    (67) exec_statement -> EXEC NAME args .
    (69) args -> args . COMMA ID ASSIGN a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 67 (exec_statement -> EXEC NAME args .)
    TIMES           reduce using rule 67 (exec_statement -> EXEC NAME args .)
    DIVIDE          reduce using rule 67 (exec_statement -> EXEC NAME args .)
    PLUS            reduce using rule 67 (exec_statement -> EXEC NAME args .)
    MINUS           reduce using rule 67 (exec_statement -> EXEC NAME args .)
    EQUALS          reduce using rule 67 (exec_statement -> EXEC NAME args .)
    NOT_EQ          reduce using rule 67 (exec_statement -> EXEC NAME args .)
    LESS_THAN       reduce using rule 67 (exec_statement -> EXEC NAME args .)
    GREATER_THAN    reduce using rule 67 (exec_statement -> EXEC NAME args .)
    LESS_EQ         reduce using rule 67 (exec_statement -> EXEC NAME args .)
    GREATER_EQ      reduce using rule 67 (exec_statement -> EXEC NAME args .)
    AND             reduce using rule 67 (exec_statement -> EXEC NAME args .)
    NAME            reduce using rule 67 (exec_statement -> EXEC NAME args .)
    OR              reduce using rule 67 (exec_statement -> EXEC NAME args .)
    THEN            reduce using rule 67 (exec_statement -> EXEC NAME args .)
    BEGIN           reduce using rule 67 (exec_statement -> EXEC NAME args .)
    R_PAREN         reduce using rule 67 (exec_statement -> EXEC NAME args .)
    AS              reduce using rule 67 (exec_statement -> EXEC NAME args .)
    END             reduce using rule 67 (exec_statement -> EXEC NAME args .)
    WHEN            reduce using rule 67 (exec_statement -> EXEC NAME args .)
    ELSE            reduce using rule 67 (exec_statement -> EXEC NAME args .)
    WHERE           reduce using rule 67 (exec_statement -> EXEC NAME args .)
    COMMA           shift and go to state 201

  ! COMMA           [ reduce using rule 67 (exec_statement -> EXEC NAME args .) ]


state 155

    (52) vals -> a .
    (87) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 52 (vals -> a .)
    NOT_EQ          reduce using rule 52 (vals -> a .)
    LESS_THAN       reduce using rule 52 (vals -> a .)
    GREATER_THAN    reduce using rule 52 (vals -> a .)
    LESS_EQ         reduce using rule 52 (vals -> a .)
    GREATER_EQ      reduce using rule 52 (vals -> a .)
    AND             reduce using rule 52 (vals -> a .)
    NAME            reduce using rule 52 (vals -> a .)
    SEMICOLON       reduce using rule 52 (vals -> a .)
    THEN            reduce using rule 52 (vals -> a .)
    BEGIN           reduce using rule 52 (vals -> a .)
    R_PAREN         reduce using rule 52 (vals -> a .)
    COMMA           reduce using rule 52 (vals -> a .)
    TIMES           reduce using rule 52 (vals -> a .)
    DIVIDE          reduce using rule 52 (vals -> a .)
    PLUS            reduce using rule 52 (vals -> a .)
    MINUS           reduce using rule 52 (vals -> a .)
    AS              reduce using rule 52 (vals -> a .)
    END             reduce using rule 52 (vals -> a .)
    WHEN            reduce using rule 52 (vals -> a .)
    ELSE            reduce using rule 52 (vals -> a .)
    WHERE           reduce using rule 52 (vals -> a .)
    OR              shift and go to state 122

  ! OR              [ reduce using rule 52 (vals -> a .) ]


state 156

    (70) args -> ID . ASSIGN a
    (111) h -> ID .

    ASSIGN          shift and go to state 202
    EQUALS          reduce using rule 111 (h -> ID .)
    NOT_EQ          reduce using rule 111 (h -> ID .)
    LESS_THAN       reduce using rule 111 (h -> ID .)
    GREATER_THAN    reduce using rule 111 (h -> ID .)
    LESS_EQ         reduce using rule 111 (h -> ID .)
    GREATER_EQ      reduce using rule 111 (h -> ID .)
    AND             reduce using rule 111 (h -> ID .)
    NAME            reduce using rule 111 (h -> ID .)
    OR              reduce using rule 111 (h -> ID .)
    SEMICOLON       reduce using rule 111 (h -> ID .)
    THEN            reduce using rule 111 (h -> ID .)
    BEGIN           reduce using rule 111 (h -> ID .)
    R_PAREN         reduce using rule 111 (h -> ID .)
    COMMA           reduce using rule 111 (h -> ID .)
    TIMES           reduce using rule 111 (h -> ID .)
    DIVIDE          reduce using rule 111 (h -> ID .)
    PLUS            reduce using rule 111 (h -> ID .)
    MINUS           reduce using rule 111 (h -> ID .)
    AS              reduce using rule 111 (h -> ID .)
    END             reduce using rule 111 (h -> ID .)
    WHEN            reduce using rule 111 (h -> ID .)
    ELSE            reduce using rule 111 (h -> ID .)
    WHERE           reduce using rule 111 (h -> ID .)


state 157

    (72) update_statement -> UPDATE NAME SET . column_assignments WHERE a
    (73) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (74) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 203

    column_assignments             shift and go to state 204

state 158

    (75) while_statement -> WHILE a BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 205

state 159

    (76) truncate_statement -> TRUNCATE TABLE NAME .

    SEMICOLON       reduce using rule 76 (truncate_statement -> TRUNCATE TABLE NAME .)


state 160

    (77) delete_statement -> DELETE FROM NAME . WHERE a

    WHERE           shift and go to state 206


state 161

    (22) create_database_statement -> CREATE DATA BASE NAME .

    SEMICOLON       reduce using rule 22 (create_database_statement -> CREATE DATA BASE NAME .)


state 162

    (29) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN
    (30) properties -> . properties COMMA property
    (31) properties -> . property
    (32) property -> . NAME type null_prod PRIMARY KEY
    (33) property -> . NAME type null_prod
    (34) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 207

    properties                     shift and go to state 208
    property                       shift and go to state 209

state 163

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN . R_PAREN RETURN type AS BEGIN statements END
    (57) parameters -> . parameters COMMA ID AS type
    (58) parameters -> . parameters COMMA ID type
    (59) parameters -> . ID type
    (60) parameters -> . ID AS type

    R_PAREN         shift and go to state 211
    ID              shift and go to state 212

    parameters                     shift and go to state 210

state 164

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . R_PAREN AS BEGIN statements END
    (57) parameters -> . parameters COMMA ID AS type
    (58) parameters -> . parameters COMMA ID type
    (59) parameters -> . ID type
    (60) parameters -> . ID AS type

    R_PAREN         shift and go to state 214
    ID              shift and go to state 212

    parameters                     shift and go to state 213

state 165

    (24) declare_statement -> DECLARE ID AS type .

    SEMICOLON       reduce using rule 24 (declare_statement -> DECLARE ID AS type .)


state 166

    (85) type -> NCHAR L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 215
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 167

    (86) type -> NVARCHAR L_PAREN . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 216
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 168

    (27) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 217


state 169

    (28) assignments -> ID ASSIGN a .
    (87) a -> a . OR b

    COMMA           reduce using rule 28 (assignments -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 28 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 122


state 170

    (38) select_statement -> SELECT columns FROM NAME .
    (39) select_statement -> SELECT columns FROM NAME . WHERE a

    SEMICOLON       reduce using rule 38 (select_statement -> SELECT columns FROM NAME .)
    WHERE           shift and go to state 218


state 171

    (41) columns -> columns COMMA column .
    (42) columns -> columns COMMA column . POINT column

    FROM            reduce using rule 41 (columns -> columns COMMA column .)
    COMMA           reduce using rule 41 (columns -> columns COMMA column .)
    R_PAREN         reduce using rule 41 (columns -> columns COMMA column .)
    POINT           shift and go to state 219


state 172

    (87) a -> a OR b .
    (89) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 87 (a -> a OR b .)
    OR              reduce using rule 87 (a -> a OR b .)
    SEMICOLON       reduce using rule 87 (a -> a OR b .)
    THEN            reduce using rule 87 (a -> a OR b .)
    BEGIN           reduce using rule 87 (a -> a OR b .)
    R_PAREN         reduce using rule 87 (a -> a OR b .)
    COMMA           reduce using rule 87 (a -> a OR b .)
    EQUALS          reduce using rule 87 (a -> a OR b .)
    NOT_EQ          reduce using rule 87 (a -> a OR b .)
    LESS_THAN       reduce using rule 87 (a -> a OR b .)
    GREATER_THAN    reduce using rule 87 (a -> a OR b .)
    LESS_EQ         reduce using rule 87 (a -> a OR b .)
    GREATER_EQ      reduce using rule 87 (a -> a OR b .)
    TIMES           reduce using rule 87 (a -> a OR b .)
    DIVIDE          reduce using rule 87 (a -> a OR b .)
    PLUS            reduce using rule 87 (a -> a OR b .)
    MINUS           reduce using rule 87 (a -> a OR b .)
    AS              reduce using rule 87 (a -> a OR b .)
    END             reduce using rule 87 (a -> a OR b .)
    WHEN            reduce using rule 87 (a -> a OR b .)
    ELSE            reduce using rule 87 (a -> a OR b .)
    WHERE           reduce using rule 87 (a -> a OR b .)
    AND             shift and go to state 135

  ! AND             [ reduce using rule 87 (a -> a OR b .) ]


state 173

    (43) columns -> column POINT column .

    FROM            reduce using rule 43 (columns -> column POINT column .)
    COMMA           reduce using rule 43 (columns -> column POINT column .)
    R_PAREN         reduce using rule 43 (columns -> column POINT column .)


state 174

    (78) case_statement -> CASE when_statements END . NAME

    NAME            shift and go to state 220


state 175

    (79) when_statements -> WHEN a . THEN a when_statements
    (87) a -> a . OR b

    THEN            shift and go to state 221
    OR              shift and go to state 122


state 176

    (80) when_statements -> ELSE THEN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 222
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 177

    (115) call_function_prod -> HOY L_PAREN R_PAREN .

    POINT           reduce using rule 115 (call_function_prod -> HOY L_PAREN R_PAREN .)
    FROM            reduce using rule 115 (call_function_prod -> HOY L_PAREN R_PAREN .)
    COMMA           reduce using rule 115 (call_function_prod -> HOY L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 115 (call_function_prod -> HOY L_PAREN R_PAREN .)


state 178

    (113) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    PLUS            reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    MINUS           reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    EQUALS          reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    NOT_EQ          reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    LESS_THAN       reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    GREATER_THAN    reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    LESS_EQ         reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    GREATER_EQ      reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    NAME            reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    SEMICOLON       reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    THEN            reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    BEGIN           reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    COMMA           reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    AS              reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    END             reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    WHEN            reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    ELSE            reduce using rule 113 (h -> L_PAREN a R_PAREN .)
    WHERE           reduce using rule 113 (h -> L_PAREN a R_PAREN .)


state 179

    (116) call_function_prod -> CONCATENAR L_PAREN a . COMMA a R_PAREN
    (87) a -> a . OR b

    COMMA           shift and go to state 223
    OR              shift and go to state 122


state 180

    (117) call_function_prod -> SUBSTRAER L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 224
    OR              shift and go to state 122


state 181

    (118) call_function_prod -> CONTAR L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 225
    OR              shift and go to state 122


state 182

    (119) call_function_prod -> SUMA L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 226
    OR              shift and go to state 122


state 183

    (120) call_function_prod -> CAS L_PAREN a . AS type R_PAREN
    (87) a -> a . OR b

    AS              shift and go to state 227
    OR              shift and go to state 122


state 184

    (89) b -> b AND c .

    AND             reduce using rule 89 (b -> b AND c .)
    NAME            reduce using rule 89 (b -> b AND c .)
    OR              reduce using rule 89 (b -> b AND c .)
    SEMICOLON       reduce using rule 89 (b -> b AND c .)
    THEN            reduce using rule 89 (b -> b AND c .)
    BEGIN           reduce using rule 89 (b -> b AND c .)
    R_PAREN         reduce using rule 89 (b -> b AND c .)
    COMMA           reduce using rule 89 (b -> b AND c .)
    EQUALS          reduce using rule 89 (b -> b AND c .)
    NOT_EQ          reduce using rule 89 (b -> b AND c .)
    LESS_THAN       reduce using rule 89 (b -> b AND c .)
    GREATER_THAN    reduce using rule 89 (b -> b AND c .)
    LESS_EQ         reduce using rule 89 (b -> b AND c .)
    GREATER_EQ      reduce using rule 89 (b -> b AND c .)
    TIMES           reduce using rule 89 (b -> b AND c .)
    DIVIDE          reduce using rule 89 (b -> b AND c .)
    PLUS            reduce using rule 89 (b -> b AND c .)
    MINUS           reduce using rule 89 (b -> b AND c .)
    AS              reduce using rule 89 (b -> b AND c .)
    END             reduce using rule 89 (b -> b AND c .)
    WHEN            reduce using rule 89 (b -> b AND c .)
    ELSE            reduce using rule 89 (b -> b AND c .)
    WHERE           reduce using rule 89 (b -> b AND c .)


state 185

    (93) d -> d EQUALS e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 93 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 93 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 93 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 93 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 93 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 93 (d -> d EQUALS e .)
    AND             reduce using rule 93 (d -> d EQUALS e .)
    NAME            reduce using rule 93 (d -> d EQUALS e .)
    OR              reduce using rule 93 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 93 (d -> d EQUALS e .)
    THEN            reduce using rule 93 (d -> d EQUALS e .)
    BEGIN           reduce using rule 93 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 93 (d -> d EQUALS e .)
    COMMA           reduce using rule 93 (d -> d EQUALS e .)
    TIMES           reduce using rule 93 (d -> d EQUALS e .)
    DIVIDE          reduce using rule 93 (d -> d EQUALS e .)
    AS              reduce using rule 93 (d -> d EQUALS e .)
    END             reduce using rule 93 (d -> d EQUALS e .)
    WHEN            reduce using rule 93 (d -> d EQUALS e .)
    ELSE            reduce using rule 93 (d -> d EQUALS e .)
    WHERE           reduce using rule 93 (d -> d EQUALS e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 93 (d -> d EQUALS e .) ]
  ! MINUS           [ reduce using rule 93 (d -> d EQUALS e .) ]


state 186

    (94) d -> d NOT_EQ e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 94 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 94 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 94 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 94 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 94 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 94 (d -> d NOT_EQ e .)
    AND             reduce using rule 94 (d -> d NOT_EQ e .)
    NAME            reduce using rule 94 (d -> d NOT_EQ e .)
    OR              reduce using rule 94 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 94 (d -> d NOT_EQ e .)
    THEN            reduce using rule 94 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 94 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 94 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 94 (d -> d NOT_EQ e .)
    TIMES           reduce using rule 94 (d -> d NOT_EQ e .)
    DIVIDE          reduce using rule 94 (d -> d NOT_EQ e .)
    AS              reduce using rule 94 (d -> d NOT_EQ e .)
    END             reduce using rule 94 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 94 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 94 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 94 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 94 (d -> d NOT_EQ e .) ]
  ! MINUS           [ reduce using rule 94 (d -> d NOT_EQ e .) ]


state 187

    (95) d -> d LESS_THAN e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 95 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 95 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 95 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 95 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 95 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 95 (d -> d LESS_THAN e .)
    AND             reduce using rule 95 (d -> d LESS_THAN e .)
    NAME            reduce using rule 95 (d -> d LESS_THAN e .)
    OR              reduce using rule 95 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 95 (d -> d LESS_THAN e .)
    THEN            reduce using rule 95 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 95 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 95 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 95 (d -> d LESS_THAN e .)
    TIMES           reduce using rule 95 (d -> d LESS_THAN e .)
    DIVIDE          reduce using rule 95 (d -> d LESS_THAN e .)
    AS              reduce using rule 95 (d -> d LESS_THAN e .)
    END             reduce using rule 95 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 95 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 95 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 95 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 95 (d -> d LESS_THAN e .) ]
  ! MINUS           [ reduce using rule 95 (d -> d LESS_THAN e .) ]


state 188

    (96) d -> d GREATER_THAN e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 96 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 96 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 96 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 96 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 96 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 96 (d -> d GREATER_THAN e .)
    AND             reduce using rule 96 (d -> d GREATER_THAN e .)
    NAME            reduce using rule 96 (d -> d GREATER_THAN e .)
    OR              reduce using rule 96 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 96 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 96 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 96 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 96 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 96 (d -> d GREATER_THAN e .)
    TIMES           reduce using rule 96 (d -> d GREATER_THAN e .)
    DIVIDE          reduce using rule 96 (d -> d GREATER_THAN e .)
    AS              reduce using rule 96 (d -> d GREATER_THAN e .)
    END             reduce using rule 96 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 96 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 96 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 96 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 96 (d -> d GREATER_THAN e .) ]
  ! MINUS           [ reduce using rule 96 (d -> d GREATER_THAN e .) ]


state 189

    (97) d -> d LESS_EQ e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 97 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 97 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 97 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 97 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 97 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 97 (d -> d LESS_EQ e .)
    AND             reduce using rule 97 (d -> d LESS_EQ e .)
    NAME            reduce using rule 97 (d -> d LESS_EQ e .)
    OR              reduce using rule 97 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 97 (d -> d LESS_EQ e .)
    THEN            reduce using rule 97 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 97 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 97 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 97 (d -> d LESS_EQ e .)
    TIMES           reduce using rule 97 (d -> d LESS_EQ e .)
    DIVIDE          reduce using rule 97 (d -> d LESS_EQ e .)
    AS              reduce using rule 97 (d -> d LESS_EQ e .)
    END             reduce using rule 97 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 97 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 97 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 97 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 97 (d -> d LESS_EQ e .) ]
  ! MINUS           [ reduce using rule 97 (d -> d LESS_EQ e .) ]


state 190

    (98) d -> d GREATER_EQ e .
    (100) e -> e . PLUS f
    (101) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 98 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 98 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 98 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 98 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 98 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 98 (d -> d GREATER_EQ e .)
    AND             reduce using rule 98 (d -> d GREATER_EQ e .)
    NAME            reduce using rule 98 (d -> d GREATER_EQ e .)
    OR              reduce using rule 98 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 98 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 98 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 98 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 98 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 98 (d -> d GREATER_EQ e .)
    TIMES           reduce using rule 98 (d -> d GREATER_EQ e .)
    DIVIDE          reduce using rule 98 (d -> d GREATER_EQ e .)
    AS              reduce using rule 98 (d -> d GREATER_EQ e .)
    END             reduce using rule 98 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 98 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 98 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 98 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

  ! PLUS            [ reduce using rule 98 (d -> d GREATER_EQ e .) ]
  ! MINUS           [ reduce using rule 98 (d -> d GREATER_EQ e .) ]


state 191

    (100) e -> e PLUS f .
    (103) f -> f . TIMES g
    (104) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 100 (e -> e PLUS f .)
    MINUS           reduce using rule 100 (e -> e PLUS f .)
    EQUALS          reduce using rule 100 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 100 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 100 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 100 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 100 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 100 (e -> e PLUS f .)
    AND             reduce using rule 100 (e -> e PLUS f .)
    NAME            reduce using rule 100 (e -> e PLUS f .)
    OR              reduce using rule 100 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 100 (e -> e PLUS f .)
    THEN            reduce using rule 100 (e -> e PLUS f .)
    BEGIN           reduce using rule 100 (e -> e PLUS f .)
    R_PAREN         reduce using rule 100 (e -> e PLUS f .)
    COMMA           reduce using rule 100 (e -> e PLUS f .)
    AS              reduce using rule 100 (e -> e PLUS f .)
    END             reduce using rule 100 (e -> e PLUS f .)
    WHEN            reduce using rule 100 (e -> e PLUS f .)
    ELSE            reduce using rule 100 (e -> e PLUS f .)
    WHERE           reduce using rule 100 (e -> e PLUS f .)
    TIMES           shift and go to state 145
    DIVIDE          shift and go to state 146

  ! TIMES           [ reduce using rule 100 (e -> e PLUS f .) ]
  ! DIVIDE          [ reduce using rule 100 (e -> e PLUS f .) ]


state 192

    (101) e -> e MINUS f .
    (103) f -> f . TIMES g
    (104) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 101 (e -> e MINUS f .)
    MINUS           reduce using rule 101 (e -> e MINUS f .)
    EQUALS          reduce using rule 101 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 101 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 101 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 101 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 101 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 101 (e -> e MINUS f .)
    AND             reduce using rule 101 (e -> e MINUS f .)
    NAME            reduce using rule 101 (e -> e MINUS f .)
    OR              reduce using rule 101 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 101 (e -> e MINUS f .)
    THEN            reduce using rule 101 (e -> e MINUS f .)
    BEGIN           reduce using rule 101 (e -> e MINUS f .)
    R_PAREN         reduce using rule 101 (e -> e MINUS f .)
    COMMA           reduce using rule 101 (e -> e MINUS f .)
    AS              reduce using rule 101 (e -> e MINUS f .)
    END             reduce using rule 101 (e -> e MINUS f .)
    WHEN            reduce using rule 101 (e -> e MINUS f .)
    ELSE            reduce using rule 101 (e -> e MINUS f .)
    WHERE           reduce using rule 101 (e -> e MINUS f .)
    TIMES           shift and go to state 145
    DIVIDE          shift and go to state 146

  ! TIMES           [ reduce using rule 101 (e -> e MINUS f .) ]
  ! DIVIDE          [ reduce using rule 101 (e -> e MINUS f .) ]


state 193

    (103) f -> f TIMES g .

    TIMES           reduce using rule 103 (f -> f TIMES g .)
    DIVIDE          reduce using rule 103 (f -> f TIMES g .)
    PLUS            reduce using rule 103 (f -> f TIMES g .)
    MINUS           reduce using rule 103 (f -> f TIMES g .)
    EQUALS          reduce using rule 103 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 103 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 103 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 103 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 103 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 103 (f -> f TIMES g .)
    AND             reduce using rule 103 (f -> f TIMES g .)
    NAME            reduce using rule 103 (f -> f TIMES g .)
    OR              reduce using rule 103 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 103 (f -> f TIMES g .)
    THEN            reduce using rule 103 (f -> f TIMES g .)
    BEGIN           reduce using rule 103 (f -> f TIMES g .)
    R_PAREN         reduce using rule 103 (f -> f TIMES g .)
    COMMA           reduce using rule 103 (f -> f TIMES g .)
    AS              reduce using rule 103 (f -> f TIMES g .)
    END             reduce using rule 103 (f -> f TIMES g .)
    WHEN            reduce using rule 103 (f -> f TIMES g .)
    ELSE            reduce using rule 103 (f -> f TIMES g .)
    WHERE           reduce using rule 103 (f -> f TIMES g .)


state 194

    (104) f -> f DIVIDE g .

    TIMES           reduce using rule 104 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 104 (f -> f DIVIDE g .)
    PLUS            reduce using rule 104 (f -> f DIVIDE g .)
    MINUS           reduce using rule 104 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 104 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 104 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 104 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 104 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 104 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 104 (f -> f DIVIDE g .)
    AND             reduce using rule 104 (f -> f DIVIDE g .)
    NAME            reduce using rule 104 (f -> f DIVIDE g .)
    OR              reduce using rule 104 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 104 (f -> f DIVIDE g .)
    THEN            reduce using rule 104 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 104 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 104 (f -> f DIVIDE g .)
    COMMA           reduce using rule 104 (f -> f DIVIDE g .)
    AS              reduce using rule 104 (f -> f DIVIDE g .)
    END             reduce using rule 104 (f -> f DIVIDE g .)
    WHEN            reduce using rule 104 (f -> f DIVIDE g .)
    ELSE            reduce using rule 104 (f -> f DIVIDE g .)
    WHERE           reduce using rule 104 (f -> f DIVIDE g .)


state 195

    (40) insert_statement -> INSERT INTO NAME L_PAREN . columns R_PAREN VALUES L_PAREN vals R_PAREN
    (41) columns -> . columns COMMA column
    (42) columns -> . columns COMMA column POINT column
    (43) columns -> . column POINT column
    (44) columns -> . column
    (45) column -> . TIMES
    (46) column -> . NAME
    (47) column -> . case_statement
    (48) column -> . call_function_prod
    (49) column -> . if_statement NAME
    (50) column -> . a NAME
    (78) case_statement -> . CASE when_statements END NAME
    (115) call_function_prod -> . HOY L_PAREN R_PAREN
    (116) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (117) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (118) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (119) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (120) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    TIMES           shift and go to state 67
    NAME            shift and go to state 64
    CASE            shift and go to state 71
    HOY             shift and go to state 72
    CONCATENAR      shift and go to state 74
    SUBSTRAER       shift and go to state 75
    CONTAR          shift and go to state 76
    SUMA            shift and go to state 77
    CAS             shift and go to state 78
    IF              shift and go to state 31
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    columns                        shift and go to state 228
    column                         shift and go to state 66
    case_statement                 shift and go to state 68
    call_function_prod             shift and go to state 69
    if_statement                   shift and go to state 70
    a                              shift and go to state 65
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 196

    (61) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type

    COLUMN          shift and go to state 229


state 197

    (62) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME

    COLUMN          shift and go to state 230


state 198

    (63) if_statement -> IF a THEN statements . END IF
    (64) if_statement -> IF a THEN statements . ELSE statements END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 231
    ELSE            shift and go to state 232
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 199

    (65) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 233
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 200

    (51) vals -> vals COMMA . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 234
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 201

    (69) args -> args COMMA . ID ASSIGN a

    ID              shift and go to state 235


state 202

    (70) args -> ID ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 236
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 203

    (74) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 237


state 204

    (72) update_statement -> UPDATE NAME SET column_assignments . WHERE a
    (73) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 238
    COMMA           shift and go to state 239


state 205

    (75) while_statement -> WHILE a BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 240
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 206

    (77) delete_statement -> DELETE FROM NAME WHERE . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 241
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 207

    (32) property -> NAME . type null_prod PRIMARY KEY
    (33) property -> NAME . type null_prod
    (34) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 242

state 208

    (29) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN
    (30) properties -> properties . COMMA property

    R_PAREN         shift and go to state 243
    COMMA           shift and go to state 244


state 209

    (31) properties -> property .

    R_PAREN         reduce using rule 31 (properties -> property .)
    COMMA           reduce using rule 31 (properties -> property .)


state 210

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END
    (57) parameters -> parameters . COMMA ID AS type
    (58) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 245
    COMMA           shift and go to state 246


state 211

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 247


state 212

    (59) parameters -> ID . type
    (60) parameters -> ID . AS type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 249
    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 248

state 213

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END
    (57) parameters -> parameters . COMMA ID AS type
    (58) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 250
    COMMA           shift and go to state 246


state 214

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN . AS BEGIN statements END

    AS              shift and go to state 251


state 215

    (85) type -> NCHAR L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 252
    OR              shift and go to state 122


state 216

    (86) type -> NVARCHAR L_PAREN a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 253
    OR              shift and go to state 122


state 217

    (27) assignments -> assignments COMMA ID ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 254
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 218

    (39) select_statement -> SELECT columns FROM NAME WHERE . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 255
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 219

    (42) columns -> columns COMMA column POINT . column
    (45) column -> . TIMES
    (46) column -> . NAME
    (47) column -> . case_statement
    (48) column -> . call_function_prod
    (49) column -> . if_statement NAME
    (50) column -> . a NAME
    (78) case_statement -> . CASE when_statements END NAME
    (115) call_function_prod -> . HOY L_PAREN R_PAREN
    (116) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (117) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (118) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (119) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (120) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    TIMES           shift and go to state 67
    NAME            shift and go to state 64
    CASE            shift and go to state 71
    HOY             shift and go to state 72
    CONCATENAR      shift and go to state 74
    SUBSTRAER       shift and go to state 75
    CONTAR          shift and go to state 76
    SUMA            shift and go to state 77
    CAS             shift and go to state 78
    IF              shift and go to state 31
    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    column                         shift and go to state 256
    case_statement                 shift and go to state 68
    call_function_prod             shift and go to state 69
    if_statement                   shift and go to state 70
    a                              shift and go to state 65
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 220

    (78) case_statement -> CASE when_statements END NAME .

    POINT           reduce using rule 78 (case_statement -> CASE when_statements END NAME .)
    FROM            reduce using rule 78 (case_statement -> CASE when_statements END NAME .)
    COMMA           reduce using rule 78 (case_statement -> CASE when_statements END NAME .)
    R_PAREN         reduce using rule 78 (case_statement -> CASE when_statements END NAME .)


state 221

    (79) when_statements -> WHEN a THEN . a when_statements
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 257
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 222

    (80) when_statements -> ELSE THEN a .
    (87) a -> a . OR b

    END             reduce using rule 80 (when_statements -> ELSE THEN a .)
    OR              shift and go to state 122


state 223

    (116) call_function_prod -> CONCATENAR L_PAREN a COMMA . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 258
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 224

    (117) call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .

    POINT           reduce using rule 117 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    FROM            reduce using rule 117 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    COMMA           reduce using rule 117 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 117 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)


state 225

    (118) call_function_prod -> CONTAR L_PAREN a R_PAREN .

    POINT           reduce using rule 118 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    FROM            reduce using rule 118 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 118 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 118 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)


state 226

    (119) call_function_prod -> SUMA L_PAREN a R_PAREN .

    POINT           reduce using rule 119 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    FROM            reduce using rule 119 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    COMMA           reduce using rule 119 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 119 (call_function_prod -> SUMA L_PAREN a R_PAREN .)


state 227

    (120) call_function_prod -> CAS L_PAREN a AS . type R_PAREN
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 259

state 228

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns . R_PAREN VALUES L_PAREN vals R_PAREN
    (41) columns -> columns . COMMA column
    (42) columns -> columns . COMMA column POINT column

    R_PAREN         shift and go to state 260
    COMMA           shift and go to state 120


state 229

    (61) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type

    NAME            shift and go to state 261


state 230

    (62) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME

    NAME            shift and go to state 262


state 231

    (63) if_statement -> IF a THEN statements END . IF

    IF              shift and go to state 263


state 232

    (64) if_statement -> IF a THEN statements ELSE . statements END IF
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 264

state 233

    (65) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN
    (87) a -> a . OR b

    COMMA           shift and go to state 265
    OR              shift and go to state 122


state 234

    (51) vals -> vals COMMA a .
    (87) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 51 (vals -> vals COMMA a .)
    NOT_EQ          reduce using rule 51 (vals -> vals COMMA a .)
    LESS_THAN       reduce using rule 51 (vals -> vals COMMA a .)
    GREATER_THAN    reduce using rule 51 (vals -> vals COMMA a .)
    LESS_EQ         reduce using rule 51 (vals -> vals COMMA a .)
    GREATER_EQ      reduce using rule 51 (vals -> vals COMMA a .)
    AND             reduce using rule 51 (vals -> vals COMMA a .)
    NAME            reduce using rule 51 (vals -> vals COMMA a .)
    SEMICOLON       reduce using rule 51 (vals -> vals COMMA a .)
    THEN            reduce using rule 51 (vals -> vals COMMA a .)
    BEGIN           reduce using rule 51 (vals -> vals COMMA a .)
    R_PAREN         reduce using rule 51 (vals -> vals COMMA a .)
    COMMA           reduce using rule 51 (vals -> vals COMMA a .)
    TIMES           reduce using rule 51 (vals -> vals COMMA a .)
    DIVIDE          reduce using rule 51 (vals -> vals COMMA a .)
    PLUS            reduce using rule 51 (vals -> vals COMMA a .)
    MINUS           reduce using rule 51 (vals -> vals COMMA a .)
    AS              reduce using rule 51 (vals -> vals COMMA a .)
    END             reduce using rule 51 (vals -> vals COMMA a .)
    WHEN            reduce using rule 51 (vals -> vals COMMA a .)
    ELSE            reduce using rule 51 (vals -> vals COMMA a .)
    WHERE           reduce using rule 51 (vals -> vals COMMA a .)
    OR              shift and go to state 122

  ! OR              [ reduce using rule 51 (vals -> vals COMMA a .) ]


state 235

    (69) args -> args COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 266


state 236

    (70) args -> ID ASSIGN a .
    (87) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 70 (args -> ID ASSIGN a .)
    NOT_EQ          reduce using rule 70 (args -> ID ASSIGN a .)
    LESS_THAN       reduce using rule 70 (args -> ID ASSIGN a .)
    GREATER_THAN    reduce using rule 70 (args -> ID ASSIGN a .)
    LESS_EQ         reduce using rule 70 (args -> ID ASSIGN a .)
    GREATER_EQ      reduce using rule 70 (args -> ID ASSIGN a .)
    AND             reduce using rule 70 (args -> ID ASSIGN a .)
    NAME            reduce using rule 70 (args -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 70 (args -> ID ASSIGN a .)
    THEN            reduce using rule 70 (args -> ID ASSIGN a .)
    BEGIN           reduce using rule 70 (args -> ID ASSIGN a .)
    R_PAREN         reduce using rule 70 (args -> ID ASSIGN a .)
    COMMA           reduce using rule 70 (args -> ID ASSIGN a .)
    TIMES           reduce using rule 70 (args -> ID ASSIGN a .)
    DIVIDE          reduce using rule 70 (args -> ID ASSIGN a .)
    PLUS            reduce using rule 70 (args -> ID ASSIGN a .)
    MINUS           reduce using rule 70 (args -> ID ASSIGN a .)
    AS              reduce using rule 70 (args -> ID ASSIGN a .)
    END             reduce using rule 70 (args -> ID ASSIGN a .)
    WHEN            reduce using rule 70 (args -> ID ASSIGN a .)
    ELSE            reduce using rule 70 (args -> ID ASSIGN a .)
    WHERE           reduce using rule 70 (args -> ID ASSIGN a .)
    OR              shift and go to state 122

  ! OR              [ reduce using rule 70 (args -> ID ASSIGN a .) ]


state 237

    (74) column_assignments -> NAME ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 267
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 238

    (72) update_statement -> UPDATE NAME SET column_assignments WHERE . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 268
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 239

    (73) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 269


state 240

    (75) while_statement -> WHILE a BEGIN statements END .

    SEMICOLON       reduce using rule 75 (while_statement -> WHILE a BEGIN statements END .)


state 241

    (77) delete_statement -> DELETE FROM NAME WHERE a .
    (87) a -> a . OR b

    SEMICOLON       reduce using rule 77 (delete_statement -> DELETE FROM NAME WHERE a .)
    OR              shift and go to state 122


state 242

    (32) property -> NAME type . null_prod PRIMARY KEY
    (33) property -> NAME type . null_prod
    (34) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (35) null_prod -> . NOT NULL
    (36) null_prod -> . NULL
    (37) null_prod -> .

    NOT             shift and go to state 271
    NULL            shift and go to state 272
    PRIMARY         reduce using rule 37 (null_prod -> .)
    REFERENCE       reduce using rule 37 (null_prod -> .)
    R_PAREN         reduce using rule 37 (null_prod -> .)
    COMMA           reduce using rule 37 (null_prod -> .)

    null_prod                      shift and go to state 270

state 243

    (29) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .

    SEMICOLON       reduce using rule 29 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .)


state 244

    (30) properties -> properties COMMA . property
    (32) property -> . NAME type null_prod PRIMARY KEY
    (33) property -> . NAME type null_prod
    (34) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 207

    property                       shift and go to state 273

state 245

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 274


state 246

    (57) parameters -> parameters COMMA . ID AS type
    (58) parameters -> parameters COMMA . ID type

    ID              shift and go to state 275


state 247

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN . type AS BEGIN statements END
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 276

state 248

    (59) parameters -> ID type .

    R_PAREN         reduce using rule 59 (parameters -> ID type .)
    COMMA           reduce using rule 59 (parameters -> ID type .)


state 249

    (60) parameters -> ID AS . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 277

state 250

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END

    AS              shift and go to state 278


state 251

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 279


state 252

    (85) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 85 (type -> NCHAR L_PAREN a R_PAREN .)


state 253

    (86) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 86 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 254

    (27) assignments -> assignments COMMA ID ASSIGN a .
    (87) a -> a . OR b

    COMMA           reduce using rule 27 (assignments -> assignments COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 27 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 122


state 255

    (39) select_statement -> SELECT columns FROM NAME WHERE a .
    (87) a -> a . OR b

    SEMICOLON       reduce using rule 39 (select_statement -> SELECT columns FROM NAME WHERE a .)
    OR              shift and go to state 122


state 256

    (42) columns -> columns COMMA column POINT column .

    FROM            reduce using rule 42 (columns -> columns COMMA column POINT column .)
    COMMA           reduce using rule 42 (columns -> columns COMMA column POINT column .)
    R_PAREN         reduce using rule 42 (columns -> columns COMMA column POINT column .)


state 257

    (79) when_statements -> WHEN a THEN a . when_statements
    (87) a -> a . OR b
    (79) when_statements -> . WHEN a THEN a when_statements
    (80) when_statements -> . ELSE THEN a

    OR              shift and go to state 122
    WHEN            shift and go to state 126
    ELSE            shift and go to state 127

    when_statements                shift and go to state 280

state 258

    (116) call_function_prod -> CONCATENAR L_PAREN a COMMA a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 281
    OR              shift and go to state 122


state 259

    (120) call_function_prod -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 282


state 260

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN . VALUES L_PAREN vals R_PAREN

    VALUES          shift and go to state 283


state 261

    (61) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 284

state 262

    (62) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .

    SEMICOLON       reduce using rule 62 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .)


state 263

    (63) if_statement -> IF a THEN statements END IF .

    SEMICOLON       reduce using rule 63 (if_statement -> IF a THEN statements END IF .)
    NAME            reduce using rule 63 (if_statement -> IF a THEN statements END IF .)


state 264

    (64) if_statement -> IF a THEN statements ELSE statements . END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 285
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 265

    (65) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 286
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 266

    (69) args -> args COMMA ID ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 287
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 267

    (74) column_assignments -> NAME ASSIGN a .
    (87) a -> a . OR b

    WHERE           reduce using rule 74 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 74 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 122


state 268

    (72) update_statement -> UPDATE NAME SET column_assignments WHERE a .
    (87) a -> a . OR b

    SEMICOLON       reduce using rule 72 (update_statement -> UPDATE NAME SET column_assignments WHERE a .)
    OR              shift and go to state 122


state 269

    (73) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 288


state 270

    (32) property -> NAME type null_prod . PRIMARY KEY
    (33) property -> NAME type null_prod .
    (34) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 289
    R_PAREN         reduce using rule 33 (property -> NAME type null_prod .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 290


state 271

    (35) null_prod -> NOT . NULL

    NULL            shift and go to state 291


state 272

    (36) null_prod -> NULL .

    PRIMARY         reduce using rule 36 (null_prod -> NULL .)
    REFERENCE       reduce using rule 36 (null_prod -> NULL .)
    R_PAREN         reduce using rule 36 (null_prod -> NULL .)
    COMMA           reduce using rule 36 (null_prod -> NULL .)


state 273

    (30) properties -> properties COMMA property .

    R_PAREN         reduce using rule 30 (properties -> properties COMMA property .)
    COMMA           reduce using rule 30 (properties -> properties COMMA property .)


state 274

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 292

state 275

    (57) parameters -> parameters COMMA ID . AS type
    (58) parameters -> parameters COMMA ID . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 293
    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 294

state 276

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 295


state 277

    (60) parameters -> ID AS type .

    R_PAREN         reduce using rule 60 (parameters -> ID AS type .)
    COMMA           reduce using rule 60 (parameters -> ID AS type .)


state 278

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 296


state 279

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 297

state 280

    (79) when_statements -> WHEN a THEN a when_statements .

    END             reduce using rule 79 (when_statements -> WHEN a THEN a when_statements .)


state 281

    (116) call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .

    POINT           reduce using rule 116 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    FROM            reduce using rule 116 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    COMMA           reduce using rule 116 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    R_PAREN         reduce using rule 116 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)


state 282

    (120) call_function_prod -> CAS L_PAREN a AS type R_PAREN .

    POINT           reduce using rule 120 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    FROM            reduce using rule 120 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 120 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 120 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)


state 283

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES . L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 298


state 284

    (61) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .

    SEMICOLON       reduce using rule 61 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .)


state 285

    (64) if_statement -> IF a THEN statements ELSE statements END . IF

    IF              shift and go to state 299


state 286

    (65) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN
    (87) a -> a . OR b

    R_PAREN         shift and go to state 300
    OR              shift and go to state 122


state 287

    (69) args -> args COMMA ID ASSIGN a .
    (87) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    NOT_EQ          reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    LESS_THAN       reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    GREATER_THAN    reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    LESS_EQ         reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    GREATER_EQ      reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    AND             reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    NAME            reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    THEN            reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    BEGIN           reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    R_PAREN         reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    COMMA           reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    TIMES           reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    DIVIDE          reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    PLUS            reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    MINUS           reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    AS              reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    END             reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    WHEN            reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    ELSE            reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    WHERE           reduce using rule 69 (args -> args COMMA ID ASSIGN a .)
    OR              shift and go to state 122

  ! OR              [ reduce using rule 69 (args -> args COMMA ID ASSIGN a .) ]


state 288

    (73) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    a                              shift and go to state 301
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 289

    (32) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 302


state 290

    (34) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 303


state 291

    (35) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 35 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 35 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 35 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 35 (null_prod -> NOT NULL .)


state 292

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 304


state 293

    (57) parameters -> parameters COMMA ID AS . type
    (81) type -> . INT
    (82) type -> . DECIMAL
    (83) type -> . DATE
    (84) type -> . DATETIME
    (85) type -> . NCHAR L_PAREN a R_PAREN
    (86) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 111
    DECIMAL         shift and go to state 112
    DATE            shift and go to state 113
    DATETIME        shift and go to state 114
    NCHAR           shift and go to state 115
    NVARCHAR        shift and go to state 116

    type                           shift and go to state 305

state 294

    (58) parameters -> parameters COMMA ID type .

    R_PAREN         reduce using rule 58 (parameters -> parameters COMMA ID type .)
    COMMA           reduce using rule 58 (parameters -> parameters COMMA ID type .)


state 295

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 306


state 296

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 307

state 297

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 308
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 298

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN . vals R_PAREN
    (51) vals -> . vals COMMA a
    (52) vals -> . a
    (87) a -> . a OR b
    (88) a -> . b
    (89) b -> . b AND c
    (90) b -> . c
    (91) c -> . NOT_SIGN d
    (92) c -> . d
    (93) d -> . d EQUALS e
    (94) d -> . d NOT_EQ e
    (95) d -> . d LESS_THAN e
    (96) d -> . d GREATER_THAN e
    (97) d -> . d LESS_EQ e
    (98) d -> . d GREATER_EQ e
    (99) d -> . e
    (100) e -> . e PLUS f
    (101) e -> . e MINUS f
    (102) e -> . f
    (103) f -> . f TIMES g
    (104) f -> . f DIVIDE g
    (105) f -> . g
    (106) g -> . MINUS h
    (107) g -> . h
    (108) h -> . INTEGER_VALUE
    (109) h -> . DECIMAL_VALUE
    (110) h -> . STRING
    (111) h -> . ID
    (112) h -> . NAME
    (113) h -> . L_PAREN a R_PAREN
    (114) h -> . exec_statement
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME

    NOT_SIGN        shift and go to state 81
    MINUS           shift and go to state 85
    INTEGER_VALUE   shift and go to state 88
    DECIMAL_VALUE   shift and go to state 89
    STRING          shift and go to state 90
    ID              shift and go to state 91
    NAME            shift and go to state 95
    L_PAREN         shift and go to state 73
    EXEC            shift and go to state 32

    vals                           shift and go to state 309
    a                              shift and go to state 155
    b                              shift and go to state 79
    c                              shift and go to state 80
    d                              shift and go to state 82
    e                              shift and go to state 83
    f                              shift and go to state 84
    g                              shift and go to state 86
    h                              shift and go to state 87
    exec_statement                 shift and go to state 92

state 299

    (64) if_statement -> IF a THEN statements ELSE statements END IF .

    SEMICOLON       reduce using rule 64 (if_statement -> IF a THEN statements ELSE statements END IF .)
    NAME            reduce using rule 64 (if_statement -> IF a THEN statements ELSE statements END IF .)


state 300

    (65) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .

    SEMICOLON       reduce using rule 65 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)
    NAME            reduce using rule 65 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)


state 301

    (73) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (87) a -> a . OR b

    WHERE           reduce using rule 73 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 73 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 122


state 302

    (32) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 32 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 32 (property -> NAME type null_prod PRIMARY KEY .)


state 303

    (34) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 310


state 304

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 311


state 305

    (57) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 57 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 57 (parameters -> parameters COMMA ID AS type .)


state 306

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 312

state 307

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 313
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 308

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 56 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .)


state 309

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals . R_PAREN
    (51) vals -> vals . COMMA a

    R_PAREN         shift and go to state 314
    COMMA           shift and go to state 200


state 310

    (34) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 315


state 311

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 316

state 312

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 317
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 313

    (55) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 55 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .)


state 314

    (40) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 40 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN .)


state 315

    (34) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 318


state 316

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . alter_table_statement SEMICOLON
    (14) statement -> . if_statement SEMICOLON
    (15) statement -> . exec_statement SEMICOLON
    (16) statement -> . drop_table_statement SEMICOLON
    (17) statement -> . update_statement SEMICOLON
    (18) statement -> . while_statement SEMICOLON
    (19) statement -> . truncate_statement SEMICOLON
    (20) statement -> . return_statement SEMICOLON
    (21) statement -> . delete_statement SEMICOLON
    (22) create_database_statement -> . CREATE DATA BASE NAME
    (23) use_statement -> . USE NAME
    (24) declare_statement -> . DECLARE ID AS type
    (25) declare_statement -> . DECLARE ID type
    (26) set_statement -> . SET assignments
    (29) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (38) select_statement -> . SELECT columns FROM NAME
    (39) select_statement -> . SELECT columns FROM NAME WHERE a
    (40) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN
    (53) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (55) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (61) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (62) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (63) if_statement -> . IF a THEN statements END IF
    (64) if_statement -> . IF a THEN statements ELSE statements END IF
    (65) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (66) exec_statement -> . EXEC NAME vals
    (67) exec_statement -> . EXEC NAME args
    (68) exec_statement -> . EXEC NAME
    (71) drop_table_statement -> . DROP TABLE NAME
    (72) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (75) while_statement -> . WHILE a BEGIN statements END
    (76) truncate_statement -> . TRUNCATE TABLE NAME
    (121) return_statement -> . RETURN a
    (77) delete_statement -> . DELETE FROM NAME WHERE a

    END             shift and go to state 319
    CREATE          shift and go to state 22
    USE             shift and go to state 23
    DECLARE         shift and go to state 24
    SET             shift and go to state 25
    SELECT          shift and go to state 26
    INSERT          shift and go to state 27
    ALTER           shift and go to state 29
    IF              shift and go to state 31
    EXEC            shift and go to state 32
    DROP            shift and go to state 30
    UPDATE          shift and go to state 33
    WHILE           shift and go to state 34
    TRUNCATE        shift and go to state 35
    RETURN          shift and go to state 28
    DELETE          shift and go to state 36

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    return_statement               shift and go to state 20
    delete_statement               shift and go to state 21

state 317

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 54 (create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .)


state 318

    (34) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 34 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 34 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 319

    (53) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 53 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 82 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for NAME in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 153 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 155 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 189 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 191 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 191 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 192 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 234 resolved as shift
WARNING: shift/reduce conflict for OR in state 236 resolved as shift
WARNING: shift/reduce conflict for OR in state 287 resolved as shift
