Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> create_database_statement
Rule 5     statement -> use_statement
Rule 6     statement -> declare_statement
Rule 7     statement -> set_statement
Rule 8     statement -> create_table_statement
Rule 9     statement -> select_statement
Rule 10    statement -> insert_statement
Rule 11    statement -> create_function_statement
Rule 12    statement -> create_procedure_statement
Rule 13    statement -> alter_table_statement
Rule 14    statement -> if_statement
Rule 15    statement -> exec_statement
Rule 16    statement -> drop_table_statement
Rule 17    statement -> update_statement
Rule 18    statement -> while_statement
Rule 19    statement -> truncate_statement
Rule 20    statement -> delete_statement
Rule 21    create_database_statement -> CREATE DATA BASE NAME SEMICOLON
Rule 22    use_statement -> USE NAME SEMICOLON
Rule 23    declare_statement -> DECLARE ID AS type SEMICOLON
Rule 24    declare_statement -> DECLARE ID type SEMICOLON
Rule 25    set_statement -> SET assignments SEMICOLON
Rule 26    assignments -> assignments COMMA ID ASSIGN a
Rule 27    assignments -> ID ASSIGN a
Rule 28    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
Rule 29    properties -> properties COMMA property
Rule 30    properties -> property
Rule 31    property -> NAME type null_prod PRIMARY KEY
Rule 32    property -> NAME type null_prod
Rule 33    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 34    null_prod -> NOT NULL
Rule 35    null_prod -> NULL
Rule 36    null_prod -> <empty>
Rule 37    select_statement -> SELECT columns FROM NAME SEMICOLON
Rule 38    select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON
Rule 39    insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
Rule 40    columns -> columns COMMA column
Rule 41    columns -> columns COMMA column POINT column
Rule 42    columns -> column POINT column
Rule 43    columns -> column
Rule 44    column -> TIMES
Rule 45    column -> NAME
Rule 46    column -> case_statement
Rule 47    column -> if_statement
Rule 48    column -> call_function_prod
Rule 49    column -> a NAME
Rule 50    vals -> vals COMMA a
Rule 51    vals -> a
Rule 52    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
Rule 53    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
Rule 54    parameters -> parameters COMMA ID AS type
Rule 55    parameters -> parameters COMMA ID type
Rule 56    parameters -> ID AS type
Rule 57    parameters -> ID type
Rule 58    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
Rule 59    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
Rule 60    if_statement -> IF a THEN statements END IF SEMICOLON
Rule 61    if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON
Rule 62    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
Rule 63    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
Rule 64    exec_statement -> EXEC NAME vals SEMICOLON
Rule 65    drop_table_statement -> DROP TABLE NAME SEMICOLON
Rule 66    update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON
Rule 67    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 68    column_assignments -> NAME ASSIGN a
Rule 69    while_statement -> WHILE a BEGIN statements END SEMICOLON
Rule 70    truncate_statement -> TRUNCATE TABLE NAME SEMICOLON
Rule 71    delete_statement -> DELETE FROM NAME WHERE a SEMICOLON
Rule 72    case_statement -> CASE when_statements END NAME
Rule 73    when_statements -> WHEN a THEN a when_statements
Rule 74    when_statements -> ELSE THEN a
Rule 75    type -> INT
Rule 76    type -> DECIMAL
Rule 77    type -> DATE
Rule 78    type -> DATETIME
Rule 79    type -> NCHAR L_PAREN a R_PAREN
Rule 80    type -> NVARCHAR L_PAREN a R_PAREN
Rule 81    a -> a OR b
Rule 82    a -> b
Rule 83    b -> b AND c
Rule 84    b -> c
Rule 85    c -> NOT_SIGN d
Rule 86    c -> d
Rule 87    d -> d EQUALS e
Rule 88    d -> d NOT_EQ e
Rule 89    d -> d LESS_THAN e
Rule 90    d -> d GREATER_THAN e
Rule 91    d -> d LESS_EQ e
Rule 92    d -> d GREATER_EQ e
Rule 93    d -> e
Rule 94    e -> e PLUS f
Rule 95    e -> e MINUS f
Rule 96    e -> f
Rule 97    f -> f TIMES g
Rule 98    f -> f DIVIDE g
Rule 99    f -> g
Rule 100   g -> MINUS h
Rule 101   g -> h
Rule 102   h -> INTEGER_VALUE
Rule 103   h -> DECIMAL_VALUE
Rule 104   h -> STRING
Rule 105   h -> ID
Rule 106   h -> NAME
Rule 107   h -> if_statement
Rule 108   call_function_prod -> HOY L_PAREN R_PAREN
Rule 109   call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN
Rule 110   call_function_prod -> SUBSTRAER L_PAREN a R_PAREN
Rule 111   call_function_prod -> CONTAR L_PAREN a R_PAREN
Rule 112   call_function_prod -> SUMA L_PAREN a R_PAREN
Rule 113   call_function_prod -> CAS L_PAREN a AS type R_PAREN

Terminals, with rules where they appear

ADD                  : 58
ALTER                : 58 59
AND                  : 83
AS                   : 23 52 53 54 56 63 113
ASSIGN               : 26 27 67 68
BASE                 : 21
BEGIN                : 52 53 69
CAS                  : 113
CASE                 : 72
COLUMN               : 58 59
COMMA                : 26 29 40 41 50 54 55 62 62 63 63 67 109
CONCATENAR           : 109
CONTAR               : 111
CREATE               : 21 28 52 53
DATA                 : 21
DATE                 : 77
DATETIME             : 78
DECIMAL              : 76
DECIMAL_VALUE        : 103
DECLARE              : 23 24
DELETE               : 71
DIVIDE               : 98
DROP                 : 59 65
ELSE                 : 61 74
END                  : 52 53 60 61 69 72
EQUALS               : 87
EXEC                 : 64
FROM                 : 37 38 71
FUNCTION             : 52
GREATER_EQ           : 92
GREATER_THAN         : 90
HOY                  : 108
ID                   : 23 24 26 27 54 55 56 57 105
IF                   : 60 60 61 61 62 63
INSERT               : 39
INT                  : 75
INTEGER_VALUE        : 102
INTO                 : 39
KEY                  : 31
LESS_EQ              : 91
LESS_THAN            : 89
L_PAREN              : 28 33 39 39 52 53 62 63 79 80 108 109 110 111 112 113
MINUS                : 95 100
NAME                 : 21 22 28 31 32 33 33 33 37 38 39 45 49 52 53 58 58 59 59 63 64 65 66 67 68 70 71 72 106
NCHAR                : 79
NOT                  : 34
NOT_EQ               : 88
NOT_SIGN             : 85
NULL                 : 34 35
NVARCHAR             : 80
OR                   : 81
PLUS                 : 94
POINT                : 41 42
PRIMARY              : 31
PROCEDURE            : 53
REFERENCE            : 33
RETURN               : 52 52
R_PAREN              : 28 33 39 39 52 53 62 63 79 80 108 109 110 111 112 113
SELECT               : 37 38
SEMICOLON            : 21 22 23 24 25 28 37 38 39 52 53 58 59 60 61 62 64 65 66 69 70 71
SET                  : 25 66
STRING               : 104
SUBSTRAER            : 110
SUMA                 : 112
TABLE                : 28 58 59 65 70
THEN                 : 60 61 73 74
TIMES                : 44 97
TRUNCATE             : 70
UPDATE               : 66
USE                  : 22
VALUES               : 39
WHEN                 : 73
WHERE                : 38 66 71
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

a                    : 26 27 38 49 50 51 52 60 61 62 62 62 63 63 63 66 67 68 69 71 73 73 74 79 80 81 109 109 110 111 112 113
alter_table_statement : 13
assignments          : 25 26
b                    : 81 82 83
c                    : 83 84
call_function_prod   : 48
case_statement       : 46
column               : 40 41 41 42 42 43
column_assignments   : 66 67
columns              : 37 38 39 40 41
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 85 86 87 88 89 90 91 92
declare_statement    : 6
delete_statement     : 20
drop_table_statement : 16
e                    : 87 88 89 90 91 92 93 94 95
exec_statement       : 15
f                    : 94 95 96 97 98
g                    : 97 98 99
h                    : 100 101
if_statement         : 14 47 107
init                 : 0
insert_statement     : 10
null_prod            : 31 32 33
parameters           : 52 53 54 55
properties           : 28 29
property             : 29 30
select_statement     : 9
set_statement        : 7
statement            : 2
statements           : 1 2 52 53 60 61 61 69
truncate_statement   : 19
type                 : 23 24 31 32 33 52 54 55 56 57 58 113
update_statement     : 17
use_statement        : 5
vals                 : 39 50 64
when_statements      : 72 73
while_statement      : 18

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    init                           shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 3

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> create_database_statement .

    CREATE          reduce using rule 4 (statement -> create_database_statement .)
    USE             reduce using rule 4 (statement -> create_database_statement .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement .)
    SET             reduce using rule 4 (statement -> create_database_statement .)
    SELECT          reduce using rule 4 (statement -> create_database_statement .)
    INSERT          reduce using rule 4 (statement -> create_database_statement .)
    ALTER           reduce using rule 4 (statement -> create_database_statement .)
    IF              reduce using rule 4 (statement -> create_database_statement .)
    EXEC            reduce using rule 4 (statement -> create_database_statement .)
    DROP            reduce using rule 4 (statement -> create_database_statement .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement .)
    WHILE           reduce using rule 4 (statement -> create_database_statement .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement .)
    DELETE          reduce using rule 4 (statement -> create_database_statement .)
    $end            reduce using rule 4 (statement -> create_database_statement .)
    END             reduce using rule 4 (statement -> create_database_statement .)
    ELSE            reduce using rule 4 (statement -> create_database_statement .)
    RETURN          reduce using rule 4 (statement -> create_database_statement .)


state 5

    (5) statement -> use_statement .

    CREATE          reduce using rule 5 (statement -> use_statement .)
    USE             reduce using rule 5 (statement -> use_statement .)
    DECLARE         reduce using rule 5 (statement -> use_statement .)
    SET             reduce using rule 5 (statement -> use_statement .)
    SELECT          reduce using rule 5 (statement -> use_statement .)
    INSERT          reduce using rule 5 (statement -> use_statement .)
    ALTER           reduce using rule 5 (statement -> use_statement .)
    IF              reduce using rule 5 (statement -> use_statement .)
    EXEC            reduce using rule 5 (statement -> use_statement .)
    DROP            reduce using rule 5 (statement -> use_statement .)
    UPDATE          reduce using rule 5 (statement -> use_statement .)
    WHILE           reduce using rule 5 (statement -> use_statement .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement .)
    DELETE          reduce using rule 5 (statement -> use_statement .)
    $end            reduce using rule 5 (statement -> use_statement .)
    END             reduce using rule 5 (statement -> use_statement .)
    ELSE            reduce using rule 5 (statement -> use_statement .)
    RETURN          reduce using rule 5 (statement -> use_statement .)


state 6

    (6) statement -> declare_statement .

    CREATE          reduce using rule 6 (statement -> declare_statement .)
    USE             reduce using rule 6 (statement -> declare_statement .)
    DECLARE         reduce using rule 6 (statement -> declare_statement .)
    SET             reduce using rule 6 (statement -> declare_statement .)
    SELECT          reduce using rule 6 (statement -> declare_statement .)
    INSERT          reduce using rule 6 (statement -> declare_statement .)
    ALTER           reduce using rule 6 (statement -> declare_statement .)
    IF              reduce using rule 6 (statement -> declare_statement .)
    EXEC            reduce using rule 6 (statement -> declare_statement .)
    DROP            reduce using rule 6 (statement -> declare_statement .)
    UPDATE          reduce using rule 6 (statement -> declare_statement .)
    WHILE           reduce using rule 6 (statement -> declare_statement .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement .)
    DELETE          reduce using rule 6 (statement -> declare_statement .)
    $end            reduce using rule 6 (statement -> declare_statement .)
    END             reduce using rule 6 (statement -> declare_statement .)
    ELSE            reduce using rule 6 (statement -> declare_statement .)
    RETURN          reduce using rule 6 (statement -> declare_statement .)


state 7

    (7) statement -> set_statement .

    CREATE          reduce using rule 7 (statement -> set_statement .)
    USE             reduce using rule 7 (statement -> set_statement .)
    DECLARE         reduce using rule 7 (statement -> set_statement .)
    SET             reduce using rule 7 (statement -> set_statement .)
    SELECT          reduce using rule 7 (statement -> set_statement .)
    INSERT          reduce using rule 7 (statement -> set_statement .)
    ALTER           reduce using rule 7 (statement -> set_statement .)
    IF              reduce using rule 7 (statement -> set_statement .)
    EXEC            reduce using rule 7 (statement -> set_statement .)
    DROP            reduce using rule 7 (statement -> set_statement .)
    UPDATE          reduce using rule 7 (statement -> set_statement .)
    WHILE           reduce using rule 7 (statement -> set_statement .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement .)
    DELETE          reduce using rule 7 (statement -> set_statement .)
    $end            reduce using rule 7 (statement -> set_statement .)
    END             reduce using rule 7 (statement -> set_statement .)
    ELSE            reduce using rule 7 (statement -> set_statement .)
    RETURN          reduce using rule 7 (statement -> set_statement .)


state 8

    (8) statement -> create_table_statement .

    CREATE          reduce using rule 8 (statement -> create_table_statement .)
    USE             reduce using rule 8 (statement -> create_table_statement .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement .)
    SET             reduce using rule 8 (statement -> create_table_statement .)
    SELECT          reduce using rule 8 (statement -> create_table_statement .)
    INSERT          reduce using rule 8 (statement -> create_table_statement .)
    ALTER           reduce using rule 8 (statement -> create_table_statement .)
    IF              reduce using rule 8 (statement -> create_table_statement .)
    EXEC            reduce using rule 8 (statement -> create_table_statement .)
    DROP            reduce using rule 8 (statement -> create_table_statement .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement .)
    WHILE           reduce using rule 8 (statement -> create_table_statement .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement .)
    DELETE          reduce using rule 8 (statement -> create_table_statement .)
    $end            reduce using rule 8 (statement -> create_table_statement .)
    END             reduce using rule 8 (statement -> create_table_statement .)
    ELSE            reduce using rule 8 (statement -> create_table_statement .)
    RETURN          reduce using rule 8 (statement -> create_table_statement .)


state 9

    (9) statement -> select_statement .

    CREATE          reduce using rule 9 (statement -> select_statement .)
    USE             reduce using rule 9 (statement -> select_statement .)
    DECLARE         reduce using rule 9 (statement -> select_statement .)
    SET             reduce using rule 9 (statement -> select_statement .)
    SELECT          reduce using rule 9 (statement -> select_statement .)
    INSERT          reduce using rule 9 (statement -> select_statement .)
    ALTER           reduce using rule 9 (statement -> select_statement .)
    IF              reduce using rule 9 (statement -> select_statement .)
    EXEC            reduce using rule 9 (statement -> select_statement .)
    DROP            reduce using rule 9 (statement -> select_statement .)
    UPDATE          reduce using rule 9 (statement -> select_statement .)
    WHILE           reduce using rule 9 (statement -> select_statement .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement .)
    DELETE          reduce using rule 9 (statement -> select_statement .)
    $end            reduce using rule 9 (statement -> select_statement .)
    END             reduce using rule 9 (statement -> select_statement .)
    ELSE            reduce using rule 9 (statement -> select_statement .)
    RETURN          reduce using rule 9 (statement -> select_statement .)


state 10

    (10) statement -> insert_statement .

    CREATE          reduce using rule 10 (statement -> insert_statement .)
    USE             reduce using rule 10 (statement -> insert_statement .)
    DECLARE         reduce using rule 10 (statement -> insert_statement .)
    SET             reduce using rule 10 (statement -> insert_statement .)
    SELECT          reduce using rule 10 (statement -> insert_statement .)
    INSERT          reduce using rule 10 (statement -> insert_statement .)
    ALTER           reduce using rule 10 (statement -> insert_statement .)
    IF              reduce using rule 10 (statement -> insert_statement .)
    EXEC            reduce using rule 10 (statement -> insert_statement .)
    DROP            reduce using rule 10 (statement -> insert_statement .)
    UPDATE          reduce using rule 10 (statement -> insert_statement .)
    WHILE           reduce using rule 10 (statement -> insert_statement .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement .)
    DELETE          reduce using rule 10 (statement -> insert_statement .)
    $end            reduce using rule 10 (statement -> insert_statement .)
    END             reduce using rule 10 (statement -> insert_statement .)
    ELSE            reduce using rule 10 (statement -> insert_statement .)
    RETURN          reduce using rule 10 (statement -> insert_statement .)


state 11

    (11) statement -> create_function_statement .

    CREATE          reduce using rule 11 (statement -> create_function_statement .)
    USE             reduce using rule 11 (statement -> create_function_statement .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement .)
    SET             reduce using rule 11 (statement -> create_function_statement .)
    SELECT          reduce using rule 11 (statement -> create_function_statement .)
    INSERT          reduce using rule 11 (statement -> create_function_statement .)
    ALTER           reduce using rule 11 (statement -> create_function_statement .)
    IF              reduce using rule 11 (statement -> create_function_statement .)
    EXEC            reduce using rule 11 (statement -> create_function_statement .)
    DROP            reduce using rule 11 (statement -> create_function_statement .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement .)
    WHILE           reduce using rule 11 (statement -> create_function_statement .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement .)
    DELETE          reduce using rule 11 (statement -> create_function_statement .)
    $end            reduce using rule 11 (statement -> create_function_statement .)
    END             reduce using rule 11 (statement -> create_function_statement .)
    ELSE            reduce using rule 11 (statement -> create_function_statement .)
    RETURN          reduce using rule 11 (statement -> create_function_statement .)


state 12

    (12) statement -> create_procedure_statement .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement .)
    USE             reduce using rule 12 (statement -> create_procedure_statement .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement .)
    SET             reduce using rule 12 (statement -> create_procedure_statement .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement .)
    IF              reduce using rule 12 (statement -> create_procedure_statement .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement .)
    $end            reduce using rule 12 (statement -> create_procedure_statement .)
    END             reduce using rule 12 (statement -> create_procedure_statement .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement .)
    RETURN          reduce using rule 12 (statement -> create_procedure_statement .)


state 13

    (13) statement -> alter_table_statement .

    CREATE          reduce using rule 13 (statement -> alter_table_statement .)
    USE             reduce using rule 13 (statement -> alter_table_statement .)
    DECLARE         reduce using rule 13 (statement -> alter_table_statement .)
    SET             reduce using rule 13 (statement -> alter_table_statement .)
    SELECT          reduce using rule 13 (statement -> alter_table_statement .)
    INSERT          reduce using rule 13 (statement -> alter_table_statement .)
    ALTER           reduce using rule 13 (statement -> alter_table_statement .)
    IF              reduce using rule 13 (statement -> alter_table_statement .)
    EXEC            reduce using rule 13 (statement -> alter_table_statement .)
    DROP            reduce using rule 13 (statement -> alter_table_statement .)
    UPDATE          reduce using rule 13 (statement -> alter_table_statement .)
    WHILE           reduce using rule 13 (statement -> alter_table_statement .)
    TRUNCATE        reduce using rule 13 (statement -> alter_table_statement .)
    DELETE          reduce using rule 13 (statement -> alter_table_statement .)
    $end            reduce using rule 13 (statement -> alter_table_statement .)
    END             reduce using rule 13 (statement -> alter_table_statement .)
    ELSE            reduce using rule 13 (statement -> alter_table_statement .)
    RETURN          reduce using rule 13 (statement -> alter_table_statement .)


state 14

    (14) statement -> if_statement .

    CREATE          reduce using rule 14 (statement -> if_statement .)
    USE             reduce using rule 14 (statement -> if_statement .)
    DECLARE         reduce using rule 14 (statement -> if_statement .)
    SET             reduce using rule 14 (statement -> if_statement .)
    SELECT          reduce using rule 14 (statement -> if_statement .)
    INSERT          reduce using rule 14 (statement -> if_statement .)
    ALTER           reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    EXEC            reduce using rule 14 (statement -> if_statement .)
    DROP            reduce using rule 14 (statement -> if_statement .)
    UPDATE          reduce using rule 14 (statement -> if_statement .)
    WHILE           reduce using rule 14 (statement -> if_statement .)
    TRUNCATE        reduce using rule 14 (statement -> if_statement .)
    DELETE          reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    END             reduce using rule 14 (statement -> if_statement .)
    ELSE            reduce using rule 14 (statement -> if_statement .)
    RETURN          reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> exec_statement .

    CREATE          reduce using rule 15 (statement -> exec_statement .)
    USE             reduce using rule 15 (statement -> exec_statement .)
    DECLARE         reduce using rule 15 (statement -> exec_statement .)
    SET             reduce using rule 15 (statement -> exec_statement .)
    SELECT          reduce using rule 15 (statement -> exec_statement .)
    INSERT          reduce using rule 15 (statement -> exec_statement .)
    ALTER           reduce using rule 15 (statement -> exec_statement .)
    IF              reduce using rule 15 (statement -> exec_statement .)
    EXEC            reduce using rule 15 (statement -> exec_statement .)
    DROP            reduce using rule 15 (statement -> exec_statement .)
    UPDATE          reduce using rule 15 (statement -> exec_statement .)
    WHILE           reduce using rule 15 (statement -> exec_statement .)
    TRUNCATE        reduce using rule 15 (statement -> exec_statement .)
    DELETE          reduce using rule 15 (statement -> exec_statement .)
    $end            reduce using rule 15 (statement -> exec_statement .)
    END             reduce using rule 15 (statement -> exec_statement .)
    ELSE            reduce using rule 15 (statement -> exec_statement .)
    RETURN          reduce using rule 15 (statement -> exec_statement .)


state 16

    (16) statement -> drop_table_statement .

    CREATE          reduce using rule 16 (statement -> drop_table_statement .)
    USE             reduce using rule 16 (statement -> drop_table_statement .)
    DECLARE         reduce using rule 16 (statement -> drop_table_statement .)
    SET             reduce using rule 16 (statement -> drop_table_statement .)
    SELECT          reduce using rule 16 (statement -> drop_table_statement .)
    INSERT          reduce using rule 16 (statement -> drop_table_statement .)
    ALTER           reduce using rule 16 (statement -> drop_table_statement .)
    IF              reduce using rule 16 (statement -> drop_table_statement .)
    EXEC            reduce using rule 16 (statement -> drop_table_statement .)
    DROP            reduce using rule 16 (statement -> drop_table_statement .)
    UPDATE          reduce using rule 16 (statement -> drop_table_statement .)
    WHILE           reduce using rule 16 (statement -> drop_table_statement .)
    TRUNCATE        reduce using rule 16 (statement -> drop_table_statement .)
    DELETE          reduce using rule 16 (statement -> drop_table_statement .)
    $end            reduce using rule 16 (statement -> drop_table_statement .)
    END             reduce using rule 16 (statement -> drop_table_statement .)
    ELSE            reduce using rule 16 (statement -> drop_table_statement .)
    RETURN          reduce using rule 16 (statement -> drop_table_statement .)


state 17

    (17) statement -> update_statement .

    CREATE          reduce using rule 17 (statement -> update_statement .)
    USE             reduce using rule 17 (statement -> update_statement .)
    DECLARE         reduce using rule 17 (statement -> update_statement .)
    SET             reduce using rule 17 (statement -> update_statement .)
    SELECT          reduce using rule 17 (statement -> update_statement .)
    INSERT          reduce using rule 17 (statement -> update_statement .)
    ALTER           reduce using rule 17 (statement -> update_statement .)
    IF              reduce using rule 17 (statement -> update_statement .)
    EXEC            reduce using rule 17 (statement -> update_statement .)
    DROP            reduce using rule 17 (statement -> update_statement .)
    UPDATE          reduce using rule 17 (statement -> update_statement .)
    WHILE           reduce using rule 17 (statement -> update_statement .)
    TRUNCATE        reduce using rule 17 (statement -> update_statement .)
    DELETE          reduce using rule 17 (statement -> update_statement .)
    $end            reduce using rule 17 (statement -> update_statement .)
    END             reduce using rule 17 (statement -> update_statement .)
    ELSE            reduce using rule 17 (statement -> update_statement .)
    RETURN          reduce using rule 17 (statement -> update_statement .)


state 18

    (18) statement -> while_statement .

    CREATE          reduce using rule 18 (statement -> while_statement .)
    USE             reduce using rule 18 (statement -> while_statement .)
    DECLARE         reduce using rule 18 (statement -> while_statement .)
    SET             reduce using rule 18 (statement -> while_statement .)
    SELECT          reduce using rule 18 (statement -> while_statement .)
    INSERT          reduce using rule 18 (statement -> while_statement .)
    ALTER           reduce using rule 18 (statement -> while_statement .)
    IF              reduce using rule 18 (statement -> while_statement .)
    EXEC            reduce using rule 18 (statement -> while_statement .)
    DROP            reduce using rule 18 (statement -> while_statement .)
    UPDATE          reduce using rule 18 (statement -> while_statement .)
    WHILE           reduce using rule 18 (statement -> while_statement .)
    TRUNCATE        reduce using rule 18 (statement -> while_statement .)
    DELETE          reduce using rule 18 (statement -> while_statement .)
    $end            reduce using rule 18 (statement -> while_statement .)
    END             reduce using rule 18 (statement -> while_statement .)
    ELSE            reduce using rule 18 (statement -> while_statement .)
    RETURN          reduce using rule 18 (statement -> while_statement .)


state 19

    (19) statement -> truncate_statement .

    CREATE          reduce using rule 19 (statement -> truncate_statement .)
    USE             reduce using rule 19 (statement -> truncate_statement .)
    DECLARE         reduce using rule 19 (statement -> truncate_statement .)
    SET             reduce using rule 19 (statement -> truncate_statement .)
    SELECT          reduce using rule 19 (statement -> truncate_statement .)
    INSERT          reduce using rule 19 (statement -> truncate_statement .)
    ALTER           reduce using rule 19 (statement -> truncate_statement .)
    IF              reduce using rule 19 (statement -> truncate_statement .)
    EXEC            reduce using rule 19 (statement -> truncate_statement .)
    DROP            reduce using rule 19 (statement -> truncate_statement .)
    UPDATE          reduce using rule 19 (statement -> truncate_statement .)
    WHILE           reduce using rule 19 (statement -> truncate_statement .)
    TRUNCATE        reduce using rule 19 (statement -> truncate_statement .)
    DELETE          reduce using rule 19 (statement -> truncate_statement .)
    $end            reduce using rule 19 (statement -> truncate_statement .)
    END             reduce using rule 19 (statement -> truncate_statement .)
    ELSE            reduce using rule 19 (statement -> truncate_statement .)
    RETURN          reduce using rule 19 (statement -> truncate_statement .)


state 20

    (20) statement -> delete_statement .

    CREATE          reduce using rule 20 (statement -> delete_statement .)
    USE             reduce using rule 20 (statement -> delete_statement .)
    DECLARE         reduce using rule 20 (statement -> delete_statement .)
    SET             reduce using rule 20 (statement -> delete_statement .)
    SELECT          reduce using rule 20 (statement -> delete_statement .)
    INSERT          reduce using rule 20 (statement -> delete_statement .)
    ALTER           reduce using rule 20 (statement -> delete_statement .)
    IF              reduce using rule 20 (statement -> delete_statement .)
    EXEC            reduce using rule 20 (statement -> delete_statement .)
    DROP            reduce using rule 20 (statement -> delete_statement .)
    UPDATE          reduce using rule 20 (statement -> delete_statement .)
    WHILE           reduce using rule 20 (statement -> delete_statement .)
    TRUNCATE        reduce using rule 20 (statement -> delete_statement .)
    DELETE          reduce using rule 20 (statement -> delete_statement .)
    $end            reduce using rule 20 (statement -> delete_statement .)
    END             reduce using rule 20 (statement -> delete_statement .)
    ELSE            reduce using rule 20 (statement -> delete_statement .)
    RETURN          reduce using rule 20 (statement -> delete_statement .)


state 21

    (21) create_database_statement -> CREATE . DATA BASE NAME SEMICOLON
    (28) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (52) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    DATA            shift and go to state 35
    TABLE           shift and go to state 36
    FUNCTION        shift and go to state 37
    PROCEDURE       shift and go to state 38


state 22

    (22) use_statement -> USE . NAME SEMICOLON

    NAME            shift and go to state 39


state 23

    (23) declare_statement -> DECLARE . ID AS type SEMICOLON
    (24) declare_statement -> DECLARE . ID type SEMICOLON

    ID              shift and go to state 40


state 24

    (25) set_statement -> SET . assignments SEMICOLON
    (26) assignments -> . assignments COMMA ID ASSIGN a
    (27) assignments -> . ID ASSIGN a

    ID              shift and go to state 42

    assignments                    shift and go to state 41

state 25

    (37) select_statement -> SELECT . columns FROM NAME SEMICOLON
    (38) select_statement -> SELECT . columns FROM NAME WHERE a SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . columns COMMA column POINT column
    (42) columns -> . column POINT column
    (43) columns -> . column
    (44) column -> . TIMES
    (45) column -> . NAME
    (46) column -> . case_statement
    (47) column -> . if_statement
    (48) column -> . call_function_prod
    (49) column -> . a NAME
    (72) case_statement -> . CASE when_statements END NAME
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (108) call_function_prod -> . HOY L_PAREN R_PAREN
    (109) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (110) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (111) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (112) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (113) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement

    TIMES           shift and go to state 47
    NAME            shift and go to state 44
    CASE            shift and go to state 51
    IF              shift and go to state 29
    HOY             shift and go to state 52
    CONCATENAR      shift and go to state 53
    SUBSTRAER       shift and go to state 54
    CONTAR          shift and go to state 55
    SUMA            shift and go to state 56
    CAS             shift and go to state 57
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70

    columns                        shift and go to state 43
    a                              shift and go to state 45
    column                         shift and go to state 46
    case_statement                 shift and go to state 48
    if_statement                   shift and go to state 49
    call_function_prod             shift and go to state 50
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66

state 26

    (39) insert_statement -> INSERT . INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    INTO            shift and go to state 71


state 27

    (58) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME SEMICOLON

    TABLE           shift and go to state 72


state 28

    (65) drop_table_statement -> DROP . TABLE NAME SEMICOLON

    TABLE           shift and go to state 73


state 29

    (60) if_statement -> IF . a THEN statements END IF SEMICOLON
    (61) if_statement -> IF . a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    L_PAREN         shift and go to state 75
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 74
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 30

    (64) exec_statement -> EXEC . NAME vals SEMICOLON

    NAME            shift and go to state 78


state 31

    (66) update_statement -> UPDATE . NAME SET column_assignments WHERE a SEMICOLON

    NAME            shift and go to state 79


state 32

    (69) while_statement -> WHILE . a BEGIN statements END SEMICOLON
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 80
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 33

    (70) truncate_statement -> TRUNCATE . TABLE NAME SEMICOLON

    TABLE           shift and go to state 81


state 34

    (71) delete_statement -> DELETE . FROM NAME WHERE a SEMICOLON

    FROM            shift and go to state 82


state 35

    (21) create_database_statement -> CREATE DATA . BASE NAME SEMICOLON

    BASE            shift and go to state 83


state 36

    (28) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN SEMICOLON

    NAME            shift and go to state 84


state 37

    (52) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON

    NAME            shift and go to state 85


state 38

    (53) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    NAME            shift and go to state 86


state 39

    (22) use_statement -> USE NAME . SEMICOLON

    SEMICOLON       shift and go to state 87


state 40

    (23) declare_statement -> DECLARE ID . AS type SEMICOLON
    (24) declare_statement -> DECLARE ID . type SEMICOLON
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 88
    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 89

state 41

    (25) set_statement -> SET assignments . SEMICOLON
    (26) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       shift and go to state 96
    COMMA           shift and go to state 97


state 42

    (27) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 98


state 43

    (37) select_statement -> SELECT columns . FROM NAME SEMICOLON
    (38) select_statement -> SELECT columns . FROM NAME WHERE a SEMICOLON
    (40) columns -> columns . COMMA column
    (41) columns -> columns . COMMA column POINT column

    FROM            shift and go to state 99
    COMMA           shift and go to state 100


state 44

    (45) column -> NAME .
    (106) h -> NAME .

    POINT           reduce using rule 45 (column -> NAME .)
    FROM            reduce using rule 45 (column -> NAME .)
    COMMA           reduce using rule 45 (column -> NAME .)
    R_PAREN         reduce using rule 45 (column -> NAME .)
    TIMES           reduce using rule 106 (h -> NAME .)
    DIVIDE          reduce using rule 106 (h -> NAME .)
    PLUS            reduce using rule 106 (h -> NAME .)
    MINUS           reduce using rule 106 (h -> NAME .)
    EQUALS          reduce using rule 106 (h -> NAME .)
    NOT_EQ          reduce using rule 106 (h -> NAME .)
    LESS_THAN       reduce using rule 106 (h -> NAME .)
    GREATER_THAN    reduce using rule 106 (h -> NAME .)
    LESS_EQ         reduce using rule 106 (h -> NAME .)
    GREATER_EQ      reduce using rule 106 (h -> NAME .)
    AND             reduce using rule 106 (h -> NAME .)
    NAME            reduce using rule 106 (h -> NAME .)
    OR              reduce using rule 106 (h -> NAME .)


state 45

    (49) column -> a . NAME
    (81) a -> a . OR b

    NAME            shift and go to state 101
    OR              shift and go to state 102


state 46

    (42) columns -> column . POINT column
    (43) columns -> column .

    POINT           shift and go to state 103
    FROM            reduce using rule 43 (columns -> column .)
    COMMA           reduce using rule 43 (columns -> column .)
    R_PAREN         reduce using rule 43 (columns -> column .)


state 47

    (44) column -> TIMES .

    POINT           reduce using rule 44 (column -> TIMES .)
    FROM            reduce using rule 44 (column -> TIMES .)
    COMMA           reduce using rule 44 (column -> TIMES .)
    R_PAREN         reduce using rule 44 (column -> TIMES .)


state 48

    (46) column -> case_statement .

    POINT           reduce using rule 46 (column -> case_statement .)
    FROM            reduce using rule 46 (column -> case_statement .)
    COMMA           reduce using rule 46 (column -> case_statement .)
    R_PAREN         reduce using rule 46 (column -> case_statement .)


state 49

    (47) column -> if_statement .
    (107) h -> if_statement .

    POINT           reduce using rule 47 (column -> if_statement .)
    FROM            reduce using rule 47 (column -> if_statement .)
    COMMA           reduce using rule 47 (column -> if_statement .)
    R_PAREN         reduce using rule 47 (column -> if_statement .)
    TIMES           reduce using rule 107 (h -> if_statement .)
    DIVIDE          reduce using rule 107 (h -> if_statement .)
    PLUS            reduce using rule 107 (h -> if_statement .)
    MINUS           reduce using rule 107 (h -> if_statement .)
    EQUALS          reduce using rule 107 (h -> if_statement .)
    NOT_EQ          reduce using rule 107 (h -> if_statement .)
    LESS_THAN       reduce using rule 107 (h -> if_statement .)
    GREATER_THAN    reduce using rule 107 (h -> if_statement .)
    LESS_EQ         reduce using rule 107 (h -> if_statement .)
    GREATER_EQ      reduce using rule 107 (h -> if_statement .)
    AND             reduce using rule 107 (h -> if_statement .)
    NAME            reduce using rule 107 (h -> if_statement .)
    OR              reduce using rule 107 (h -> if_statement .)


state 50

    (48) column -> call_function_prod .

    POINT           reduce using rule 48 (column -> call_function_prod .)
    FROM            reduce using rule 48 (column -> call_function_prod .)
    COMMA           reduce using rule 48 (column -> call_function_prod .)
    R_PAREN         reduce using rule 48 (column -> call_function_prod .)


state 51

    (72) case_statement -> CASE . when_statements END NAME
    (73) when_statements -> . WHEN a THEN a when_statements
    (74) when_statements -> . ELSE THEN a

    WHEN            shift and go to state 105
    ELSE            shift and go to state 106

    when_statements                shift and go to state 104

state 52

    (108) call_function_prod -> HOY . L_PAREN R_PAREN

    L_PAREN         shift and go to state 107


state 53

    (109) call_function_prod -> CONCATENAR . L_PAREN a COMMA a R_PAREN

    L_PAREN         shift and go to state 108


state 54

    (110) call_function_prod -> SUBSTRAER . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 109


state 55

    (111) call_function_prod -> CONTAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 110


state 56

    (112) call_function_prod -> SUMA . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 111


state 57

    (113) call_function_prod -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 112


state 58

    (82) a -> b .
    (83) b -> b . AND c

    NAME            reduce using rule 82 (a -> b .)
    OR              reduce using rule 82 (a -> b .)
    THEN            reduce using rule 82 (a -> b .)
    BEGIN           reduce using rule 82 (a -> b .)
    COMMA           reduce using rule 82 (a -> b .)
    SEMICOLON       reduce using rule 82 (a -> b .)
    R_PAREN         reduce using rule 82 (a -> b .)
    AS              reduce using rule 82 (a -> b .)
    END             reduce using rule 82 (a -> b .)
    WHEN            reduce using rule 82 (a -> b .)
    ELSE            reduce using rule 82 (a -> b .)
    WHERE           reduce using rule 82 (a -> b .)
    AND             shift and go to state 113


state 59

    (84) b -> c .

    AND             reduce using rule 84 (b -> c .)
    NAME            reduce using rule 84 (b -> c .)
    OR              reduce using rule 84 (b -> c .)
    THEN            reduce using rule 84 (b -> c .)
    BEGIN           reduce using rule 84 (b -> c .)
    COMMA           reduce using rule 84 (b -> c .)
    SEMICOLON       reduce using rule 84 (b -> c .)
    R_PAREN         reduce using rule 84 (b -> c .)
    AS              reduce using rule 84 (b -> c .)
    END             reduce using rule 84 (b -> c .)
    WHEN            reduce using rule 84 (b -> c .)
    ELSE            reduce using rule 84 (b -> c .)
    WHERE           reduce using rule 84 (b -> c .)


state 60

    (85) c -> NOT_SIGN . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    d                              shift and go to state 114
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 61

    (86) c -> d .
    (87) d -> d . EQUALS e
    (88) d -> d . NOT_EQ e
    (89) d -> d . LESS_THAN e
    (90) d -> d . GREATER_THAN e
    (91) d -> d . LESS_EQ e
    (92) d -> d . GREATER_EQ e

    AND             reduce using rule 86 (c -> d .)
    NAME            reduce using rule 86 (c -> d .)
    OR              reduce using rule 86 (c -> d .)
    THEN            reduce using rule 86 (c -> d .)
    BEGIN           reduce using rule 86 (c -> d .)
    COMMA           reduce using rule 86 (c -> d .)
    SEMICOLON       reduce using rule 86 (c -> d .)
    R_PAREN         reduce using rule 86 (c -> d .)
    AS              reduce using rule 86 (c -> d .)
    END             reduce using rule 86 (c -> d .)
    WHEN            reduce using rule 86 (c -> d .)
    ELSE            reduce using rule 86 (c -> d .)
    WHERE           reduce using rule 86 (c -> d .)
    EQUALS          shift and go to state 115
    NOT_EQ          shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_THAN    shift and go to state 118
    LESS_EQ         shift and go to state 119
    GREATER_EQ      shift and go to state 120


state 62

    (93) d -> e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 93 (d -> e .)
    NOT_EQ          reduce using rule 93 (d -> e .)
    LESS_THAN       reduce using rule 93 (d -> e .)
    GREATER_THAN    reduce using rule 93 (d -> e .)
    LESS_EQ         reduce using rule 93 (d -> e .)
    GREATER_EQ      reduce using rule 93 (d -> e .)
    AND             reduce using rule 93 (d -> e .)
    NAME            reduce using rule 93 (d -> e .)
    OR              reduce using rule 93 (d -> e .)
    THEN            reduce using rule 93 (d -> e .)
    BEGIN           reduce using rule 93 (d -> e .)
    COMMA           reduce using rule 93 (d -> e .)
    SEMICOLON       reduce using rule 93 (d -> e .)
    R_PAREN         reduce using rule 93 (d -> e .)
    AS              reduce using rule 93 (d -> e .)
    END             reduce using rule 93 (d -> e .)
    WHEN            reduce using rule 93 (d -> e .)
    ELSE            reduce using rule 93 (d -> e .)
    WHERE           reduce using rule 93 (d -> e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 63

    (96) e -> f .
    (97) f -> f . TIMES g
    (98) f -> f . DIVIDE g

    PLUS            reduce using rule 96 (e -> f .)
    MINUS           reduce using rule 96 (e -> f .)
    EQUALS          reduce using rule 96 (e -> f .)
    NOT_EQ          reduce using rule 96 (e -> f .)
    LESS_THAN       reduce using rule 96 (e -> f .)
    GREATER_THAN    reduce using rule 96 (e -> f .)
    LESS_EQ         reduce using rule 96 (e -> f .)
    GREATER_EQ      reduce using rule 96 (e -> f .)
    AND             reduce using rule 96 (e -> f .)
    NAME            reduce using rule 96 (e -> f .)
    OR              reduce using rule 96 (e -> f .)
    THEN            reduce using rule 96 (e -> f .)
    BEGIN           reduce using rule 96 (e -> f .)
    COMMA           reduce using rule 96 (e -> f .)
    SEMICOLON       reduce using rule 96 (e -> f .)
    R_PAREN         reduce using rule 96 (e -> f .)
    AS              reduce using rule 96 (e -> f .)
    END             reduce using rule 96 (e -> f .)
    WHEN            reduce using rule 96 (e -> f .)
    ELSE            reduce using rule 96 (e -> f .)
    WHERE           reduce using rule 96 (e -> f .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 64

    (100) g -> MINUS . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    h                              shift and go to state 125
    if_statement                   shift and go to state 77

state 65

    (99) f -> g .

    TIMES           reduce using rule 99 (f -> g .)
    DIVIDE          reduce using rule 99 (f -> g .)
    PLUS            reduce using rule 99 (f -> g .)
    MINUS           reduce using rule 99 (f -> g .)
    EQUALS          reduce using rule 99 (f -> g .)
    NOT_EQ          reduce using rule 99 (f -> g .)
    LESS_THAN       reduce using rule 99 (f -> g .)
    GREATER_THAN    reduce using rule 99 (f -> g .)
    LESS_EQ         reduce using rule 99 (f -> g .)
    GREATER_EQ      reduce using rule 99 (f -> g .)
    AND             reduce using rule 99 (f -> g .)
    NAME            reduce using rule 99 (f -> g .)
    OR              reduce using rule 99 (f -> g .)
    THEN            reduce using rule 99 (f -> g .)
    BEGIN           reduce using rule 99 (f -> g .)
    COMMA           reduce using rule 99 (f -> g .)
    SEMICOLON       reduce using rule 99 (f -> g .)
    R_PAREN         reduce using rule 99 (f -> g .)
    AS              reduce using rule 99 (f -> g .)
    END             reduce using rule 99 (f -> g .)
    WHEN            reduce using rule 99 (f -> g .)
    ELSE            reduce using rule 99 (f -> g .)
    WHERE           reduce using rule 99 (f -> g .)


state 66

    (101) g -> h .

    TIMES           reduce using rule 101 (g -> h .)
    DIVIDE          reduce using rule 101 (g -> h .)
    PLUS            reduce using rule 101 (g -> h .)
    MINUS           reduce using rule 101 (g -> h .)
    EQUALS          reduce using rule 101 (g -> h .)
    NOT_EQ          reduce using rule 101 (g -> h .)
    LESS_THAN       reduce using rule 101 (g -> h .)
    GREATER_THAN    reduce using rule 101 (g -> h .)
    LESS_EQ         reduce using rule 101 (g -> h .)
    GREATER_EQ      reduce using rule 101 (g -> h .)
    AND             reduce using rule 101 (g -> h .)
    NAME            reduce using rule 101 (g -> h .)
    OR              reduce using rule 101 (g -> h .)
    THEN            reduce using rule 101 (g -> h .)
    BEGIN           reduce using rule 101 (g -> h .)
    COMMA           reduce using rule 101 (g -> h .)
    SEMICOLON       reduce using rule 101 (g -> h .)
    R_PAREN         reduce using rule 101 (g -> h .)
    AS              reduce using rule 101 (g -> h .)
    END             reduce using rule 101 (g -> h .)
    WHEN            reduce using rule 101 (g -> h .)
    ELSE            reduce using rule 101 (g -> h .)
    WHERE           reduce using rule 101 (g -> h .)


state 67

    (102) h -> INTEGER_VALUE .

    TIMES           reduce using rule 102 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 102 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 102 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 102 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 102 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 102 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 102 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 102 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 102 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 102 (h -> INTEGER_VALUE .)
    AND             reduce using rule 102 (h -> INTEGER_VALUE .)
    NAME            reduce using rule 102 (h -> INTEGER_VALUE .)
    OR              reduce using rule 102 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 102 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 102 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 102 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 102 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 102 (h -> INTEGER_VALUE .)
    AS              reduce using rule 102 (h -> INTEGER_VALUE .)
    END             reduce using rule 102 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 102 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 102 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 102 (h -> INTEGER_VALUE .)


state 68

    (103) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 103 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 103 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 103 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 103 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 103 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 103 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 103 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 103 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 103 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 103 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 103 (h -> DECIMAL_VALUE .)
    NAME            reduce using rule 103 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 103 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 103 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 103 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 103 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 103 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 103 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 103 (h -> DECIMAL_VALUE .)
    END             reduce using rule 103 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 103 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 103 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 103 (h -> DECIMAL_VALUE .)


state 69

    (104) h -> STRING .

    TIMES           reduce using rule 104 (h -> STRING .)
    DIVIDE          reduce using rule 104 (h -> STRING .)
    PLUS            reduce using rule 104 (h -> STRING .)
    MINUS           reduce using rule 104 (h -> STRING .)
    EQUALS          reduce using rule 104 (h -> STRING .)
    NOT_EQ          reduce using rule 104 (h -> STRING .)
    LESS_THAN       reduce using rule 104 (h -> STRING .)
    GREATER_THAN    reduce using rule 104 (h -> STRING .)
    LESS_EQ         reduce using rule 104 (h -> STRING .)
    GREATER_EQ      reduce using rule 104 (h -> STRING .)
    AND             reduce using rule 104 (h -> STRING .)
    NAME            reduce using rule 104 (h -> STRING .)
    OR              reduce using rule 104 (h -> STRING .)
    THEN            reduce using rule 104 (h -> STRING .)
    BEGIN           reduce using rule 104 (h -> STRING .)
    COMMA           reduce using rule 104 (h -> STRING .)
    SEMICOLON       reduce using rule 104 (h -> STRING .)
    R_PAREN         reduce using rule 104 (h -> STRING .)
    AS              reduce using rule 104 (h -> STRING .)
    END             reduce using rule 104 (h -> STRING .)
    WHEN            reduce using rule 104 (h -> STRING .)
    ELSE            reduce using rule 104 (h -> STRING .)
    WHERE           reduce using rule 104 (h -> STRING .)


state 70

    (105) h -> ID .

    TIMES           reduce using rule 105 (h -> ID .)
    DIVIDE          reduce using rule 105 (h -> ID .)
    PLUS            reduce using rule 105 (h -> ID .)
    MINUS           reduce using rule 105 (h -> ID .)
    EQUALS          reduce using rule 105 (h -> ID .)
    NOT_EQ          reduce using rule 105 (h -> ID .)
    LESS_THAN       reduce using rule 105 (h -> ID .)
    GREATER_THAN    reduce using rule 105 (h -> ID .)
    LESS_EQ         reduce using rule 105 (h -> ID .)
    GREATER_EQ      reduce using rule 105 (h -> ID .)
    AND             reduce using rule 105 (h -> ID .)
    NAME            reduce using rule 105 (h -> ID .)
    OR              reduce using rule 105 (h -> ID .)
    THEN            reduce using rule 105 (h -> ID .)
    BEGIN           reduce using rule 105 (h -> ID .)
    COMMA           reduce using rule 105 (h -> ID .)
    SEMICOLON       reduce using rule 105 (h -> ID .)
    R_PAREN         reduce using rule 105 (h -> ID .)
    AS              reduce using rule 105 (h -> ID .)
    END             reduce using rule 105 (h -> ID .)
    WHEN            reduce using rule 105 (h -> ID .)
    ELSE            reduce using rule 105 (h -> ID .)
    WHERE           reduce using rule 105 (h -> ID .)


state 71

    (39) insert_statement -> INSERT INTO . NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    NAME            shift and go to state 126


state 72

    (58) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME SEMICOLON

    NAME            shift and go to state 127


state 73

    (65) drop_table_statement -> DROP TABLE . NAME SEMICOLON

    NAME            shift and go to state 128


state 74

    (60) if_statement -> IF a . THEN statements END IF SEMICOLON
    (61) if_statement -> IF a . THEN statements ELSE statements END IF SEMICOLON
    (81) a -> a . OR b

    THEN            shift and go to state 129
    OR              shift and go to state 102


state 75

    (62) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN AS NAME
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 130
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 76

    (106) h -> NAME .

    TIMES           reduce using rule 106 (h -> NAME .)
    DIVIDE          reduce using rule 106 (h -> NAME .)
    PLUS            reduce using rule 106 (h -> NAME .)
    MINUS           reduce using rule 106 (h -> NAME .)
    EQUALS          reduce using rule 106 (h -> NAME .)
    NOT_EQ          reduce using rule 106 (h -> NAME .)
    LESS_THAN       reduce using rule 106 (h -> NAME .)
    GREATER_THAN    reduce using rule 106 (h -> NAME .)
    LESS_EQ         reduce using rule 106 (h -> NAME .)
    GREATER_EQ      reduce using rule 106 (h -> NAME .)
    AND             reduce using rule 106 (h -> NAME .)
    THEN            reduce using rule 106 (h -> NAME .)
    OR              reduce using rule 106 (h -> NAME .)
    BEGIN           reduce using rule 106 (h -> NAME .)
    NAME            reduce using rule 106 (h -> NAME .)
    COMMA           reduce using rule 106 (h -> NAME .)
    SEMICOLON       reduce using rule 106 (h -> NAME .)
    R_PAREN         reduce using rule 106 (h -> NAME .)
    AS              reduce using rule 106 (h -> NAME .)
    END             reduce using rule 106 (h -> NAME .)
    WHEN            reduce using rule 106 (h -> NAME .)
    ELSE            reduce using rule 106 (h -> NAME .)
    WHERE           reduce using rule 106 (h -> NAME .)


state 77

    (107) h -> if_statement .

    TIMES           reduce using rule 107 (h -> if_statement .)
    DIVIDE          reduce using rule 107 (h -> if_statement .)
    PLUS            reduce using rule 107 (h -> if_statement .)
    MINUS           reduce using rule 107 (h -> if_statement .)
    EQUALS          reduce using rule 107 (h -> if_statement .)
    NOT_EQ          reduce using rule 107 (h -> if_statement .)
    LESS_THAN       reduce using rule 107 (h -> if_statement .)
    GREATER_THAN    reduce using rule 107 (h -> if_statement .)
    LESS_EQ         reduce using rule 107 (h -> if_statement .)
    GREATER_EQ      reduce using rule 107 (h -> if_statement .)
    AND             reduce using rule 107 (h -> if_statement .)
    THEN            reduce using rule 107 (h -> if_statement .)
    OR              reduce using rule 107 (h -> if_statement .)
    BEGIN           reduce using rule 107 (h -> if_statement .)
    NAME            reduce using rule 107 (h -> if_statement .)
    COMMA           reduce using rule 107 (h -> if_statement .)
    SEMICOLON       reduce using rule 107 (h -> if_statement .)
    R_PAREN         reduce using rule 107 (h -> if_statement .)
    AS              reduce using rule 107 (h -> if_statement .)
    END             reduce using rule 107 (h -> if_statement .)
    WHEN            reduce using rule 107 (h -> if_statement .)
    ELSE            reduce using rule 107 (h -> if_statement .)
    WHERE           reduce using rule 107 (h -> if_statement .)


state 78

    (64) exec_statement -> EXEC NAME . vals SEMICOLON
    (50) vals -> . vals COMMA a
    (51) vals -> . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    vals                           shift and go to state 131
    a                              shift and go to state 132
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 79

    (66) update_statement -> UPDATE NAME . SET column_assignments WHERE a SEMICOLON

    SET             shift and go to state 133


state 80

    (69) while_statement -> WHILE a . BEGIN statements END SEMICOLON
    (81) a -> a . OR b

    BEGIN           shift and go to state 134
    OR              shift and go to state 102


state 81

    (70) truncate_statement -> TRUNCATE TABLE . NAME SEMICOLON

    NAME            shift and go to state 135


state 82

    (71) delete_statement -> DELETE FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 136


state 83

    (21) create_database_statement -> CREATE DATA BASE . NAME SEMICOLON

    NAME            shift and go to state 137


state 84

    (28) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN SEMICOLON

    L_PAREN         shift and go to state 138


state 85

    (52) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON

    L_PAREN         shift and go to state 139


state 86

    (53) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON

    L_PAREN         shift and go to state 140


state 87

    (22) use_statement -> USE NAME SEMICOLON .

    CREATE          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    USE             reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    DECLARE         reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    SET             reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    SELECT          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    INSERT          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    ALTER           reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    IF              reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    EXEC            reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    DROP            reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    UPDATE          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    WHILE           reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    DELETE          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    $end            reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    END             reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    ELSE            reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)
    RETURN          reduce using rule 22 (use_statement -> USE NAME SEMICOLON .)


state 88

    (23) declare_statement -> DECLARE ID AS . type SEMICOLON
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 141

state 89

    (24) declare_statement -> DECLARE ID type . SEMICOLON

    SEMICOLON       shift and go to state 142


state 90

    (75) type -> INT .

    SEMICOLON       reduce using rule 75 (type -> INT .)
    NOT             reduce using rule 75 (type -> INT .)
    NULL            reduce using rule 75 (type -> INT .)
    PRIMARY         reduce using rule 75 (type -> INT .)
    REFERENCE       reduce using rule 75 (type -> INT .)
    R_PAREN         reduce using rule 75 (type -> INT .)
    COMMA           reduce using rule 75 (type -> INT .)
    AS              reduce using rule 75 (type -> INT .)


state 91

    (76) type -> DECIMAL .

    SEMICOLON       reduce using rule 76 (type -> DECIMAL .)
    NOT             reduce using rule 76 (type -> DECIMAL .)
    NULL            reduce using rule 76 (type -> DECIMAL .)
    PRIMARY         reduce using rule 76 (type -> DECIMAL .)
    REFERENCE       reduce using rule 76 (type -> DECIMAL .)
    R_PAREN         reduce using rule 76 (type -> DECIMAL .)
    COMMA           reduce using rule 76 (type -> DECIMAL .)
    AS              reduce using rule 76 (type -> DECIMAL .)


state 92

    (77) type -> DATE .

    SEMICOLON       reduce using rule 77 (type -> DATE .)
    NOT             reduce using rule 77 (type -> DATE .)
    NULL            reduce using rule 77 (type -> DATE .)
    PRIMARY         reduce using rule 77 (type -> DATE .)
    REFERENCE       reduce using rule 77 (type -> DATE .)
    R_PAREN         reduce using rule 77 (type -> DATE .)
    COMMA           reduce using rule 77 (type -> DATE .)
    AS              reduce using rule 77 (type -> DATE .)


state 93

    (78) type -> DATETIME .

    SEMICOLON       reduce using rule 78 (type -> DATETIME .)
    NOT             reduce using rule 78 (type -> DATETIME .)
    NULL            reduce using rule 78 (type -> DATETIME .)
    PRIMARY         reduce using rule 78 (type -> DATETIME .)
    REFERENCE       reduce using rule 78 (type -> DATETIME .)
    R_PAREN         reduce using rule 78 (type -> DATETIME .)
    COMMA           reduce using rule 78 (type -> DATETIME .)
    AS              reduce using rule 78 (type -> DATETIME .)


state 94

    (79) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 143


state 95

    (80) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 144


state 96

    (25) set_statement -> SET assignments SEMICOLON .

    CREATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    USE             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DECLARE         reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SET             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    SELECT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    INSERT          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    ALTER           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    IF              reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    EXEC            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DROP            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    UPDATE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    WHILE           reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    TRUNCATE        reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    DELETE          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    $end            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    END             reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    ELSE            reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)
    RETURN          reduce using rule 25 (set_statement -> SET assignments SEMICOLON .)


state 97

    (26) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 145


state 98

    (27) assignments -> ID ASSIGN . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 146
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 99

    (37) select_statement -> SELECT columns FROM . NAME SEMICOLON
    (38) select_statement -> SELECT columns FROM . NAME WHERE a SEMICOLON

    NAME            shift and go to state 147


state 100

    (40) columns -> columns COMMA . column
    (41) columns -> columns COMMA . column POINT column
    (44) column -> . TIMES
    (45) column -> . NAME
    (46) column -> . case_statement
    (47) column -> . if_statement
    (48) column -> . call_function_prod
    (49) column -> . a NAME
    (72) case_statement -> . CASE when_statements END NAME
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (108) call_function_prod -> . HOY L_PAREN R_PAREN
    (109) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (110) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (111) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (112) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (113) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement

    TIMES           shift and go to state 47
    NAME            shift and go to state 44
    CASE            shift and go to state 51
    IF              shift and go to state 29
    HOY             shift and go to state 52
    CONCATENAR      shift and go to state 53
    SUBSTRAER       shift and go to state 54
    CONTAR          shift and go to state 55
    SUMA            shift and go to state 56
    CAS             shift and go to state 57
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70

    column                         shift and go to state 148
    case_statement                 shift and go to state 48
    if_statement                   shift and go to state 49
    call_function_prod             shift and go to state 50
    a                              shift and go to state 45
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66

state 101

    (49) column -> a NAME .

    POINT           reduce using rule 49 (column -> a NAME .)
    FROM            reduce using rule 49 (column -> a NAME .)
    COMMA           reduce using rule 49 (column -> a NAME .)
    R_PAREN         reduce using rule 49 (column -> a NAME .)


state 102

    (81) a -> a OR . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    b                              shift and go to state 149
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 103

    (42) columns -> column POINT . column
    (44) column -> . TIMES
    (45) column -> . NAME
    (46) column -> . case_statement
    (47) column -> . if_statement
    (48) column -> . call_function_prod
    (49) column -> . a NAME
    (72) case_statement -> . CASE when_statements END NAME
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (108) call_function_prod -> . HOY L_PAREN R_PAREN
    (109) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (110) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (111) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (112) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (113) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement

    TIMES           shift and go to state 47
    NAME            shift and go to state 44
    CASE            shift and go to state 51
    IF              shift and go to state 29
    HOY             shift and go to state 52
    CONCATENAR      shift and go to state 53
    SUBSTRAER       shift and go to state 54
    CONTAR          shift and go to state 55
    SUMA            shift and go to state 56
    CAS             shift and go to state 57
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70

    column                         shift and go to state 150
    case_statement                 shift and go to state 48
    if_statement                   shift and go to state 49
    call_function_prod             shift and go to state 50
    a                              shift and go to state 45
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66

state 104

    (72) case_statement -> CASE when_statements . END NAME

    END             shift and go to state 151


state 105

    (73) when_statements -> WHEN . a THEN a when_statements
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 152
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 106

    (74) when_statements -> ELSE . THEN a

    THEN            shift and go to state 153


state 107

    (108) call_function_prod -> HOY L_PAREN . R_PAREN

    R_PAREN         shift and go to state 154


state 108

    (109) call_function_prod -> CONCATENAR L_PAREN . a COMMA a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 155
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 109

    (110) call_function_prod -> SUBSTRAER L_PAREN . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 156
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 110

    (111) call_function_prod -> CONTAR L_PAREN . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 157
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 111

    (112) call_function_prod -> SUMA L_PAREN . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 158
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 112

    (113) call_function_prod -> CAS L_PAREN . a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 159
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 113

    (83) b -> b AND . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    c                              shift and go to state 160
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 114

    (85) c -> NOT_SIGN d .
    (87) d -> d . EQUALS e
    (88) d -> d . NOT_EQ e
    (89) d -> d . LESS_THAN e
    (90) d -> d . GREATER_THAN e
    (91) d -> d . LESS_EQ e
    (92) d -> d . GREATER_EQ e

    AND             reduce using rule 85 (c -> NOT_SIGN d .)
    NAME            reduce using rule 85 (c -> NOT_SIGN d .)
    OR              reduce using rule 85 (c -> NOT_SIGN d .)
    THEN            reduce using rule 85 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 85 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 85 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 85 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 85 (c -> NOT_SIGN d .)
    AS              reduce using rule 85 (c -> NOT_SIGN d .)
    END             reduce using rule 85 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 85 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 85 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 85 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 115
    NOT_EQ          shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_THAN    shift and go to state 118
    LESS_EQ         shift and go to state 119
    GREATER_EQ      shift and go to state 120


state 115

    (87) d -> d EQUALS . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 161
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 116

    (88) d -> d NOT_EQ . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 162
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 117

    (89) d -> d LESS_THAN . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 163
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 118

    (90) d -> d GREATER_THAN . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 164
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 119

    (91) d -> d LESS_EQ . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 165
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 120

    (92) d -> d GREATER_EQ . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    e                              shift and go to state 166
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 121

    (94) e -> e PLUS . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    f                              shift and go to state 167
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 122

    (95) e -> e MINUS . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    f                              shift and go to state 168
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 123

    (97) f -> f TIMES . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    g                              shift and go to state 169
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 124

    (98) f -> f DIVIDE . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    g                              shift and go to state 170
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 125

    (100) g -> MINUS h .

    TIMES           reduce using rule 100 (g -> MINUS h .)
    DIVIDE          reduce using rule 100 (g -> MINUS h .)
    PLUS            reduce using rule 100 (g -> MINUS h .)
    MINUS           reduce using rule 100 (g -> MINUS h .)
    EQUALS          reduce using rule 100 (g -> MINUS h .)
    NOT_EQ          reduce using rule 100 (g -> MINUS h .)
    LESS_THAN       reduce using rule 100 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 100 (g -> MINUS h .)
    LESS_EQ         reduce using rule 100 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 100 (g -> MINUS h .)
    AND             reduce using rule 100 (g -> MINUS h .)
    NAME            reduce using rule 100 (g -> MINUS h .)
    OR              reduce using rule 100 (g -> MINUS h .)
    THEN            reduce using rule 100 (g -> MINUS h .)
    BEGIN           reduce using rule 100 (g -> MINUS h .)
    COMMA           reduce using rule 100 (g -> MINUS h .)
    SEMICOLON       reduce using rule 100 (g -> MINUS h .)
    R_PAREN         reduce using rule 100 (g -> MINUS h .)
    AS              reduce using rule 100 (g -> MINUS h .)
    END             reduce using rule 100 (g -> MINUS h .)
    WHEN            reduce using rule 100 (g -> MINUS h .)
    ELSE            reduce using rule 100 (g -> MINUS h .)
    WHERE           reduce using rule 100 (g -> MINUS h .)


state 126

    (39) insert_statement -> INSERT INTO NAME . L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 171


state 127

    (58) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME SEMICOLON

    ADD             shift and go to state 172
    DROP            shift and go to state 173


state 128

    (65) drop_table_statement -> DROP TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 174


state 129

    (60) if_statement -> IF a THEN . statements END IF SEMICOLON
    (61) if_statement -> IF a THEN . statements ELSE statements END IF SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    ELSE            reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 175

state 130

    (62) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN AS NAME
    (81) a -> a . OR b

    COMMA           shift and go to state 176
    OR              shift and go to state 102


state 131

    (64) exec_statement -> EXEC NAME vals . SEMICOLON
    (50) vals -> vals . COMMA a

    SEMICOLON       shift and go to state 177
    COMMA           shift and go to state 178


state 132

    (51) vals -> a .
    (81) a -> a . OR b

    SEMICOLON       reduce using rule 51 (vals -> a .)
    COMMA           reduce using rule 51 (vals -> a .)
    R_PAREN         reduce using rule 51 (vals -> a .)
    OR              shift and go to state 102


state 133

    (66) update_statement -> UPDATE NAME SET . column_assignments WHERE a SEMICOLON
    (67) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (68) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 179

    column_assignments             shift and go to state 180

state 134

    (69) while_statement -> WHILE a BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 181

state 135

    (70) truncate_statement -> TRUNCATE TABLE NAME . SEMICOLON

    SEMICOLON       shift and go to state 182


state 136

    (71) delete_statement -> DELETE FROM NAME . WHERE a SEMICOLON

    WHERE           shift and go to state 183


state 137

    (21) create_database_statement -> CREATE DATA BASE NAME . SEMICOLON

    SEMICOLON       shift and go to state 184


state 138

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN SEMICOLON
    (29) properties -> . properties COMMA property
    (30) properties -> . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 185

    properties                     shift and go to state 186
    property                       shift and go to state 187

state 139

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (54) parameters -> . parameters COMMA ID AS type
    (55) parameters -> . parameters COMMA ID type
    (56) parameters -> . ID AS type
    (57) parameters -> . ID type

    ID              shift and go to state 189

    parameters                     shift and go to state 188

state 140

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END SEMICOLON
    (54) parameters -> . parameters COMMA ID AS type
    (55) parameters -> . parameters COMMA ID type
    (56) parameters -> . ID AS type
    (57) parameters -> . ID type

    ID              shift and go to state 189

    parameters                     shift and go to state 190

state 141

    (23) declare_statement -> DECLARE ID AS type . SEMICOLON

    SEMICOLON       shift and go to state 191


state 142

    (24) declare_statement -> DECLARE ID type SEMICOLON .

    CREATE          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    USE             reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    DECLARE         reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    SET             reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    SELECT          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    INSERT          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    ALTER           reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    IF              reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    EXEC            reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    DROP            reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    UPDATE          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    WHILE           reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    TRUNCATE        reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    DELETE          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    $end            reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    END             reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    ELSE            reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)
    RETURN          reduce using rule 24 (declare_statement -> DECLARE ID type SEMICOLON .)


state 143

    (79) type -> NCHAR L_PAREN . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 192
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 144

    (80) type -> NVARCHAR L_PAREN . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 193
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 145

    (26) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 194


state 146

    (27) assignments -> ID ASSIGN a .
    (81) a -> a . OR b

    SEMICOLON       reduce using rule 27 (assignments -> ID ASSIGN a .)
    COMMA           reduce using rule 27 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 102


state 147

    (37) select_statement -> SELECT columns FROM NAME . SEMICOLON
    (38) select_statement -> SELECT columns FROM NAME . WHERE a SEMICOLON

    SEMICOLON       shift and go to state 195
    WHERE           shift and go to state 196


state 148

    (40) columns -> columns COMMA column .
    (41) columns -> columns COMMA column . POINT column

    FROM            reduce using rule 40 (columns -> columns COMMA column .)
    COMMA           reduce using rule 40 (columns -> columns COMMA column .)
    R_PAREN         reduce using rule 40 (columns -> columns COMMA column .)
    POINT           shift and go to state 197


state 149

    (81) a -> a OR b .
    (83) b -> b . AND c

    NAME            reduce using rule 81 (a -> a OR b .)
    OR              reduce using rule 81 (a -> a OR b .)
    THEN            reduce using rule 81 (a -> a OR b .)
    BEGIN           reduce using rule 81 (a -> a OR b .)
    COMMA           reduce using rule 81 (a -> a OR b .)
    SEMICOLON       reduce using rule 81 (a -> a OR b .)
    R_PAREN         reduce using rule 81 (a -> a OR b .)
    AS              reduce using rule 81 (a -> a OR b .)
    END             reduce using rule 81 (a -> a OR b .)
    WHEN            reduce using rule 81 (a -> a OR b .)
    ELSE            reduce using rule 81 (a -> a OR b .)
    WHERE           reduce using rule 81 (a -> a OR b .)
    AND             shift and go to state 113


state 150

    (42) columns -> column POINT column .

    FROM            reduce using rule 42 (columns -> column POINT column .)
    COMMA           reduce using rule 42 (columns -> column POINT column .)
    R_PAREN         reduce using rule 42 (columns -> column POINT column .)


state 151

    (72) case_statement -> CASE when_statements END . NAME

    NAME            shift and go to state 198


state 152

    (73) when_statements -> WHEN a . THEN a when_statements
    (81) a -> a . OR b

    THEN            shift and go to state 199
    OR              shift and go to state 102


state 153

    (74) when_statements -> ELSE THEN . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 200
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 154

    (108) call_function_prod -> HOY L_PAREN R_PAREN .

    POINT           reduce using rule 108 (call_function_prod -> HOY L_PAREN R_PAREN .)
    FROM            reduce using rule 108 (call_function_prod -> HOY L_PAREN R_PAREN .)
    COMMA           reduce using rule 108 (call_function_prod -> HOY L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 108 (call_function_prod -> HOY L_PAREN R_PAREN .)


state 155

    (109) call_function_prod -> CONCATENAR L_PAREN a . COMMA a R_PAREN
    (81) a -> a . OR b

    COMMA           shift and go to state 201
    OR              shift and go to state 102


state 156

    (110) call_function_prod -> SUBSTRAER L_PAREN a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 202
    OR              shift and go to state 102


state 157

    (111) call_function_prod -> CONTAR L_PAREN a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 203
    OR              shift and go to state 102


state 158

    (112) call_function_prod -> SUMA L_PAREN a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 204
    OR              shift and go to state 102


state 159

    (113) call_function_prod -> CAS L_PAREN a . AS type R_PAREN
    (81) a -> a . OR b

    AS              shift and go to state 205
    OR              shift and go to state 102


state 160

    (83) b -> b AND c .

    AND             reduce using rule 83 (b -> b AND c .)
    NAME            reduce using rule 83 (b -> b AND c .)
    OR              reduce using rule 83 (b -> b AND c .)
    THEN            reduce using rule 83 (b -> b AND c .)
    BEGIN           reduce using rule 83 (b -> b AND c .)
    COMMA           reduce using rule 83 (b -> b AND c .)
    SEMICOLON       reduce using rule 83 (b -> b AND c .)
    R_PAREN         reduce using rule 83 (b -> b AND c .)
    AS              reduce using rule 83 (b -> b AND c .)
    END             reduce using rule 83 (b -> b AND c .)
    WHEN            reduce using rule 83 (b -> b AND c .)
    ELSE            reduce using rule 83 (b -> b AND c .)
    WHERE           reduce using rule 83 (b -> b AND c .)


state 161

    (87) d -> d EQUALS e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 87 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 87 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 87 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 87 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 87 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 87 (d -> d EQUALS e .)
    AND             reduce using rule 87 (d -> d EQUALS e .)
    NAME            reduce using rule 87 (d -> d EQUALS e .)
    OR              reduce using rule 87 (d -> d EQUALS e .)
    THEN            reduce using rule 87 (d -> d EQUALS e .)
    BEGIN           reduce using rule 87 (d -> d EQUALS e .)
    COMMA           reduce using rule 87 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 87 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 87 (d -> d EQUALS e .)
    AS              reduce using rule 87 (d -> d EQUALS e .)
    END             reduce using rule 87 (d -> d EQUALS e .)
    WHEN            reduce using rule 87 (d -> d EQUALS e .)
    ELSE            reduce using rule 87 (d -> d EQUALS e .)
    WHERE           reduce using rule 87 (d -> d EQUALS e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 162

    (88) d -> d NOT_EQ e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 88 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 88 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 88 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 88 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 88 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 88 (d -> d NOT_EQ e .)
    AND             reduce using rule 88 (d -> d NOT_EQ e .)
    NAME            reduce using rule 88 (d -> d NOT_EQ e .)
    OR              reduce using rule 88 (d -> d NOT_EQ e .)
    THEN            reduce using rule 88 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 88 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 88 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 88 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 88 (d -> d NOT_EQ e .)
    AS              reduce using rule 88 (d -> d NOT_EQ e .)
    END             reduce using rule 88 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 88 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 88 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 88 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 163

    (89) d -> d LESS_THAN e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 89 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 89 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 89 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 89 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 89 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 89 (d -> d LESS_THAN e .)
    AND             reduce using rule 89 (d -> d LESS_THAN e .)
    NAME            reduce using rule 89 (d -> d LESS_THAN e .)
    OR              reduce using rule 89 (d -> d LESS_THAN e .)
    THEN            reduce using rule 89 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 89 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 89 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 89 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 89 (d -> d LESS_THAN e .)
    AS              reduce using rule 89 (d -> d LESS_THAN e .)
    END             reduce using rule 89 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 89 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 89 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 89 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 164

    (90) d -> d GREATER_THAN e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 90 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 90 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 90 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 90 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 90 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 90 (d -> d GREATER_THAN e .)
    AND             reduce using rule 90 (d -> d GREATER_THAN e .)
    NAME            reduce using rule 90 (d -> d GREATER_THAN e .)
    OR              reduce using rule 90 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 90 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 90 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 90 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 90 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 90 (d -> d GREATER_THAN e .)
    AS              reduce using rule 90 (d -> d GREATER_THAN e .)
    END             reduce using rule 90 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 90 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 90 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 90 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 165

    (91) d -> d LESS_EQ e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 91 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 91 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 91 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 91 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 91 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 91 (d -> d LESS_EQ e .)
    AND             reduce using rule 91 (d -> d LESS_EQ e .)
    NAME            reduce using rule 91 (d -> d LESS_EQ e .)
    OR              reduce using rule 91 (d -> d LESS_EQ e .)
    THEN            reduce using rule 91 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 91 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 91 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 91 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 91 (d -> d LESS_EQ e .)
    AS              reduce using rule 91 (d -> d LESS_EQ e .)
    END             reduce using rule 91 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 91 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 91 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 91 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 166

    (92) d -> d GREATER_EQ e .
    (94) e -> e . PLUS f
    (95) e -> e . MINUS f

    EQUALS          reduce using rule 92 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 92 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 92 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 92 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 92 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 92 (d -> d GREATER_EQ e .)
    AND             reduce using rule 92 (d -> d GREATER_EQ e .)
    NAME            reduce using rule 92 (d -> d GREATER_EQ e .)
    OR              reduce using rule 92 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 92 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 92 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 92 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 92 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 92 (d -> d GREATER_EQ e .)
    AS              reduce using rule 92 (d -> d GREATER_EQ e .)
    END             reduce using rule 92 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 92 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 92 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 92 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122


state 167

    (94) e -> e PLUS f .
    (97) f -> f . TIMES g
    (98) f -> f . DIVIDE g

    PLUS            reduce using rule 94 (e -> e PLUS f .)
    MINUS           reduce using rule 94 (e -> e PLUS f .)
    EQUALS          reduce using rule 94 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 94 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 94 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 94 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 94 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 94 (e -> e PLUS f .)
    AND             reduce using rule 94 (e -> e PLUS f .)
    NAME            reduce using rule 94 (e -> e PLUS f .)
    OR              reduce using rule 94 (e -> e PLUS f .)
    THEN            reduce using rule 94 (e -> e PLUS f .)
    BEGIN           reduce using rule 94 (e -> e PLUS f .)
    COMMA           reduce using rule 94 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 94 (e -> e PLUS f .)
    R_PAREN         reduce using rule 94 (e -> e PLUS f .)
    AS              reduce using rule 94 (e -> e PLUS f .)
    END             reduce using rule 94 (e -> e PLUS f .)
    WHEN            reduce using rule 94 (e -> e PLUS f .)
    ELSE            reduce using rule 94 (e -> e PLUS f .)
    WHERE           reduce using rule 94 (e -> e PLUS f .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 168

    (95) e -> e MINUS f .
    (97) f -> f . TIMES g
    (98) f -> f . DIVIDE g

    PLUS            reduce using rule 95 (e -> e MINUS f .)
    MINUS           reduce using rule 95 (e -> e MINUS f .)
    EQUALS          reduce using rule 95 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 95 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 95 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 95 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 95 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 95 (e -> e MINUS f .)
    AND             reduce using rule 95 (e -> e MINUS f .)
    NAME            reduce using rule 95 (e -> e MINUS f .)
    OR              reduce using rule 95 (e -> e MINUS f .)
    THEN            reduce using rule 95 (e -> e MINUS f .)
    BEGIN           reduce using rule 95 (e -> e MINUS f .)
    COMMA           reduce using rule 95 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 95 (e -> e MINUS f .)
    R_PAREN         reduce using rule 95 (e -> e MINUS f .)
    AS              reduce using rule 95 (e -> e MINUS f .)
    END             reduce using rule 95 (e -> e MINUS f .)
    WHEN            reduce using rule 95 (e -> e MINUS f .)
    ELSE            reduce using rule 95 (e -> e MINUS f .)
    WHERE           reduce using rule 95 (e -> e MINUS f .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 169

    (97) f -> f TIMES g .

    TIMES           reduce using rule 97 (f -> f TIMES g .)
    DIVIDE          reduce using rule 97 (f -> f TIMES g .)
    PLUS            reduce using rule 97 (f -> f TIMES g .)
    MINUS           reduce using rule 97 (f -> f TIMES g .)
    EQUALS          reduce using rule 97 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 97 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 97 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 97 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 97 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 97 (f -> f TIMES g .)
    AND             reduce using rule 97 (f -> f TIMES g .)
    NAME            reduce using rule 97 (f -> f TIMES g .)
    OR              reduce using rule 97 (f -> f TIMES g .)
    THEN            reduce using rule 97 (f -> f TIMES g .)
    BEGIN           reduce using rule 97 (f -> f TIMES g .)
    COMMA           reduce using rule 97 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 97 (f -> f TIMES g .)
    R_PAREN         reduce using rule 97 (f -> f TIMES g .)
    AS              reduce using rule 97 (f -> f TIMES g .)
    END             reduce using rule 97 (f -> f TIMES g .)
    WHEN            reduce using rule 97 (f -> f TIMES g .)
    ELSE            reduce using rule 97 (f -> f TIMES g .)
    WHERE           reduce using rule 97 (f -> f TIMES g .)


state 170

    (98) f -> f DIVIDE g .

    TIMES           reduce using rule 98 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 98 (f -> f DIVIDE g .)
    PLUS            reduce using rule 98 (f -> f DIVIDE g .)
    MINUS           reduce using rule 98 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 98 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 98 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 98 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 98 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 98 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 98 (f -> f DIVIDE g .)
    AND             reduce using rule 98 (f -> f DIVIDE g .)
    NAME            reduce using rule 98 (f -> f DIVIDE g .)
    OR              reduce using rule 98 (f -> f DIVIDE g .)
    THEN            reduce using rule 98 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 98 (f -> f DIVIDE g .)
    COMMA           reduce using rule 98 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 98 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 98 (f -> f DIVIDE g .)
    AS              reduce using rule 98 (f -> f DIVIDE g .)
    END             reduce using rule 98 (f -> f DIVIDE g .)
    WHEN            reduce using rule 98 (f -> f DIVIDE g .)
    ELSE            reduce using rule 98 (f -> f DIVIDE g .)
    WHERE           reduce using rule 98 (f -> f DIVIDE g .)


state 171

    (39) insert_statement -> INSERT INTO NAME L_PAREN . columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> . columns COMMA column
    (41) columns -> . columns COMMA column POINT column
    (42) columns -> . column POINT column
    (43) columns -> . column
    (44) column -> . TIMES
    (45) column -> . NAME
    (46) column -> . case_statement
    (47) column -> . if_statement
    (48) column -> . call_function_prod
    (49) column -> . a NAME
    (72) case_statement -> . CASE when_statements END NAME
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (108) call_function_prod -> . HOY L_PAREN R_PAREN
    (109) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (110) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (111) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (112) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (113) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement

    TIMES           shift and go to state 47
    NAME            shift and go to state 44
    CASE            shift and go to state 51
    IF              shift and go to state 29
    HOY             shift and go to state 52
    CONCATENAR      shift and go to state 53
    SUBSTRAER       shift and go to state 54
    CONTAR          shift and go to state 55
    SUMA            shift and go to state 56
    CAS             shift and go to state 57
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70

    columns                        shift and go to state 206
    column                         shift and go to state 46
    case_statement                 shift and go to state 48
    if_statement                   shift and go to state 49
    call_function_prod             shift and go to state 50
    a                              shift and go to state 45
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66

state 172

    (58) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type SEMICOLON

    COLUMN          shift and go to state 207


state 173

    (59) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME SEMICOLON

    COLUMN          shift and go to state 208


state 174

    (65) drop_table_statement -> DROP TABLE NAME SEMICOLON .

    CREATE          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    USE             reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SET             reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    IF              reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DROP            reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    $end            reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    END             reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    ELSE            reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)
    RETURN          reduce using rule 65 (drop_table_statement -> DROP TABLE NAME SEMICOLON .)


state 175

    (60) if_statement -> IF a THEN statements . END IF SEMICOLON
    (61) if_statement -> IF a THEN statements . ELSE statements END IF SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 209
    ELSE            shift and go to state 210
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 176

    (62) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN AS NAME
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 211
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 177

    (64) exec_statement -> EXEC NAME vals SEMICOLON .

    CREATE          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    USE             reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DECLARE         reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SET             reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    SELECT          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    INSERT          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ALTER           reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    IF              reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    EXEC            reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DROP            reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    UPDATE          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    WHILE           reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    TRUNCATE        reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    DELETE          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    $end            reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    END             reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    ELSE            reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)
    RETURN          reduce using rule 64 (exec_statement -> EXEC NAME vals SEMICOLON .)


state 178

    (50) vals -> vals COMMA . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 212
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 179

    (68) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 213


state 180

    (66) update_statement -> UPDATE NAME SET column_assignments . WHERE a SEMICOLON
    (67) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 214
    COMMA           shift and go to state 215


state 181

    (69) while_statement -> WHILE a BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 216
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 182

    (70) truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .

    CREATE          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    USE             reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DECLARE         reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SET             reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    SELECT          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    INSERT          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    ALTER           reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    IF              reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    EXEC            reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DROP            reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    UPDATE          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    WHILE           reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    DELETE          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    $end            reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    END             reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    ELSE            reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)
    RETURN          reduce using rule 70 (truncate_statement -> TRUNCATE TABLE NAME SEMICOLON .)


state 183

    (71) delete_statement -> DELETE FROM NAME WHERE . a SEMICOLON
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 217
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 184

    (21) create_database_statement -> CREATE DATA BASE NAME SEMICOLON .

    CREATE          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    USE             reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DECLARE         reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SET             reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    SELECT          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    INSERT          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ALTER           reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    IF              reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    EXEC            reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DROP            reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    UPDATE          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    WHILE           reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    TRUNCATE        reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    DELETE          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    $end            reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    END             reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    ELSE            reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)
    RETURN          reduce using rule 21 (create_database_statement -> CREATE DATA BASE NAME SEMICOLON .)


state 185

    (31) property -> NAME . type null_prod PRIMARY KEY
    (32) property -> NAME . type null_prod
    (33) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 218

state 186

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN SEMICOLON
    (29) properties -> properties . COMMA property

    R_PAREN         shift and go to state 219
    COMMA           shift and go to state 220


state 187

    (30) properties -> property .

    R_PAREN         reduce using rule 30 (properties -> property .)
    COMMA           reduce using rule 30 (properties -> property .)


state 188

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (54) parameters -> parameters . COMMA ID AS type
    (55) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 221
    COMMA           shift and go to state 222


state 189

    (56) parameters -> ID . AS type
    (57) parameters -> ID . type
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 223
    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 224

state 190

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END SEMICOLON
    (54) parameters -> parameters . COMMA ID AS type
    (55) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 225
    COMMA           shift and go to state 222


state 191

    (23) declare_statement -> DECLARE ID AS type SEMICOLON .

    CREATE          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    USE             reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DECLARE         reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SET             reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    SELECT          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    INSERT          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ALTER           reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    IF              reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    EXEC            reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DROP            reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    UPDATE          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    WHILE           reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    TRUNCATE        reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    DELETE          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    $end            reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    END             reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    ELSE            reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)
    RETURN          reduce using rule 23 (declare_statement -> DECLARE ID AS type SEMICOLON .)


state 192

    (79) type -> NCHAR L_PAREN a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 226
    OR              shift and go to state 102


state 193

    (80) type -> NVARCHAR L_PAREN a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 227
    OR              shift and go to state 102


state 194

    (26) assignments -> assignments COMMA ID ASSIGN . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 228
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 195

    (37) select_statement -> SELECT columns FROM NAME SEMICOLON .

    CREATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    USE             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DECLARE         reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SET             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    SELECT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    INSERT          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ALTER           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    IF              reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    EXEC            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DROP            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    UPDATE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    WHILE           reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    TRUNCATE        reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    DELETE          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    $end            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    END             reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    ELSE            reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)
    RETURN          reduce using rule 37 (select_statement -> SELECT columns FROM NAME SEMICOLON .)


state 196

    (38) select_statement -> SELECT columns FROM NAME WHERE . a SEMICOLON
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 229
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 197

    (41) columns -> columns COMMA column POINT . column
    (44) column -> . TIMES
    (45) column -> . NAME
    (46) column -> . case_statement
    (47) column -> . if_statement
    (48) column -> . call_function_prod
    (49) column -> . a NAME
    (72) case_statement -> . CASE when_statements END NAME
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (108) call_function_prod -> . HOY L_PAREN R_PAREN
    (109) call_function_prod -> . CONCATENAR L_PAREN a COMMA a R_PAREN
    (110) call_function_prod -> . SUBSTRAER L_PAREN a R_PAREN
    (111) call_function_prod -> . CONTAR L_PAREN a R_PAREN
    (112) call_function_prod -> . SUMA L_PAREN a R_PAREN
    (113) call_function_prod -> . CAS L_PAREN a AS type R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement

    TIMES           shift and go to state 47
    NAME            shift and go to state 44
    CASE            shift and go to state 51
    IF              shift and go to state 29
    HOY             shift and go to state 52
    CONCATENAR      shift and go to state 53
    SUBSTRAER       shift and go to state 54
    CONTAR          shift and go to state 55
    SUMA            shift and go to state 56
    CAS             shift and go to state 57
    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70

    column                         shift and go to state 230
    case_statement                 shift and go to state 48
    if_statement                   shift and go to state 49
    call_function_prod             shift and go to state 50
    a                              shift and go to state 45
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66

state 198

    (72) case_statement -> CASE when_statements END NAME .

    POINT           reduce using rule 72 (case_statement -> CASE when_statements END NAME .)
    FROM            reduce using rule 72 (case_statement -> CASE when_statements END NAME .)
    COMMA           reduce using rule 72 (case_statement -> CASE when_statements END NAME .)
    R_PAREN         reduce using rule 72 (case_statement -> CASE when_statements END NAME .)


state 199

    (73) when_statements -> WHEN a THEN . a when_statements
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 231
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 200

    (74) when_statements -> ELSE THEN a .
    (81) a -> a . OR b

    END             reduce using rule 74 (when_statements -> ELSE THEN a .)
    OR              shift and go to state 102


state 201

    (109) call_function_prod -> CONCATENAR L_PAREN a COMMA . a R_PAREN
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 232
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 202

    (110) call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .

    POINT           reduce using rule 110 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    FROM            reduce using rule 110 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    COMMA           reduce using rule 110 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 110 (call_function_prod -> SUBSTRAER L_PAREN a R_PAREN .)


state 203

    (111) call_function_prod -> CONTAR L_PAREN a R_PAREN .

    POINT           reduce using rule 111 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    FROM            reduce using rule 111 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 111 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 111 (call_function_prod -> CONTAR L_PAREN a R_PAREN .)


state 204

    (112) call_function_prod -> SUMA L_PAREN a R_PAREN .

    POINT           reduce using rule 112 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    FROM            reduce using rule 112 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    COMMA           reduce using rule 112 (call_function_prod -> SUMA L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 112 (call_function_prod -> SUMA L_PAREN a R_PAREN .)


state 205

    (113) call_function_prod -> CAS L_PAREN a AS . type R_PAREN
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 233

state 206

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns . R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (40) columns -> columns . COMMA column
    (41) columns -> columns . COMMA column POINT column

    R_PAREN         shift and go to state 234
    COMMA           shift and go to state 100


state 207

    (58) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type SEMICOLON

    NAME            shift and go to state 235


state 208

    (59) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME SEMICOLON

    NAME            shift and go to state 236


state 209

    (60) if_statement -> IF a THEN statements END . IF SEMICOLON

    IF              shift and go to state 237


state 210

    (61) if_statement -> IF a THEN statements ELSE . statements END IF SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 238

state 211

    (62) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN AS NAME
    (81) a -> a . OR b

    COMMA           shift and go to state 239
    OR              shift and go to state 102


state 212

    (50) vals -> vals COMMA a .
    (81) a -> a . OR b

    SEMICOLON       reduce using rule 50 (vals -> vals COMMA a .)
    COMMA           reduce using rule 50 (vals -> vals COMMA a .)
    R_PAREN         reduce using rule 50 (vals -> vals COMMA a .)
    OR              shift and go to state 102


state 213

    (68) column_assignments -> NAME ASSIGN . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 240
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 214

    (66) update_statement -> UPDATE NAME SET column_assignments WHERE . a SEMICOLON
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 241
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 215

    (67) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 242


state 216

    (69) while_statement -> WHILE a BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 243


state 217

    (71) delete_statement -> DELETE FROM NAME WHERE a . SEMICOLON
    (81) a -> a . OR b

    SEMICOLON       shift and go to state 244
    OR              shift and go to state 102


state 218

    (31) property -> NAME type . null_prod PRIMARY KEY
    (32) property -> NAME type . null_prod
    (33) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (34) null_prod -> . NOT NULL
    (35) null_prod -> . NULL
    (36) null_prod -> .

    NOT             shift and go to state 246
    NULL            shift and go to state 247
    PRIMARY         reduce using rule 36 (null_prod -> .)
    REFERENCE       reduce using rule 36 (null_prod -> .)
    R_PAREN         reduce using rule 36 (null_prod -> .)
    COMMA           reduce using rule 36 (null_prod -> .)

    null_prod                      shift and go to state 245

state 219

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 248


state 220

    (29) properties -> properties COMMA . property
    (31) property -> . NAME type null_prod PRIMARY KEY
    (32) property -> . NAME type null_prod
    (33) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 185

    property                       shift and go to state 249

state 221

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements RETURN a END SEMICOLON

    RETURN          shift and go to state 250


state 222

    (54) parameters -> parameters COMMA . ID AS type
    (55) parameters -> parameters COMMA . ID type

    ID              shift and go to state 251


state 223

    (56) parameters -> ID AS . type
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 252

state 224

    (57) parameters -> ID type .

    R_PAREN         reduce using rule 57 (parameters -> ID type .)
    COMMA           reduce using rule 57 (parameters -> ID type .)


state 225

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END SEMICOLON

    AS              shift and go to state 253


state 226

    (79) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 79 (type -> NCHAR L_PAREN a R_PAREN .)


state 227

    (80) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 80 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 228

    (26) assignments -> assignments COMMA ID ASSIGN a .
    (81) a -> a . OR b

    SEMICOLON       reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    COMMA           reduce using rule 26 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 102


state 229

    (38) select_statement -> SELECT columns FROM NAME WHERE a . SEMICOLON
    (81) a -> a . OR b

    SEMICOLON       shift and go to state 254
    OR              shift and go to state 102


state 230

    (41) columns -> columns COMMA column POINT column .

    FROM            reduce using rule 41 (columns -> columns COMMA column POINT column .)
    COMMA           reduce using rule 41 (columns -> columns COMMA column POINT column .)
    R_PAREN         reduce using rule 41 (columns -> columns COMMA column POINT column .)


state 231

    (73) when_statements -> WHEN a THEN a . when_statements
    (81) a -> a . OR b
    (73) when_statements -> . WHEN a THEN a when_statements
    (74) when_statements -> . ELSE THEN a

    OR              shift and go to state 102
    WHEN            shift and go to state 105
    ELSE            shift and go to state 106

    when_statements                shift and go to state 255

state 232

    (109) call_function_prod -> CONCATENAR L_PAREN a COMMA a . R_PAREN
    (81) a -> a . OR b

    R_PAREN         shift and go to state 256
    OR              shift and go to state 102


state 233

    (113) call_function_prod -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 257


state 234

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN . VALUES L_PAREN vals R_PAREN SEMICOLON

    VALUES          shift and go to state 258


state 235

    (58) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type SEMICOLON
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 259

state 236

    (59) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME . SEMICOLON

    SEMICOLON       shift and go to state 260


state 237

    (60) if_statement -> IF a THEN statements END IF . SEMICOLON

    SEMICOLON       shift and go to state 261


state 238

    (61) if_statement -> IF a THEN statements ELSE statements . END IF SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 262
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 239

    (62) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN AS NAME
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 263
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 240

    (68) column_assignments -> NAME ASSIGN a .
    (81) a -> a . OR b

    WHERE           reduce using rule 68 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 68 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 102


state 241

    (66) update_statement -> UPDATE NAME SET column_assignments WHERE a . SEMICOLON
    (81) a -> a . OR b

    SEMICOLON       shift and go to state 264
    OR              shift and go to state 102


state 242

    (67) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 265


state 243

    (69) while_statement -> WHILE a BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    USE             reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SET             reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    IF              reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    $end            reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    END             reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)
    RETURN          reduce using rule 69 (while_statement -> WHILE a BEGIN statements END SEMICOLON .)


state 244

    (71) delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    ELSE            reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)
    RETURN          reduce using rule 71 (delete_statement -> DELETE FROM NAME WHERE a SEMICOLON .)


state 245

    (31) property -> NAME type null_prod . PRIMARY KEY
    (32) property -> NAME type null_prod .
    (33) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 266
    R_PAREN         reduce using rule 32 (property -> NAME type null_prod .)
    COMMA           reduce using rule 32 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 267


state 246

    (34) null_prod -> NOT . NULL

    NULL            shift and go to state 268


state 247

    (35) null_prod -> NULL .

    PRIMARY         reduce using rule 35 (null_prod -> NULL .)
    REFERENCE       reduce using rule 35 (null_prod -> NULL .)
    R_PAREN         reduce using rule 35 (null_prod -> NULL .)
    COMMA           reduce using rule 35 (null_prod -> NULL .)


state 248

    (28) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .

    CREATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    USE             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SET             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    SELECT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    INSERT          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ALTER           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    IF              reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    EXEC            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DROP            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    WHILE           reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    DELETE          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    $end            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    END             reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    ELSE            reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)
    RETURN          reduce using rule 28 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON .)


state 249

    (29) properties -> properties COMMA property .

    R_PAREN         reduce using rule 29 (properties -> properties COMMA property .)
    COMMA           reduce using rule 29 (properties -> properties COMMA property .)


state 250

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements RETURN a END SEMICOLON
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 269

state 251

    (54) parameters -> parameters COMMA ID . AS type
    (55) parameters -> parameters COMMA ID . type
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 270
    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 271

state 252

    (56) parameters -> ID AS type .

    R_PAREN         reduce using rule 56 (parameters -> ID AS type .)
    COMMA           reduce using rule 56 (parameters -> ID AS type .)


state 253

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END SEMICOLON

    BEGIN           shift and go to state 272


state 254

    (38) select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .

    CREATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    USE             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DECLARE         reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SET             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    SELECT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    INSERT          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ALTER           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    IF              reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    EXEC            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DROP            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    UPDATE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    WHILE           reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    DELETE          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    $end            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    END             reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    ELSE            reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)
    RETURN          reduce using rule 38 (select_statement -> SELECT columns FROM NAME WHERE a SEMICOLON .)


state 255

    (73) when_statements -> WHEN a THEN a when_statements .

    END             reduce using rule 73 (when_statements -> WHEN a THEN a when_statements .)


state 256

    (109) call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .

    POINT           reduce using rule 109 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    FROM            reduce using rule 109 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    COMMA           reduce using rule 109 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)
    R_PAREN         reduce using rule 109 (call_function_prod -> CONCATENAR L_PAREN a COMMA a R_PAREN .)


state 257

    (113) call_function_prod -> CAS L_PAREN a AS type R_PAREN .

    POINT           reduce using rule 113 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    FROM            reduce using rule 113 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 113 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 113 (call_function_prod -> CAS L_PAREN a AS type R_PAREN .)


state 258

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES . L_PAREN vals R_PAREN SEMICOLON

    L_PAREN         shift and go to state 273


state 259

    (58) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type . SEMICOLON

    SEMICOLON       shift and go to state 274


state 260

    (59) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .

    CREATE          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    USE             reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DECLARE         reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SET             reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    SELECT          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    INSERT          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ALTER           reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    IF              reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    EXEC            reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DROP            reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    UPDATE          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    WHILE           reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    TRUNCATE        reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    DELETE          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    $end            reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    END             reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    ELSE            reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)
    RETURN          reduce using rule 59 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME SEMICOLON .)


state 261

    (60) if_statement -> IF a THEN statements END IF SEMICOLON .

    CREATE          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    USE             reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    DECLARE         reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    SET             reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    SELECT          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    INSERT          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    ALTER           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    IF              reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    EXEC            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    DROP            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    UPDATE          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    WHILE           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    TRUNCATE        reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    DELETE          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    $end            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    POINT           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    FROM            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    COMMA           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    TIMES           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    DIVIDE          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    PLUS            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    MINUS           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    EQUALS          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    NOT_EQ          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    LESS_THAN       reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    GREATER_THAN    reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    LESS_EQ         reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    GREATER_EQ      reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    AND             reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    NAME            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    OR              reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    THEN            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    BEGIN           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    SEMICOLON       reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    R_PAREN         reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    AS              reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    END             reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    WHEN            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    ELSE            reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    WHERE           reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)
    RETURN          reduce using rule 60 (if_statement -> IF a THEN statements END IF SEMICOLON .)


state 262

    (61) if_statement -> IF a THEN statements ELSE statements END . IF SEMICOLON

    IF              shift and go to state 275


state 263

    (62) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN SEMICOLON
    (63) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN AS NAME
    (81) a -> a . OR b

    R_PAREN         shift and go to state 276
    OR              shift and go to state 102


state 264

    (66) update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .

    CREATE          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    USE             reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DECLARE         reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SET             reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    SELECT          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    INSERT          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ALTER           reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    IF              reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    EXEC            reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DROP            reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    UPDATE          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    WHILE           reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    TRUNCATE        reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    DELETE          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    $end            reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    END             reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    ELSE            reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)
    RETURN          reduce using rule 66 (update_statement -> UPDATE NAME SET column_assignments WHERE a SEMICOLON .)


state 265

    (67) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 277
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 266

    (31) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 278


state 267

    (33) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 279


state 268

    (34) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 34 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 34 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 34 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 34 (null_prod -> NOT NULL .)


state 269

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements RETURN a END SEMICOLON

    AS              shift and go to state 280


state 270

    (54) parameters -> parameters COMMA ID AS . type
    (75) type -> . INT
    (76) type -> . DECIMAL
    (77) type -> . DATE
    (78) type -> . DATETIME
    (79) type -> . NCHAR L_PAREN a R_PAREN
    (80) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 90
    DECIMAL         shift and go to state 91
    DATE            shift and go to state 92
    DATETIME        shift and go to state 93
    NCHAR           shift and go to state 94
    NVARCHAR        shift and go to state 95

    type                           shift and go to state 281

state 271

    (55) parameters -> parameters COMMA ID type .

    R_PAREN         reduce using rule 55 (parameters -> parameters COMMA ID type .)
    COMMA           reduce using rule 55 (parameters -> parameters COMMA ID type .)


state 272

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    END             reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 282

state 273

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN . vals R_PAREN SEMICOLON
    (50) vals -> . vals COMMA a
    (51) vals -> . a
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    vals                           shift and go to state 283
    a                              shift and go to state 132
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 274

    (58) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .

    CREATE          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    USE             reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DECLARE         reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SET             reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    SELECT          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    INSERT          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ALTER           reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    IF              reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    EXEC            reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DROP            reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    UPDATE          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    WHILE           reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    TRUNCATE        reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    DELETE          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    $end            reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    END             reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    ELSE            reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)
    RETURN          reduce using rule 58 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON .)


state 275

    (61) if_statement -> IF a THEN statements ELSE statements END IF . SEMICOLON

    SEMICOLON       shift and go to state 284


state 276

    (62) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN . SEMICOLON
    (63) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN . AS NAME

    SEMICOLON       shift and go to state 285
    AS              shift and go to state 286


state 277

    (67) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (81) a -> a . OR b

    WHERE           reduce using rule 67 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 67 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 102


state 278

    (31) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 31 (property -> NAME type null_prod PRIMARY KEY .)


state 279

    (33) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 287


state 280

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements RETURN a END SEMICOLON

    BEGIN           shift and go to state 288


state 281

    (54) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 54 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 54 (parameters -> parameters COMMA ID AS type .)


state 282

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    END             shift and go to state 289
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 283

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals . R_PAREN SEMICOLON
    (50) vals -> vals . COMMA a

    R_PAREN         shift and go to state 290
    COMMA           shift and go to state 178


state 284

    (61) if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .

    CREATE          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    USE             reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    DECLARE         reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    SET             reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    SELECT          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    INSERT          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    ALTER           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    IF              reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    EXEC            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    DROP            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    UPDATE          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    WHILE           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    TRUNCATE        reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    DELETE          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    $end            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    POINT           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    FROM            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    COMMA           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    TIMES           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    DIVIDE          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    PLUS            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    MINUS           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    EQUALS          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    NOT_EQ          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    LESS_THAN       reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    GREATER_THAN    reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    LESS_EQ         reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    GREATER_EQ      reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    AND             reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    NAME            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    OR              reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    THEN            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    BEGIN           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    SEMICOLON       reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    R_PAREN         reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    AS              reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    END             reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    WHEN            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    ELSE            reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    WHERE           reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)
    RETURN          reduce using rule 61 (if_statement -> IF a THEN statements ELSE statements END IF SEMICOLON .)


state 285

    (62) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .

    CREATE          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    USE             reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SET             reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SELECT          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    INSERT          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ALTER           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    IF              reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    EXEC            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DROP            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHILE           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DELETE          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    $end            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    POINT           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    FROM            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    COMMA           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    TIMES           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    PLUS            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    MINUS           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    EQUALS          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    NOT_EQ          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    LESS_EQ         reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    GREATER_EQ      reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    AND             reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    NAME            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    OR              reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    THEN            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    BEGIN           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    R_PAREN         reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    AS              reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    END             reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHEN            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    ELSE            reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    WHERE           reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)
    RETURN          reduce using rule 62 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON .)


state 286

    (63) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS . NAME

    NAME            shift and go to state 291


state 287

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 292


state 288

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements RETURN a END SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> .

    RETURN          reduce using rule 3 (statements -> .)
    CREATE          reduce using rule 3 (statements -> .)
    USE             reduce using rule 3 (statements -> .)
    DECLARE         reduce using rule 3 (statements -> .)
    SET             reduce using rule 3 (statements -> .)
    SELECT          reduce using rule 3 (statements -> .)
    INSERT          reduce using rule 3 (statements -> .)
    ALTER           reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    EXEC            reduce using rule 3 (statements -> .)
    DROP            reduce using rule 3 (statements -> .)
    UPDATE          reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    TRUNCATE        reduce using rule 3 (statements -> .)
    DELETE          reduce using rule 3 (statements -> .)

    statements                     shift and go to state 293

state 289

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 294


state 290

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 295


state 291

    (63) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .

    CREATE          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    USE             reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    DECLARE         reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    SET             reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    SELECT          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    INSERT          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    ALTER           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    IF              reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    EXEC            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    DROP            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    UPDATE          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    WHILE           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    TRUNCATE        reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    DELETE          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    $end            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    POINT           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    FROM            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    COMMA           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    TIMES           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    DIVIDE          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    PLUS            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    MINUS           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    EQUALS          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    NOT_EQ          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    LESS_THAN       reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    GREATER_THAN    reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    LESS_EQ         reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    GREATER_EQ      reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    AND             reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    NAME            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    OR              reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    THEN            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    BEGIN           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    SEMICOLON       reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    R_PAREN         reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    AS              reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    END             reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    WHEN            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    ELSE            reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    WHERE           reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)
    RETURN          reduce using rule 63 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME .)


state 292

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 296


state 293

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . RETURN a END SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement
    (5) statement -> . use_statement
    (6) statement -> . declare_statement
    (7) statement -> . set_statement
    (8) statement -> . create_table_statement
    (9) statement -> . select_statement
    (10) statement -> . insert_statement
    (11) statement -> . create_function_statement
    (12) statement -> . create_procedure_statement
    (13) statement -> . alter_table_statement
    (14) statement -> . if_statement
    (15) statement -> . exec_statement
    (16) statement -> . drop_table_statement
    (17) statement -> . update_statement
    (18) statement -> . while_statement
    (19) statement -> . truncate_statement
    (20) statement -> . delete_statement
    (21) create_database_statement -> . CREATE DATA BASE NAME SEMICOLON
    (22) use_statement -> . USE NAME SEMICOLON
    (23) declare_statement -> . DECLARE ID AS type SEMICOLON
    (24) declare_statement -> . DECLARE ID type SEMICOLON
    (25) set_statement -> . SET assignments SEMICOLON
    (28) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN SEMICOLON
    (37) select_statement -> . SELECT columns FROM NAME SEMICOLON
    (38) select_statement -> . SELECT columns FROM NAME WHERE a SEMICOLON
    (39) insert_statement -> . INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON
    (52) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON
    (53) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON
    (58) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type SEMICOLON
    (59) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME SEMICOLON
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME
    (64) exec_statement -> . EXEC NAME vals SEMICOLON
    (65) drop_table_statement -> . DROP TABLE NAME SEMICOLON
    (66) update_statement -> . UPDATE NAME SET column_assignments WHERE a SEMICOLON
    (69) while_statement -> . WHILE a BEGIN statements END SEMICOLON
    (70) truncate_statement -> . TRUNCATE TABLE NAME SEMICOLON
    (71) delete_statement -> . DELETE FROM NAME WHERE a SEMICOLON

    RETURN          shift and go to state 297
    CREATE          shift and go to state 21
    USE             shift and go to state 22
    DECLARE         shift and go to state 23
    SET             shift and go to state 24
    SELECT          shift and go to state 25
    INSERT          shift and go to state 26
    ALTER           shift and go to state 27
    IF              shift and go to state 29
    EXEC            shift and go to state 30
    DROP            shift and go to state 28
    UPDATE          shift and go to state 31
    WHILE           shift and go to state 32
    TRUNCATE        shift and go to state 33
    DELETE          shift and go to state 34

    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    alter_table_statement          shift and go to state 13
    if_statement                   shift and go to state 14
    exec_statement                 shift and go to state 15
    drop_table_statement           shift and go to state 16
    update_statement               shift and go to state 17
    while_statement                shift and go to state 18
    truncate_statement             shift and go to state 19
    delete_statement               shift and go to state 20

state 294

    (53) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .

    CREATE          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    USE             reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DECLARE         reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SET             reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    SELECT          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    INSERT          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ALTER           reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    IF              reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    EXEC            reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DROP            reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    UPDATE          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    TRUNCATE        reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    DELETE          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    $end            reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    END             reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)
    RETURN          reduce using rule 53 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END SEMICOLON .)


state 295

    (39) insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .

    CREATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    USE             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DECLARE         reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SET             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    SELECT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    INSERT          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ALTER           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    EXEC            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DROP            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    UPDATE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    TRUNCATE        reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    DELETE          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    $end            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    END             reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    ELSE            reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)
    RETURN          reduce using rule 39 (insert_statement -> INSERT INTO NAME L_PAREN columns R_PAREN VALUES L_PAREN vals R_PAREN SEMICOLON .)


state 296

    (33) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 297

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN . a END SEMICOLON
    (81) a -> . a OR b
    (82) a -> . b
    (83) b -> . b AND c
    (84) b -> . c
    (85) c -> . NOT_SIGN d
    (86) c -> . d
    (87) d -> . d EQUALS e
    (88) d -> . d NOT_EQ e
    (89) d -> . d LESS_THAN e
    (90) d -> . d GREATER_THAN e
    (91) d -> . d LESS_EQ e
    (92) d -> . d GREATER_EQ e
    (93) d -> . e
    (94) e -> . e PLUS f
    (95) e -> . e MINUS f
    (96) e -> . f
    (97) f -> . f TIMES g
    (98) f -> . f DIVIDE g
    (99) f -> . g
    (100) g -> . MINUS h
    (101) g -> . h
    (102) h -> . INTEGER_VALUE
    (103) h -> . DECIMAL_VALUE
    (104) h -> . STRING
    (105) h -> . ID
    (106) h -> . NAME
    (107) h -> . if_statement
    (60) if_statement -> . IF a THEN statements END IF SEMICOLON
    (61) if_statement -> . IF a THEN statements ELSE statements END IF SEMICOLON
    (62) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN SEMICOLON
    (63) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN AS NAME

    NOT_SIGN        shift and go to state 60
    MINUS           shift and go to state 64
    INTEGER_VALUE   shift and go to state 67
    DECIMAL_VALUE   shift and go to state 68
    STRING          shift and go to state 69
    ID              shift and go to state 70
    NAME            shift and go to state 76
    IF              shift and go to state 29

    a                              shift and go to state 298
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 65
    h                              shift and go to state 66
    if_statement                   shift and go to state 77

state 298

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a . END SEMICOLON
    (81) a -> a . OR b

    END             shift and go to state 299
    OR              shift and go to state 102


state 299

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END . SEMICOLON

    SEMICOLON       shift and go to state 300


state 300

    (52) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .

    CREATE          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    USE             reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    DECLARE         reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    SET             reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    SELECT          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    INSERT          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    ALTER           reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    IF              reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    EXEC            reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    DROP            reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    UPDATE          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    WHILE           reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    TRUNCATE        reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    DELETE          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    $end            reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    END             reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    ELSE            reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)
    RETURN          reduce using rule 52 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements RETURN a END SEMICOLON .)

