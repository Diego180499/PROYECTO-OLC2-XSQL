Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> create_database_statement SEMICOLON
Rule 5     statement -> use_statement SEMICOLON
Rule 6     statement -> declare_statement SEMICOLON
Rule 7     statement -> set_statement SEMICOLON
Rule 8     statement -> create_table_statement SEMICOLON
Rule 9     statement -> select_statement SEMICOLON
Rule 10    statement -> insert_statement SEMICOLON
Rule 11    statement -> create_function_statement SEMICOLON
Rule 12    statement -> create_procedure_statement SEMICOLON
Rule 13    statement -> call_function_statement SEMICOLON
Rule 14    statement -> alter_table_statement SEMICOLON
Rule 15    statement -> if_statement SEMICOLON
Rule 16    statement -> case_statement SEMICOLON
Rule 17    statement -> exec_statement SEMICOLON
Rule 18    statement -> drop_table_statement SEMICOLON
Rule 19    statement -> update_statement SEMICOLON
Rule 20    statement -> while_statement SEMICOLON
Rule 21    statement -> truncate_statement SEMICOLON
Rule 22    statement -> return_statement SEMICOLON
Rule 23    statement -> delete_statement SEMICOLON
Rule 24    create_database_statement -> CREATE DATA BASE NAME
Rule 25    use_statement -> USE NAME
Rule 26    declare_statement -> DECLARE ID AS type
Rule 27    declare_statement -> DECLARE ID type
Rule 28    set_statement -> SET assignments
Rule 29    assignments -> assignments COMMA ID ASSIGN a
Rule 30    assignments -> ID ASSIGN a
Rule 31    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN
Rule 32    properties -> properties COMMA property
Rule 33    properties -> property
Rule 34    property -> NAME type null_prod PRIMARY KEY
Rule 35    property -> NAME type null_prod
Rule 36    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 37    null_prod -> NOT NULL
Rule 38    null_prod -> NULL
Rule 39    null_prod -> <empty>
Rule 40    select_statement -> SELECT columns FROM NAME
Rule 41    select_statement -> SELECT columns FROM NAME WHERE a
Rule 42    insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
Rule 43    column_names -> column_names COMMA NAME
Rule 44    column_names -> NAME
Rule 45    columns -> columns COMMA column
Rule 46    columns -> column
Rule 47    column -> TIMES
Rule 48    column -> NAME
Rule 49    column -> NAME DOT NAME
Rule 50    column -> case_statement NAME
Rule 51    column -> a NAME
Rule 52    column -> if_statement NAME
Rule 53    vals -> vals COMMA a
Rule 54    vals -> a
Rule 55    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
Rule 56    create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
Rule 57    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
Rule 58    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
Rule 59    parameters -> parameters COMMA ID AS type
Rule 60    parameters -> parameters COMMA ID type
Rule 61    parameters -> ID type
Rule 62    parameters -> ID AS type
Rule 63    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type
Rule 64    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME
Rule 65    if_statement -> IF a THEN statements END IF
Rule 66    if_statement -> IF a THEN statements ELSE statements END IF
Rule 67    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN
Rule 68    exec_statement -> EXEC NAME vals
Rule 69    exec_statement -> EXEC NAME args
Rule 70    exec_statement -> EXEC NAME
Rule 71    args -> args COMMA ID ASSIGN a
Rule 72    args -> ID ASSIGN a
Rule 73    drop_table_statement -> DROP TABLE NAME
Rule 74    update_statement -> UPDATE NAME SET column_assignments WHERE a
Rule 75    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 76    column_assignments -> NAME ASSIGN a
Rule 77    while_statement -> WHILE a BEGIN statements END
Rule 78    truncate_statement -> TRUNCATE TABLE NAME
Rule 79    delete_statement -> DELETE FROM NAME WHERE a
Rule 80    case_statement -> CASE when_statements END
Rule 81    when_statements -> WHEN a THEN statements when_statements
Rule 82    when_statements -> ELSE THEN statements
Rule 83    type -> INT
Rule 84    type -> DECIMAL
Rule 85    type -> DATE
Rule 86    type -> DATETIME
Rule 87    type -> NCHAR L_PAREN a R_PAREN
Rule 88    type -> NVARCHAR L_PAREN a R_PAREN
Rule 89    a -> a OR b
Rule 90    a -> b
Rule 91    b -> b AND c
Rule 92    b -> c
Rule 93    c -> NOT_SIGN d
Rule 94    c -> d
Rule 95    d -> d EQUALS e
Rule 96    d -> d NOT_EQ e
Rule 97    d -> d LESS_THAN e
Rule 98    d -> d GREATER_THAN e
Rule 99    d -> d LESS_EQ e
Rule 100   d -> d GREATER_EQ e
Rule 101   d -> e
Rule 102   e -> e PLUS f
Rule 103   e -> e MINUS f
Rule 104   e -> f
Rule 105   f -> f TIMES g
Rule 106   f -> f DIVIDE g
Rule 107   f -> g
Rule 108   g -> MINUS h
Rule 109   g -> h
Rule 110   h -> INTEGER_VALUE
Rule 111   h -> DECIMAL_VALUE
Rule 112   h -> STRING
Rule 113   h -> ID
Rule 114   h -> NAME
Rule 115   h -> L_PAREN a R_PAREN
Rule 116   h -> exec_statement
Rule 117   h -> call_function_statement
Rule 118   call_function_statement -> function_name_prod L_PAREN vals R_PAREN
Rule 119   call_function_statement -> function_name_prod L_PAREN R_PAREN
Rule 120   call_function_statement -> CAS L_PAREN a AS type R_PAREN
Rule 121   function_name_prod -> HOY
Rule 122   function_name_prod -> CONCATENA
Rule 123   function_name_prod -> SUBSTRAER
Rule 124   function_name_prod -> CONTAR
Rule 125   function_name_prod -> SUMA
Rule 126   return_statement -> RETURN a

Terminals, with rules where they appear

ADD                  : 63
ALTER                : 63 64
AND                  : 91
AS                   : 26 55 56 57 58 59 62 120
ASSIGN               : 29 30 71 72 75 76
BASE                 : 24
BEGIN                : 55 56 57 58 77
CAS                  : 120
CASE                 : 80
COLUMN               : 63 64
COMMA                : 29 32 43 45 53 59 60 67 67 71 75
CONCATENA            : 122
CONTAR               : 124
CREATE               : 24 31 55 56 57 58
DATA                 : 24
DATE                 : 85
DATETIME             : 86
DECIMAL              : 84
DECIMAL_VALUE        : 111
DECLARE              : 26 27
DELETE               : 79
DIVIDE               : 106
DOT                  : 49
DROP                 : 64 73
ELSE                 : 66 82
END                  : 55 56 57 58 65 66 77 80
EQUALS               : 95
EXEC                 : 68 69 70
FROM                 : 40 41 79
FUNCTION             : 55 56
GREATER_EQ           : 100
GREATER_THAN         : 98
HOY                  : 121
ID                   : 26 27 29 30 59 60 61 62 71 72 113
IF                   : 65 65 66 66 67
INSERT               : 42
INT                  : 83
INTEGER_VALUE        : 110
INTO                 : 42
KEY                  : 34
LESS_EQ              : 99
LESS_THAN            : 97
L_PAREN              : 31 36 42 42 55 56 57 58 67 87 88 115 118 119 120
MINUS                : 103 108
NAME                 : 24 25 31 34 35 36 36 36 40 41 42 43 44 48 49 49 50 51 52 55 56 57 58 63 63 64 64 68 69 70 73 74 75 76 78 79 114
NCHAR                : 87
NOT                  : 37
NOT_EQ               : 96
NOT_SIGN             : 93
NULL                 : 37 38
NVARCHAR             : 88
OR                   : 89
PLUS                 : 102
PRIMARY              : 34
PROCEDURE            : 57 58
REFERENCE            : 36
RETURN               : 55 56 126
R_PAREN              : 31 36 42 42 55 56 57 58 67 87 88 115 118 119 120
SELECT               : 40 41
SEMICOLON            : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
SET                  : 28 74
STRING               : 112
SUBSTRAER            : 123
SUMA                 : 125
TABLE                : 31 63 64 73 78
THEN                 : 65 66 81 82
TIMES                : 47 105
TRUNCATE             : 78
UPDATE               : 74
USE                  : 25
VALUES               : 42
WHEN                 : 81
WHERE                : 41 74 79
WHILE                : 77
error                : 

Nonterminals, with rules where they appear

a                    : 29 30 41 51 53 54 65 66 67 67 67 71 72 74 75 76 77 79 81 87 88 89 115 120 126
alter_table_statement : 14
args                 : 69 71
assignments          : 28 29
b                    : 89 90 91
c                    : 91 92
call_function_statement : 13 117
case_statement       : 16 50
column               : 45 46
column_assignments   : 74 75
column_names         : 42 43
columns              : 40 41 45
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 93 94 95 96 97 98 99 100
declare_statement    : 6
delete_statement     : 23
drop_table_statement : 18
e                    : 95 96 97 98 99 100 101 102 103
exec_statement       : 17 116
f                    : 102 103 104 105 106
function_name_prod   : 118 119
g                    : 105 106 107
h                    : 108 109
if_statement         : 15 52
init                 : 0
insert_statement     : 10
null_prod            : 34 35 36
parameters           : 55 57 59 60
properties           : 31 32
property             : 32 33
return_statement     : 22
select_statement     : 9
set_statement        : 7
statement            : 2 3
statements           : 1 2 55 56 57 58 65 66 66 77 81 82
truncate_statement   : 21
type                 : 26 27 34 35 36 55 56 59 60 61 62 63 120
update_statement     : 19
use_statement        : 5
vals                 : 42 53 68 118
when_statements      : 80 81
while_statement      : 20

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 3

    (3) statements -> statement .

    CREATE          reduce using rule 3 (statements -> statement .)
    USE             reduce using rule 3 (statements -> statement .)
    DECLARE         reduce using rule 3 (statements -> statement .)
    SET             reduce using rule 3 (statements -> statement .)
    SELECT          reduce using rule 3 (statements -> statement .)
    INSERT          reduce using rule 3 (statements -> statement .)
    CAS             reduce using rule 3 (statements -> statement .)
    ALTER           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    CASE            reduce using rule 3 (statements -> statement .)
    EXEC            reduce using rule 3 (statements -> statement .)
    DROP            reduce using rule 3 (statements -> statement .)
    UPDATE          reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    TRUNCATE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    DELETE          reduce using rule 3 (statements -> statement .)
    HOY             reduce using rule 3 (statements -> statement .)
    CONCATENA       reduce using rule 3 (statements -> statement .)
    SUBSTRAER       reduce using rule 3 (statements -> statement .)
    CONTAR          reduce using rule 3 (statements -> statement .)
    SUMA            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    WHEN            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> create_database_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 5

    (5) statement -> use_statement . SEMICOLON

    SEMICOLON       shift and go to state 49


state 6

    (6) statement -> declare_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 7

    (7) statement -> set_statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 8

    (8) statement -> create_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 52


state 9

    (9) statement -> select_statement . SEMICOLON

    SEMICOLON       shift and go to state 53


state 10

    (10) statement -> insert_statement . SEMICOLON

    SEMICOLON       shift and go to state 54


state 11

    (11) statement -> create_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 12

    (12) statement -> create_procedure_statement . SEMICOLON

    SEMICOLON       shift and go to state 56


state 13

    (13) statement -> call_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 14

    (14) statement -> alter_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 15

    (15) statement -> if_statement . SEMICOLON

    SEMICOLON       shift and go to state 59


state 16

    (16) statement -> case_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 17

    (17) statement -> exec_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 18

    (18) statement -> drop_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 19

    (19) statement -> update_statement . SEMICOLON

    SEMICOLON       shift and go to state 63


state 20

    (20) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 64


state 21

    (21) statement -> truncate_statement . SEMICOLON

    SEMICOLON       shift and go to state 65


state 22

    (22) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 66


state 23

    (23) statement -> delete_statement . SEMICOLON

    SEMICOLON       shift and go to state 67


state 24

    (24) create_database_statement -> CREATE . DATA BASE NAME
    (31) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN
    (55) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> CREATE . FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END

    DATA            shift and go to state 68
    TABLE           shift and go to state 69
    FUNCTION        shift and go to state 70
    PROCEDURE       shift and go to state 71


state 25

    (25) use_statement -> USE . NAME

    NAME            shift and go to state 72


state 26

    (26) declare_statement -> DECLARE . ID AS type
    (27) declare_statement -> DECLARE . ID type

    ID              shift and go to state 73


state 27

    (28) set_statement -> SET . assignments
    (29) assignments -> . assignments COMMA ID ASSIGN a
    (30) assignments -> . ID ASSIGN a

    ID              shift and go to state 75

    assignments                    shift and go to state 74

state 28

    (40) select_statement -> SELECT . columns FROM NAME
    (41) select_statement -> SELECT . columns FROM NAME WHERE a
    (45) columns -> . columns COMMA column
    (46) columns -> . column
    (47) column -> . TIMES
    (48) column -> . NAME
    (49) column -> . NAME DOT NAME
    (50) column -> . case_statement NAME
    (51) column -> . a NAME
    (52) column -> . if_statement NAME
    (80) case_statement -> . CASE when_statements END
    (89) a -> . a OR b
    (90) a -> . b
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    TIMES           shift and go to state 80
    NAME            shift and go to state 77
    CASE            shift and go to state 36
    IF              shift and go to state 35
    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    columns                        shift and go to state 76
    a                              shift and go to state 78
    column                         shift and go to state 79
    case_statement                 shift and go to state 81
    if_statement                   shift and go to state 82
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 29

    (42) insert_statement -> INSERT . INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    INTO            shift and go to state 99


state 30

    (126) return_statement -> RETURN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 100
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 31

    (118) call_function_statement -> function_name_prod . L_PAREN vals R_PAREN
    (119) call_function_statement -> function_name_prod . L_PAREN R_PAREN

    L_PAREN         shift and go to state 102


state 32

    (120) call_function_statement -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 103


state 33

    (63) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME

    TABLE           shift and go to state 104


state 34

    (73) drop_table_statement -> DROP . TABLE NAME

    TABLE           shift and go to state 105


state 35

    (65) if_statement -> IF . a THEN statements END IF
    (66) if_statement -> IF . a THEN statements ELSE statements END IF
    (67) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    L_PAREN         shift and go to state 107
    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 106
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 36

    (80) case_statement -> CASE . when_statements END
    (81) when_statements -> . WHEN a THEN statements when_statements
    (82) when_statements -> . ELSE THEN statements

    WHEN            shift and go to state 109
    ELSE            shift and go to state 110

    when_statements                shift and go to state 108

state 37

    (68) exec_statement -> EXEC . NAME vals
    (69) exec_statement -> EXEC . NAME args
    (70) exec_statement -> EXEC . NAME

    NAME            shift and go to state 111


state 38

    (74) update_statement -> UPDATE . NAME SET column_assignments WHERE a

    NAME            shift and go to state 112


state 39

    (77) while_statement -> WHILE . a BEGIN statements END
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 113
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 40

    (78) truncate_statement -> TRUNCATE . TABLE NAME

    TABLE           shift and go to state 114


state 41

    (79) delete_statement -> DELETE . FROM NAME WHERE a

    FROM            shift and go to state 115


state 42

    (121) function_name_prod -> HOY .

    L_PAREN         reduce using rule 121 (function_name_prod -> HOY .)


state 43

    (122) function_name_prod -> CONCATENA .

    L_PAREN         reduce using rule 122 (function_name_prod -> CONCATENA .)


state 44

    (123) function_name_prod -> SUBSTRAER .

    L_PAREN         reduce using rule 123 (function_name_prod -> SUBSTRAER .)


state 45

    (124) function_name_prod -> CONTAR .

    L_PAREN         reduce using rule 124 (function_name_prod -> CONTAR .)


state 46

    (125) function_name_prod -> SUMA .

    L_PAREN         reduce using rule 125 (function_name_prod -> SUMA .)


state 47

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    CAS             reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    CASE            reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    HOY             reduce using rule 2 (statements -> statements statement .)
    CONCATENA       reduce using rule 2 (statements -> statements statement .)
    SUBSTRAER       reduce using rule 2 (statements -> statements statement .)
    CONTAR          reduce using rule 2 (statements -> statements statement .)
    SUMA            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    WHEN            reduce using rule 2 (statements -> statements statement .)


state 48

    (4) statement -> create_database_statement SEMICOLON .

    CREATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    USE             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SET             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SELECT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    INSERT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CAS             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ALTER           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    IF              reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CASE            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    EXEC            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DROP            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DELETE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    HOY             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONCATENA       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONTAR          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUMA            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    END             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ELSE            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    WHEN            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)


state 49

    (5) statement -> use_statement SEMICOLON .

    CREATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    USE             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DECLARE         reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SET             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SELECT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    INSERT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CAS             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ALTER           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    IF              reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CASE            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    EXEC            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DROP            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    UPDATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DELETE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    HOY             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONCATENA       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONTAR          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUMA            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    $end            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    END             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    WHEN            reduce using rule 5 (statement -> use_statement SEMICOLON .)


state 50

    (6) statement -> declare_statement SEMICOLON .

    CREATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    USE             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DECLARE         reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SET             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SELECT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    INSERT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CAS             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ALTER           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    IF              reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CASE            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    EXEC            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DROP            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    UPDATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DELETE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    HOY             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONCATENA       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONTAR          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUMA            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    $end            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    END             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    WHEN            reduce using rule 6 (statement -> declare_statement SEMICOLON .)


state 51

    (7) statement -> set_statement SEMICOLON .

    CREATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    USE             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DECLARE         reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SET             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SELECT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    INSERT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CAS             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    IF              reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CASE            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    EXEC            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DROP            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    UPDATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DELETE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    HOY             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONCATENA       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONTAR          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUMA            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    $end            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    END             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    WHEN            reduce using rule 7 (statement -> set_statement SEMICOLON .)


state 52

    (8) statement -> create_table_statement SEMICOLON .

    CREATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    USE             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SET             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SELECT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    INSERT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CAS             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    IF              reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CASE            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    EXEC            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DROP            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DELETE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    HOY             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONTAR          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUMA            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    $end            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    END             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    WHEN            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)


state 53

    (9) statement -> select_statement SEMICOLON .

    CREATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    USE             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DECLARE         reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SET             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SELECT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    INSERT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CAS             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    IF              reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CASE            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    EXEC            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DROP            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    UPDATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DELETE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    HOY             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONCATENA       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONTAR          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUMA            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    $end            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    END             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    WHEN            reduce using rule 9 (statement -> select_statement SEMICOLON .)


state 54

    (10) statement -> insert_statement SEMICOLON .

    CREATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    USE             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DECLARE         reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SET             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SELECT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    INSERT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CAS             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    IF              reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CASE            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    EXEC            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DROP            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    UPDATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DELETE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    HOY             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONCATENA       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONTAR          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUMA            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    $end            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    END             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    WHEN            reduce using rule 10 (statement -> insert_statement SEMICOLON .)


state 55

    (11) statement -> create_function_statement SEMICOLON .

    CREATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    USE             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SET             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SELECT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    INSERT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CAS             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    IF              reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CASE            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    EXEC            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DROP            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DELETE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    HOY             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONTAR          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUMA            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    $end            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    END             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    WHEN            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)


state 56

    (12) statement -> create_procedure_statement SEMICOLON .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    USE             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SET             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CAS             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    IF              reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CASE            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    HOY             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONCATENA       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONTAR          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUMA            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    $end            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    END             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    WHEN            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)


state 57

    (13) statement -> call_function_statement SEMICOLON .

    CREATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    USE             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DECLARE         reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SET             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SELECT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    INSERT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CAS             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    IF              reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CASE            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    EXEC            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DROP            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    UPDATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DELETE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    HOY             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONTAR          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUMA            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    $end            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    END             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    WHEN            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)


state 58

    (14) statement -> alter_table_statement SEMICOLON .

    CREATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    USE             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DECLARE         reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SET             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SELECT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    INSERT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CAS             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CASE            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    EXEC            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DROP            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    UPDATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DELETE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    HOY             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONTAR          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUMA            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    END             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    WHEN            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)


state 59

    (15) statement -> if_statement SEMICOLON .

    CREATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    USE             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DECLARE         reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SET             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SELECT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    INSERT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CAS             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CASE            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    EXEC            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DROP            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    UPDATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    TRUNCATE        reduce using rule 15 (statement -> if_statement SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DELETE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    HOY             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONCATENA       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONTAR          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUMA            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    END             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    WHEN            reduce using rule 15 (statement -> if_statement SEMICOLON .)


state 60

    (16) statement -> case_statement SEMICOLON .

    CREATE          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    USE             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    DECLARE         reduce using rule 16 (statement -> case_statement SEMICOLON .)
    SET             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    SELECT          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    INSERT          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CAS             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    IF              reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CASE            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    EXEC            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    DROP            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    UPDATE          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    TRUNCATE        reduce using rule 16 (statement -> case_statement SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    DELETE          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    HOY             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CONCATENA       reduce using rule 16 (statement -> case_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CONTAR          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    SUMA            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    $end            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    END             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    WHEN            reduce using rule 16 (statement -> case_statement SEMICOLON .)


state 61

    (17) statement -> exec_statement SEMICOLON .

    CREATE          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    USE             reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    DECLARE         reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    SET             reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    SELECT          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    INSERT          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    CAS             reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    IF              reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    CASE            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    EXEC            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    DROP            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    UPDATE          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    TRUNCATE        reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    DELETE          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    HOY             reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    CONCATENA       reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    CONTAR          reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    SUMA            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    $end            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    END             reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> exec_statement SEMICOLON .)
    WHEN            reduce using rule 17 (statement -> exec_statement SEMICOLON .)


state 62

    (18) statement -> drop_table_statement SEMICOLON .

    CREATE          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    USE             reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    DECLARE         reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    SET             reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    SELECT          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    INSERT          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    CAS             reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    IF              reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    CASE            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    EXEC            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    DROP            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    UPDATE          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    DELETE          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    HOY             reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    CONTAR          reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    SUMA            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    $end            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    END             reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)
    WHEN            reduce using rule 18 (statement -> drop_table_statement SEMICOLON .)


state 63

    (19) statement -> update_statement SEMICOLON .

    CREATE          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    USE             reduce using rule 19 (statement -> update_statement SEMICOLON .)
    DECLARE         reduce using rule 19 (statement -> update_statement SEMICOLON .)
    SET             reduce using rule 19 (statement -> update_statement SEMICOLON .)
    SELECT          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    INSERT          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    CAS             reduce using rule 19 (statement -> update_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> update_statement SEMICOLON .)
    IF              reduce using rule 19 (statement -> update_statement SEMICOLON .)
    CASE            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    EXEC            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    DROP            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    UPDATE          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> update_statement SEMICOLON .)
    TRUNCATE        reduce using rule 19 (statement -> update_statement SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    DELETE          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    HOY             reduce using rule 19 (statement -> update_statement SEMICOLON .)
    CONCATENA       reduce using rule 19 (statement -> update_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 19 (statement -> update_statement SEMICOLON .)
    CONTAR          reduce using rule 19 (statement -> update_statement SEMICOLON .)
    SUMA            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    $end            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    END             reduce using rule 19 (statement -> update_statement SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> update_statement SEMICOLON .)
    WHEN            reduce using rule 19 (statement -> update_statement SEMICOLON .)


state 64

    (20) statement -> while_statement SEMICOLON .

    CREATE          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    USE             reduce using rule 20 (statement -> while_statement SEMICOLON .)
    DECLARE         reduce using rule 20 (statement -> while_statement SEMICOLON .)
    SET             reduce using rule 20 (statement -> while_statement SEMICOLON .)
    SELECT          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    INSERT          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    CAS             reduce using rule 20 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> while_statement SEMICOLON .)
    IF              reduce using rule 20 (statement -> while_statement SEMICOLON .)
    CASE            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    EXEC            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    DROP            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    UPDATE          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> while_statement SEMICOLON .)
    TRUNCATE        reduce using rule 20 (statement -> while_statement SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    DELETE          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    HOY             reduce using rule 20 (statement -> while_statement SEMICOLON .)
    CONCATENA       reduce using rule 20 (statement -> while_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 20 (statement -> while_statement SEMICOLON .)
    CONTAR          reduce using rule 20 (statement -> while_statement SEMICOLON .)
    SUMA            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    $end            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    END             reduce using rule 20 (statement -> while_statement SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> while_statement SEMICOLON .)
    WHEN            reduce using rule 20 (statement -> while_statement SEMICOLON .)


state 65

    (21) statement -> truncate_statement SEMICOLON .

    CREATE          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    USE             reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    DECLARE         reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    SET             reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    SELECT          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    INSERT          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    CAS             reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    CASE            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    EXEC            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    DROP            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    UPDATE          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    TRUNCATE        reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    DELETE          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    HOY             reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    CONCATENA       reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    CONTAR          reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    SUMA            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    $end            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    END             reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)
    WHEN            reduce using rule 21 (statement -> truncate_statement SEMICOLON .)


state 66

    (22) statement -> return_statement SEMICOLON .

    CREATE          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    USE             reduce using rule 22 (statement -> return_statement SEMICOLON .)
    DECLARE         reduce using rule 22 (statement -> return_statement SEMICOLON .)
    SET             reduce using rule 22 (statement -> return_statement SEMICOLON .)
    SELECT          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    INSERT          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    CAS             reduce using rule 22 (statement -> return_statement SEMICOLON .)
    ALTER           reduce using rule 22 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 22 (statement -> return_statement SEMICOLON .)
    CASE            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    EXEC            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    DROP            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    UPDATE          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> return_statement SEMICOLON .)
    TRUNCATE        reduce using rule 22 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    DELETE          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    HOY             reduce using rule 22 (statement -> return_statement SEMICOLON .)
    CONCATENA       reduce using rule 22 (statement -> return_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 22 (statement -> return_statement SEMICOLON .)
    CONTAR          reduce using rule 22 (statement -> return_statement SEMICOLON .)
    SUMA            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    $end            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    END             reduce using rule 22 (statement -> return_statement SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> return_statement SEMICOLON .)
    WHEN            reduce using rule 22 (statement -> return_statement SEMICOLON .)


state 67

    (23) statement -> delete_statement SEMICOLON .

    CREATE          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    USE             reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    DECLARE         reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    SET             reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    SELECT          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    INSERT          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    CAS             reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    ALTER           reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    IF              reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    CASE            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    EXEC            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    DROP            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    UPDATE          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    TRUNCATE        reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    DELETE          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    HOY             reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    CONCATENA       reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    CONTAR          reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    SUMA            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    $end            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    END             reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    ELSE            reduce using rule 23 (statement -> delete_statement SEMICOLON .)
    WHEN            reduce using rule 23 (statement -> delete_statement SEMICOLON .)


state 68

    (24) create_database_statement -> CREATE DATA . BASE NAME

    BASE            shift and go to state 116


state 69

    (31) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN

    NAME            shift and go to state 117


state 70

    (55) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> CREATE FUNCTION . NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END

    NAME            shift and go to state 118


state 71

    (57) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN R_PAREN AS BEGIN statements END

    NAME            shift and go to state 119


state 72

    (25) use_statement -> USE NAME .

    SEMICOLON       reduce using rule 25 (use_statement -> USE NAME .)


state 73

    (26) declare_statement -> DECLARE ID . AS type
    (27) declare_statement -> DECLARE ID . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 120
    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 121

state 74

    (28) set_statement -> SET assignments .
    (29) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       reduce using rule 28 (set_statement -> SET assignments .)
    COMMA           shift and go to state 128


state 75

    (30) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 129


state 76

    (40) select_statement -> SELECT columns . FROM NAME
    (41) select_statement -> SELECT columns . FROM NAME WHERE a
    (45) columns -> columns . COMMA column

    FROM            shift and go to state 130
    COMMA           shift and go to state 131


state 77

    (48) column -> NAME .
    (49) column -> NAME . DOT NAME
    (114) h -> NAME .

    FROM            reduce using rule 48 (column -> NAME .)
    COMMA           reduce using rule 48 (column -> NAME .)
    DOT             shift and go to state 132
    TIMES           reduce using rule 114 (h -> NAME .)
    DIVIDE          reduce using rule 114 (h -> NAME .)
    PLUS            reduce using rule 114 (h -> NAME .)
    MINUS           reduce using rule 114 (h -> NAME .)
    EQUALS          reduce using rule 114 (h -> NAME .)
    NOT_EQ          reduce using rule 114 (h -> NAME .)
    LESS_THAN       reduce using rule 114 (h -> NAME .)
    GREATER_THAN    reduce using rule 114 (h -> NAME .)
    LESS_EQ         reduce using rule 114 (h -> NAME .)
    GREATER_EQ      reduce using rule 114 (h -> NAME .)
    AND             reduce using rule 114 (h -> NAME .)
    NAME            reduce using rule 114 (h -> NAME .)
    OR              reduce using rule 114 (h -> NAME .)


state 78

    (51) column -> a . NAME
    (89) a -> a . OR b

    NAME            shift and go to state 133
    OR              shift and go to state 134


state 79

    (46) columns -> column .

    FROM            reduce using rule 46 (columns -> column .)
    COMMA           reduce using rule 46 (columns -> column .)


state 80

    (47) column -> TIMES .

    FROM            reduce using rule 47 (column -> TIMES .)
    COMMA           reduce using rule 47 (column -> TIMES .)


state 81

    (50) column -> case_statement . NAME

    NAME            shift and go to state 135


state 82

    (52) column -> if_statement . NAME

    NAME            shift and go to state 136


state 83

    (90) a -> b .
    (91) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 90 (a -> b .)
    OR              reduce using rule 90 (a -> b .)
    SEMICOLON       reduce using rule 90 (a -> b .)
    THEN            reduce using rule 90 (a -> b .)
    BEGIN           reduce using rule 90 (a -> b .)
    R_PAREN         reduce using rule 90 (a -> b .)
    COMMA           reduce using rule 90 (a -> b .)
    AS              reduce using rule 90 (a -> b .)
    EQUALS          reduce using rule 90 (a -> b .)
    NOT_EQ          reduce using rule 90 (a -> b .)
    LESS_THAN       reduce using rule 90 (a -> b .)
    GREATER_THAN    reduce using rule 90 (a -> b .)
    LESS_EQ         reduce using rule 90 (a -> b .)
    GREATER_EQ      reduce using rule 90 (a -> b .)
    TIMES           reduce using rule 90 (a -> b .)
    DIVIDE          reduce using rule 90 (a -> b .)
    PLUS            reduce using rule 90 (a -> b .)
    MINUS           reduce using rule 90 (a -> b .)
    WHERE           reduce using rule 90 (a -> b .)
    AND             shift and go to state 137

  ! AND             [ reduce using rule 90 (a -> b .) ]


state 84

    (115) h -> L_PAREN . a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 138
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 85

    (92) b -> c .

    AND             reduce using rule 92 (b -> c .)
    NAME            reduce using rule 92 (b -> c .)
    OR              reduce using rule 92 (b -> c .)
    SEMICOLON       reduce using rule 92 (b -> c .)
    THEN            reduce using rule 92 (b -> c .)
    BEGIN           reduce using rule 92 (b -> c .)
    R_PAREN         reduce using rule 92 (b -> c .)
    COMMA           reduce using rule 92 (b -> c .)
    AS              reduce using rule 92 (b -> c .)
    EQUALS          reduce using rule 92 (b -> c .)
    NOT_EQ          reduce using rule 92 (b -> c .)
    LESS_THAN       reduce using rule 92 (b -> c .)
    GREATER_THAN    reduce using rule 92 (b -> c .)
    LESS_EQ         reduce using rule 92 (b -> c .)
    GREATER_EQ      reduce using rule 92 (b -> c .)
    TIMES           reduce using rule 92 (b -> c .)
    DIVIDE          reduce using rule 92 (b -> c .)
    PLUS            reduce using rule 92 (b -> c .)
    MINUS           reduce using rule 92 (b -> c .)
    WHERE           reduce using rule 92 (b -> c .)


state 86

    (93) c -> NOT_SIGN . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    d                              shift and go to state 139
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 87

    (94) c -> d .
    (95) d -> d . EQUALS e
    (96) d -> d . NOT_EQ e
    (97) d -> d . LESS_THAN e
    (98) d -> d . GREATER_THAN e
    (99) d -> d . LESS_EQ e
    (100) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 94 (c -> d .)
    NAME            reduce using rule 94 (c -> d .)
    OR              reduce using rule 94 (c -> d .)
    SEMICOLON       reduce using rule 94 (c -> d .)
    THEN            reduce using rule 94 (c -> d .)
    BEGIN           reduce using rule 94 (c -> d .)
    R_PAREN         reduce using rule 94 (c -> d .)
    COMMA           reduce using rule 94 (c -> d .)
    AS              reduce using rule 94 (c -> d .)
    TIMES           reduce using rule 94 (c -> d .)
    DIVIDE          reduce using rule 94 (c -> d .)
    PLUS            reduce using rule 94 (c -> d .)
    MINUS           reduce using rule 94 (c -> d .)
    WHERE           reduce using rule 94 (c -> d .)
    EQUALS          shift and go to state 140
    NOT_EQ          shift and go to state 141
    LESS_THAN       shift and go to state 142
    GREATER_THAN    shift and go to state 143
    LESS_EQ         shift and go to state 144
    GREATER_EQ      shift and go to state 145

  ! EQUALS          [ reduce using rule 94 (c -> d .) ]
  ! NOT_EQ          [ reduce using rule 94 (c -> d .) ]
  ! LESS_THAN       [ reduce using rule 94 (c -> d .) ]
  ! GREATER_THAN    [ reduce using rule 94 (c -> d .) ]
  ! LESS_EQ         [ reduce using rule 94 (c -> d .) ]
  ! GREATER_EQ      [ reduce using rule 94 (c -> d .) ]


state 88

    (101) d -> e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 101 (d -> e .)
    NOT_EQ          reduce using rule 101 (d -> e .)
    LESS_THAN       reduce using rule 101 (d -> e .)
    GREATER_THAN    reduce using rule 101 (d -> e .)
    LESS_EQ         reduce using rule 101 (d -> e .)
    GREATER_EQ      reduce using rule 101 (d -> e .)
    AND             reduce using rule 101 (d -> e .)
    NAME            reduce using rule 101 (d -> e .)
    OR              reduce using rule 101 (d -> e .)
    SEMICOLON       reduce using rule 101 (d -> e .)
    THEN            reduce using rule 101 (d -> e .)
    BEGIN           reduce using rule 101 (d -> e .)
    R_PAREN         reduce using rule 101 (d -> e .)
    COMMA           reduce using rule 101 (d -> e .)
    AS              reduce using rule 101 (d -> e .)
    TIMES           reduce using rule 101 (d -> e .)
    DIVIDE          reduce using rule 101 (d -> e .)
    WHERE           reduce using rule 101 (d -> e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 101 (d -> e .) ]
  ! MINUS           [ reduce using rule 101 (d -> e .) ]


state 89

    (104) e -> f .
    (105) f -> f . TIMES g
    (106) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 104 (e -> f .)
    MINUS           reduce using rule 104 (e -> f .)
    EQUALS          reduce using rule 104 (e -> f .)
    NOT_EQ          reduce using rule 104 (e -> f .)
    LESS_THAN       reduce using rule 104 (e -> f .)
    GREATER_THAN    reduce using rule 104 (e -> f .)
    LESS_EQ         reduce using rule 104 (e -> f .)
    GREATER_EQ      reduce using rule 104 (e -> f .)
    AND             reduce using rule 104 (e -> f .)
    NAME            reduce using rule 104 (e -> f .)
    OR              reduce using rule 104 (e -> f .)
    SEMICOLON       reduce using rule 104 (e -> f .)
    THEN            reduce using rule 104 (e -> f .)
    BEGIN           reduce using rule 104 (e -> f .)
    R_PAREN         reduce using rule 104 (e -> f .)
    COMMA           reduce using rule 104 (e -> f .)
    AS              reduce using rule 104 (e -> f .)
    WHERE           reduce using rule 104 (e -> f .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149

  ! TIMES           [ reduce using rule 104 (e -> f .) ]
  ! DIVIDE          [ reduce using rule 104 (e -> f .) ]


state 90

    (108) g -> MINUS . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    h                              shift and go to state 150
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 91

    (107) f -> g .

    TIMES           reduce using rule 107 (f -> g .)
    DIVIDE          reduce using rule 107 (f -> g .)
    PLUS            reduce using rule 107 (f -> g .)
    MINUS           reduce using rule 107 (f -> g .)
    EQUALS          reduce using rule 107 (f -> g .)
    NOT_EQ          reduce using rule 107 (f -> g .)
    LESS_THAN       reduce using rule 107 (f -> g .)
    GREATER_THAN    reduce using rule 107 (f -> g .)
    LESS_EQ         reduce using rule 107 (f -> g .)
    GREATER_EQ      reduce using rule 107 (f -> g .)
    AND             reduce using rule 107 (f -> g .)
    NAME            reduce using rule 107 (f -> g .)
    OR              reduce using rule 107 (f -> g .)
    SEMICOLON       reduce using rule 107 (f -> g .)
    THEN            reduce using rule 107 (f -> g .)
    BEGIN           reduce using rule 107 (f -> g .)
    R_PAREN         reduce using rule 107 (f -> g .)
    COMMA           reduce using rule 107 (f -> g .)
    AS              reduce using rule 107 (f -> g .)
    WHERE           reduce using rule 107 (f -> g .)


state 92

    (109) g -> h .

    TIMES           reduce using rule 109 (g -> h .)
    DIVIDE          reduce using rule 109 (g -> h .)
    PLUS            reduce using rule 109 (g -> h .)
    MINUS           reduce using rule 109 (g -> h .)
    EQUALS          reduce using rule 109 (g -> h .)
    NOT_EQ          reduce using rule 109 (g -> h .)
    LESS_THAN       reduce using rule 109 (g -> h .)
    GREATER_THAN    reduce using rule 109 (g -> h .)
    LESS_EQ         reduce using rule 109 (g -> h .)
    GREATER_EQ      reduce using rule 109 (g -> h .)
    AND             reduce using rule 109 (g -> h .)
    NAME            reduce using rule 109 (g -> h .)
    OR              reduce using rule 109 (g -> h .)
    SEMICOLON       reduce using rule 109 (g -> h .)
    THEN            reduce using rule 109 (g -> h .)
    BEGIN           reduce using rule 109 (g -> h .)
    R_PAREN         reduce using rule 109 (g -> h .)
    COMMA           reduce using rule 109 (g -> h .)
    AS              reduce using rule 109 (g -> h .)
    WHERE           reduce using rule 109 (g -> h .)


state 93

    (110) h -> INTEGER_VALUE .

    TIMES           reduce using rule 110 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 110 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 110 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 110 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 110 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 110 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 110 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 110 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 110 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 110 (h -> INTEGER_VALUE .)
    AND             reduce using rule 110 (h -> INTEGER_VALUE .)
    NAME            reduce using rule 110 (h -> INTEGER_VALUE .)
    OR              reduce using rule 110 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 110 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 110 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 110 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 110 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 110 (h -> INTEGER_VALUE .)
    AS              reduce using rule 110 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 110 (h -> INTEGER_VALUE .)


state 94

    (111) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 111 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 111 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 111 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 111 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 111 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 111 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 111 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 111 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 111 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 111 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 111 (h -> DECIMAL_VALUE .)
    NAME            reduce using rule 111 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 111 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 111 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 111 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 111 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 111 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 111 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 111 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 111 (h -> DECIMAL_VALUE .)


state 95

    (112) h -> STRING .

    TIMES           reduce using rule 112 (h -> STRING .)
    DIVIDE          reduce using rule 112 (h -> STRING .)
    PLUS            reduce using rule 112 (h -> STRING .)
    MINUS           reduce using rule 112 (h -> STRING .)
    EQUALS          reduce using rule 112 (h -> STRING .)
    NOT_EQ          reduce using rule 112 (h -> STRING .)
    LESS_THAN       reduce using rule 112 (h -> STRING .)
    GREATER_THAN    reduce using rule 112 (h -> STRING .)
    LESS_EQ         reduce using rule 112 (h -> STRING .)
    GREATER_EQ      reduce using rule 112 (h -> STRING .)
    AND             reduce using rule 112 (h -> STRING .)
    NAME            reduce using rule 112 (h -> STRING .)
    OR              reduce using rule 112 (h -> STRING .)
    SEMICOLON       reduce using rule 112 (h -> STRING .)
    THEN            reduce using rule 112 (h -> STRING .)
    BEGIN           reduce using rule 112 (h -> STRING .)
    R_PAREN         reduce using rule 112 (h -> STRING .)
    COMMA           reduce using rule 112 (h -> STRING .)
    AS              reduce using rule 112 (h -> STRING .)
    WHERE           reduce using rule 112 (h -> STRING .)


state 96

    (113) h -> ID .

    TIMES           reduce using rule 113 (h -> ID .)
    DIVIDE          reduce using rule 113 (h -> ID .)
    PLUS            reduce using rule 113 (h -> ID .)
    MINUS           reduce using rule 113 (h -> ID .)
    EQUALS          reduce using rule 113 (h -> ID .)
    NOT_EQ          reduce using rule 113 (h -> ID .)
    LESS_THAN       reduce using rule 113 (h -> ID .)
    GREATER_THAN    reduce using rule 113 (h -> ID .)
    LESS_EQ         reduce using rule 113 (h -> ID .)
    GREATER_EQ      reduce using rule 113 (h -> ID .)
    AND             reduce using rule 113 (h -> ID .)
    NAME            reduce using rule 113 (h -> ID .)
    OR              reduce using rule 113 (h -> ID .)
    SEMICOLON       reduce using rule 113 (h -> ID .)
    THEN            reduce using rule 113 (h -> ID .)
    BEGIN           reduce using rule 113 (h -> ID .)
    R_PAREN         reduce using rule 113 (h -> ID .)
    COMMA           reduce using rule 113 (h -> ID .)
    AS              reduce using rule 113 (h -> ID .)
    WHERE           reduce using rule 113 (h -> ID .)


state 97

    (116) h -> exec_statement .

    TIMES           reduce using rule 116 (h -> exec_statement .)
    DIVIDE          reduce using rule 116 (h -> exec_statement .)
    PLUS            reduce using rule 116 (h -> exec_statement .)
    MINUS           reduce using rule 116 (h -> exec_statement .)
    EQUALS          reduce using rule 116 (h -> exec_statement .)
    NOT_EQ          reduce using rule 116 (h -> exec_statement .)
    LESS_THAN       reduce using rule 116 (h -> exec_statement .)
    GREATER_THAN    reduce using rule 116 (h -> exec_statement .)
    LESS_EQ         reduce using rule 116 (h -> exec_statement .)
    GREATER_EQ      reduce using rule 116 (h -> exec_statement .)
    AND             reduce using rule 116 (h -> exec_statement .)
    NAME            reduce using rule 116 (h -> exec_statement .)
    OR              reduce using rule 116 (h -> exec_statement .)
    SEMICOLON       reduce using rule 116 (h -> exec_statement .)
    THEN            reduce using rule 116 (h -> exec_statement .)
    BEGIN           reduce using rule 116 (h -> exec_statement .)
    R_PAREN         reduce using rule 116 (h -> exec_statement .)
    COMMA           reduce using rule 116 (h -> exec_statement .)
    AS              reduce using rule 116 (h -> exec_statement .)
    WHERE           reduce using rule 116 (h -> exec_statement .)


state 98

    (117) h -> call_function_statement .

    TIMES           reduce using rule 117 (h -> call_function_statement .)
    DIVIDE          reduce using rule 117 (h -> call_function_statement .)
    PLUS            reduce using rule 117 (h -> call_function_statement .)
    MINUS           reduce using rule 117 (h -> call_function_statement .)
    EQUALS          reduce using rule 117 (h -> call_function_statement .)
    NOT_EQ          reduce using rule 117 (h -> call_function_statement .)
    LESS_THAN       reduce using rule 117 (h -> call_function_statement .)
    GREATER_THAN    reduce using rule 117 (h -> call_function_statement .)
    LESS_EQ         reduce using rule 117 (h -> call_function_statement .)
    GREATER_EQ      reduce using rule 117 (h -> call_function_statement .)
    AND             reduce using rule 117 (h -> call_function_statement .)
    NAME            reduce using rule 117 (h -> call_function_statement .)
    OR              reduce using rule 117 (h -> call_function_statement .)
    SEMICOLON       reduce using rule 117 (h -> call_function_statement .)
    THEN            reduce using rule 117 (h -> call_function_statement .)
    BEGIN           reduce using rule 117 (h -> call_function_statement .)
    R_PAREN         reduce using rule 117 (h -> call_function_statement .)
    COMMA           reduce using rule 117 (h -> call_function_statement .)
    AS              reduce using rule 117 (h -> call_function_statement .)
    WHERE           reduce using rule 117 (h -> call_function_statement .)


state 99

    (42) insert_statement -> INSERT INTO . NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    NAME            shift and go to state 151


state 100

    (126) return_statement -> RETURN a .
    (89) a -> a . OR b

    SEMICOLON       reduce using rule 126 (return_statement -> RETURN a .)
    OR              shift and go to state 134


state 101

    (114) h -> NAME .

    TIMES           reduce using rule 114 (h -> NAME .)
    DIVIDE          reduce using rule 114 (h -> NAME .)
    PLUS            reduce using rule 114 (h -> NAME .)
    MINUS           reduce using rule 114 (h -> NAME .)
    EQUALS          reduce using rule 114 (h -> NAME .)
    NOT_EQ          reduce using rule 114 (h -> NAME .)
    LESS_THAN       reduce using rule 114 (h -> NAME .)
    GREATER_THAN    reduce using rule 114 (h -> NAME .)
    LESS_EQ         reduce using rule 114 (h -> NAME .)
    GREATER_EQ      reduce using rule 114 (h -> NAME .)
    AND             reduce using rule 114 (h -> NAME .)
    OR              reduce using rule 114 (h -> NAME .)
    SEMICOLON       reduce using rule 114 (h -> NAME .)
    THEN            reduce using rule 114 (h -> NAME .)
    BEGIN           reduce using rule 114 (h -> NAME .)
    R_PAREN         reduce using rule 114 (h -> NAME .)
    NAME            reduce using rule 114 (h -> NAME .)
    COMMA           reduce using rule 114 (h -> NAME .)
    AS              reduce using rule 114 (h -> NAME .)
    WHERE           reduce using rule 114 (h -> NAME .)


state 102

    (118) call_function_statement -> function_name_prod L_PAREN . vals R_PAREN
    (119) call_function_statement -> function_name_prod L_PAREN . R_PAREN
    (53) vals -> . vals COMMA a
    (54) vals -> . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    R_PAREN         shift and go to state 153
    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    function_name_prod             shift and go to state 31
    vals                           shift and go to state 152
    a                              shift and go to state 154
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98

state 103

    (120) call_function_statement -> CAS L_PAREN . a AS type R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 155
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 104

    (63) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type
    (64) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME

    NAME            shift and go to state 156


state 105

    (73) drop_table_statement -> DROP TABLE . NAME

    NAME            shift and go to state 157


state 106

    (65) if_statement -> IF a . THEN statements END IF
    (66) if_statement -> IF a . THEN statements ELSE statements END IF
    (89) a -> a . OR b

    THEN            shift and go to state 158
    OR              shift and go to state 134


state 107

    (67) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN
    (115) h -> L_PAREN . a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 159
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 108

    (80) case_statement -> CASE when_statements . END

    END             shift and go to state 160


state 109

    (81) when_statements -> WHEN . a THEN statements when_statements
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 161
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 110

    (82) when_statements -> ELSE . THEN statements

    THEN            shift and go to state 162


state 111

    (68) exec_statement -> EXEC NAME . vals
    (69) exec_statement -> EXEC NAME . args
    (70) exec_statement -> EXEC NAME .
    (53) vals -> . vals COMMA a
    (54) vals -> . a
    (71) args -> . args COMMA ID ASSIGN a
    (72) args -> . ID ASSIGN a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    SEMICOLON       reduce using rule 70 (exec_statement -> EXEC NAME .)
    TIMES           reduce using rule 70 (exec_statement -> EXEC NAME .)
    DIVIDE          reduce using rule 70 (exec_statement -> EXEC NAME .)
    PLUS            reduce using rule 70 (exec_statement -> EXEC NAME .)
    EQUALS          reduce using rule 70 (exec_statement -> EXEC NAME .)
    NOT_EQ          reduce using rule 70 (exec_statement -> EXEC NAME .)
    LESS_THAN       reduce using rule 70 (exec_statement -> EXEC NAME .)
    GREATER_THAN    reduce using rule 70 (exec_statement -> EXEC NAME .)
    LESS_EQ         reduce using rule 70 (exec_statement -> EXEC NAME .)
    GREATER_EQ      reduce using rule 70 (exec_statement -> EXEC NAME .)
    AND             reduce using rule 70 (exec_statement -> EXEC NAME .)
    OR              reduce using rule 70 (exec_statement -> EXEC NAME .)
    THEN            reduce using rule 70 (exec_statement -> EXEC NAME .)
    BEGIN           reduce using rule 70 (exec_statement -> EXEC NAME .)
    R_PAREN         reduce using rule 70 (exec_statement -> EXEC NAME .)
    COMMA           reduce using rule 70 (exec_statement -> EXEC NAME .)
    AS              reduce using rule 70 (exec_statement -> EXEC NAME .)
    WHERE           reduce using rule 70 (exec_statement -> EXEC NAME .)
    ID              shift and go to state 165
    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

  ! MINUS           [ reduce using rule 70 (exec_statement -> EXEC NAME .) ]
  ! NAME            [ reduce using rule 70 (exec_statement -> EXEC NAME .) ]

    vals                           shift and go to state 163
    args                           shift and go to state 164
    a                              shift and go to state 154
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 112

    (74) update_statement -> UPDATE NAME . SET column_assignments WHERE a

    SET             shift and go to state 166


state 113

    (77) while_statement -> WHILE a . BEGIN statements END
    (89) a -> a . OR b

    BEGIN           shift and go to state 167
    OR              shift and go to state 134


state 114

    (78) truncate_statement -> TRUNCATE TABLE . NAME

    NAME            shift and go to state 168


state 115

    (79) delete_statement -> DELETE FROM . NAME WHERE a

    NAME            shift and go to state 169


state 116

    (24) create_database_statement -> CREATE DATA BASE . NAME

    NAME            shift and go to state 170


state 117

    (31) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN

    L_PAREN         shift and go to state 171


state 118

    (55) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> CREATE FUNCTION NAME . L_PAREN R_PAREN RETURN type AS BEGIN statements END

    L_PAREN         shift and go to state 172


state 119

    (57) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN R_PAREN AS BEGIN statements END

    L_PAREN         shift and go to state 173


state 120

    (26) declare_statement -> DECLARE ID AS . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 174

state 121

    (27) declare_statement -> DECLARE ID type .

    SEMICOLON       reduce using rule 27 (declare_statement -> DECLARE ID type .)


state 122

    (83) type -> INT .

    SEMICOLON       reduce using rule 83 (type -> INT .)
    R_PAREN         reduce using rule 83 (type -> INT .)
    NOT             reduce using rule 83 (type -> INT .)
    NULL            reduce using rule 83 (type -> INT .)
    PRIMARY         reduce using rule 83 (type -> INT .)
    REFERENCE       reduce using rule 83 (type -> INT .)
    COMMA           reduce using rule 83 (type -> INT .)
    AS              reduce using rule 83 (type -> INT .)


state 123

    (84) type -> DECIMAL .

    SEMICOLON       reduce using rule 84 (type -> DECIMAL .)
    R_PAREN         reduce using rule 84 (type -> DECIMAL .)
    NOT             reduce using rule 84 (type -> DECIMAL .)
    NULL            reduce using rule 84 (type -> DECIMAL .)
    PRIMARY         reduce using rule 84 (type -> DECIMAL .)
    REFERENCE       reduce using rule 84 (type -> DECIMAL .)
    COMMA           reduce using rule 84 (type -> DECIMAL .)
    AS              reduce using rule 84 (type -> DECIMAL .)


state 124

    (85) type -> DATE .

    SEMICOLON       reduce using rule 85 (type -> DATE .)
    R_PAREN         reduce using rule 85 (type -> DATE .)
    NOT             reduce using rule 85 (type -> DATE .)
    NULL            reduce using rule 85 (type -> DATE .)
    PRIMARY         reduce using rule 85 (type -> DATE .)
    REFERENCE       reduce using rule 85 (type -> DATE .)
    COMMA           reduce using rule 85 (type -> DATE .)
    AS              reduce using rule 85 (type -> DATE .)


state 125

    (86) type -> DATETIME .

    SEMICOLON       reduce using rule 86 (type -> DATETIME .)
    R_PAREN         reduce using rule 86 (type -> DATETIME .)
    NOT             reduce using rule 86 (type -> DATETIME .)
    NULL            reduce using rule 86 (type -> DATETIME .)
    PRIMARY         reduce using rule 86 (type -> DATETIME .)
    REFERENCE       reduce using rule 86 (type -> DATETIME .)
    COMMA           reduce using rule 86 (type -> DATETIME .)
    AS              reduce using rule 86 (type -> DATETIME .)


state 126

    (87) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 175


state 127

    (88) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 176


state 128

    (29) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 177


state 129

    (30) assignments -> ID ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 178
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 130

    (40) select_statement -> SELECT columns FROM . NAME
    (41) select_statement -> SELECT columns FROM . NAME WHERE a

    NAME            shift and go to state 179


state 131

    (45) columns -> columns COMMA . column
    (47) column -> . TIMES
    (48) column -> . NAME
    (49) column -> . NAME DOT NAME
    (50) column -> . case_statement NAME
    (51) column -> . a NAME
    (52) column -> . if_statement NAME
    (80) case_statement -> . CASE when_statements END
    (89) a -> . a OR b
    (90) a -> . b
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    TIMES           shift and go to state 80
    NAME            shift and go to state 77
    CASE            shift and go to state 36
    IF              shift and go to state 35
    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    column                         shift and go to state 180
    case_statement                 shift and go to state 81
    a                              shift and go to state 78
    if_statement                   shift and go to state 82
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 132

    (49) column -> NAME DOT . NAME

    NAME            shift and go to state 181


state 133

    (51) column -> a NAME .

    FROM            reduce using rule 51 (column -> a NAME .)
    COMMA           reduce using rule 51 (column -> a NAME .)


state 134

    (89) a -> a OR . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    b                              shift and go to state 182
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 135

    (50) column -> case_statement NAME .

    FROM            reduce using rule 50 (column -> case_statement NAME .)
    COMMA           reduce using rule 50 (column -> case_statement NAME .)


state 136

    (52) column -> if_statement NAME .

    FROM            reduce using rule 52 (column -> if_statement NAME .)
    COMMA           reduce using rule 52 (column -> if_statement NAME .)


state 137

    (91) b -> b AND . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    c                              shift and go to state 183
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 138

    (115) h -> L_PAREN a . R_PAREN
    (89) a -> a . OR b

    R_PAREN         shift and go to state 184
    OR              shift and go to state 134


state 139

    (93) c -> NOT_SIGN d .
    (95) d -> d . EQUALS e
    (96) d -> d . NOT_EQ e
    (97) d -> d . LESS_THAN e
    (98) d -> d . GREATER_THAN e
    (99) d -> d . LESS_EQ e
    (100) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 93 (c -> NOT_SIGN d .)
    NAME            reduce using rule 93 (c -> NOT_SIGN d .)
    OR              reduce using rule 93 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 93 (c -> NOT_SIGN d .)
    THEN            reduce using rule 93 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 93 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 93 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 93 (c -> NOT_SIGN d .)
    AS              reduce using rule 93 (c -> NOT_SIGN d .)
    TIMES           reduce using rule 93 (c -> NOT_SIGN d .)
    DIVIDE          reduce using rule 93 (c -> NOT_SIGN d .)
    PLUS            reduce using rule 93 (c -> NOT_SIGN d .)
    MINUS           reduce using rule 93 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 93 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 140
    NOT_EQ          shift and go to state 141
    LESS_THAN       shift and go to state 142
    GREATER_THAN    shift and go to state 143
    LESS_EQ         shift and go to state 144
    GREATER_EQ      shift and go to state 145

  ! EQUALS          [ reduce using rule 93 (c -> NOT_SIGN d .) ]
  ! NOT_EQ          [ reduce using rule 93 (c -> NOT_SIGN d .) ]
  ! LESS_THAN       [ reduce using rule 93 (c -> NOT_SIGN d .) ]
  ! GREATER_THAN    [ reduce using rule 93 (c -> NOT_SIGN d .) ]
  ! LESS_EQ         [ reduce using rule 93 (c -> NOT_SIGN d .) ]
  ! GREATER_EQ      [ reduce using rule 93 (c -> NOT_SIGN d .) ]


state 140

    (95) d -> d EQUALS . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 185
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 141

    (96) d -> d NOT_EQ . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 186
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 142

    (97) d -> d LESS_THAN . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 187
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 143

    (98) d -> d GREATER_THAN . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 188
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 144

    (99) d -> d LESS_EQ . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 189
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 145

    (100) d -> d GREATER_EQ . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    e                              shift and go to state 190
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 146

    (102) e -> e PLUS . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    f                              shift and go to state 191
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 147

    (103) e -> e MINUS . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    f                              shift and go to state 192
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 148

    (105) f -> f TIMES . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    g                              shift and go to state 193
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 149

    (106) f -> f DIVIDE . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    g                              shift and go to state 194
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 150

    (108) g -> MINUS h .

    TIMES           reduce using rule 108 (g -> MINUS h .)
    DIVIDE          reduce using rule 108 (g -> MINUS h .)
    PLUS            reduce using rule 108 (g -> MINUS h .)
    MINUS           reduce using rule 108 (g -> MINUS h .)
    EQUALS          reduce using rule 108 (g -> MINUS h .)
    NOT_EQ          reduce using rule 108 (g -> MINUS h .)
    LESS_THAN       reduce using rule 108 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 108 (g -> MINUS h .)
    LESS_EQ         reduce using rule 108 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 108 (g -> MINUS h .)
    AND             reduce using rule 108 (g -> MINUS h .)
    NAME            reduce using rule 108 (g -> MINUS h .)
    OR              reduce using rule 108 (g -> MINUS h .)
    SEMICOLON       reduce using rule 108 (g -> MINUS h .)
    THEN            reduce using rule 108 (g -> MINUS h .)
    BEGIN           reduce using rule 108 (g -> MINUS h .)
    R_PAREN         reduce using rule 108 (g -> MINUS h .)
    COMMA           reduce using rule 108 (g -> MINUS h .)
    AS              reduce using rule 108 (g -> MINUS h .)
    WHERE           reduce using rule 108 (g -> MINUS h .)


state 151

    (42) insert_statement -> INSERT INTO NAME . L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 195


state 152

    (118) call_function_statement -> function_name_prod L_PAREN vals . R_PAREN
    (53) vals -> vals . COMMA a

    R_PAREN         shift and go to state 196
    COMMA           shift and go to state 197


state 153

    (119) call_function_statement -> function_name_prod L_PAREN R_PAREN .

    SEMICOLON       reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    TIMES           reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    PLUS            reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    MINUS           reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    EQUALS          reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    NOT_EQ          reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_THAN       reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_THAN    reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_EQ         reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_EQ      reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AND             reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    NAME            reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    OR              reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    THEN            reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    BEGIN           reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    COMMA           reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AS              reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    WHERE           reduce using rule 119 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)


state 154

    (54) vals -> a .
    (89) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 54 (vals -> a .)
    COMMA           reduce using rule 54 (vals -> a .)
    EQUALS          reduce using rule 54 (vals -> a .)
    NOT_EQ          reduce using rule 54 (vals -> a .)
    LESS_THAN       reduce using rule 54 (vals -> a .)
    GREATER_THAN    reduce using rule 54 (vals -> a .)
    LESS_EQ         reduce using rule 54 (vals -> a .)
    GREATER_EQ      reduce using rule 54 (vals -> a .)
    AND             reduce using rule 54 (vals -> a .)
    NAME            reduce using rule 54 (vals -> a .)
    SEMICOLON       reduce using rule 54 (vals -> a .)
    THEN            reduce using rule 54 (vals -> a .)
    BEGIN           reduce using rule 54 (vals -> a .)
    AS              reduce using rule 54 (vals -> a .)
    TIMES           reduce using rule 54 (vals -> a .)
    DIVIDE          reduce using rule 54 (vals -> a .)
    PLUS            reduce using rule 54 (vals -> a .)
    MINUS           reduce using rule 54 (vals -> a .)
    WHERE           reduce using rule 54 (vals -> a .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 54 (vals -> a .) ]


state 155

    (120) call_function_statement -> CAS L_PAREN a . AS type R_PAREN
    (89) a -> a . OR b

    AS              shift and go to state 198
    OR              shift and go to state 134


state 156

    (63) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type
    (64) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME

    ADD             shift and go to state 199
    DROP            shift and go to state 200


state 157

    (73) drop_table_statement -> DROP TABLE NAME .

    SEMICOLON       reduce using rule 73 (drop_table_statement -> DROP TABLE NAME .)


state 158

    (65) if_statement -> IF a THEN . statements END IF
    (66) if_statement -> IF a THEN . statements ELSE statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 201
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 159

    (67) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN
    (115) h -> L_PAREN a . R_PAREN
    (89) a -> a . OR b

    COMMA           shift and go to state 202
    R_PAREN         shift and go to state 184
    OR              shift and go to state 134


state 160

    (80) case_statement -> CASE when_statements END .

    SEMICOLON       reduce using rule 80 (case_statement -> CASE when_statements END .)
    NAME            reduce using rule 80 (case_statement -> CASE when_statements END .)


state 161

    (81) when_statements -> WHEN a . THEN statements when_statements
    (89) a -> a . OR b

    THEN            shift and go to state 203
    OR              shift and go to state 134


state 162

    (82) when_statements -> ELSE THEN . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 204
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 163

    (68) exec_statement -> EXEC NAME vals .
    (53) vals -> vals . COMMA a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    TIMES           reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    DIVIDE          reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    PLUS            reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    MINUS           reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    EQUALS          reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    NOT_EQ          reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    LESS_THAN       reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    GREATER_THAN    reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    LESS_EQ         reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    GREATER_EQ      reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    AND             reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    NAME            reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    OR              reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    THEN            reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    BEGIN           reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    R_PAREN         reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    AS              reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    WHERE           reduce using rule 68 (exec_statement -> EXEC NAME vals .)
    COMMA           shift and go to state 197

  ! COMMA           [ reduce using rule 68 (exec_statement -> EXEC NAME vals .) ]


state 164

    (69) exec_statement -> EXEC NAME args .
    (71) args -> args . COMMA ID ASSIGN a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 69 (exec_statement -> EXEC NAME args .)
    TIMES           reduce using rule 69 (exec_statement -> EXEC NAME args .)
    DIVIDE          reduce using rule 69 (exec_statement -> EXEC NAME args .)
    PLUS            reduce using rule 69 (exec_statement -> EXEC NAME args .)
    MINUS           reduce using rule 69 (exec_statement -> EXEC NAME args .)
    EQUALS          reduce using rule 69 (exec_statement -> EXEC NAME args .)
    NOT_EQ          reduce using rule 69 (exec_statement -> EXEC NAME args .)
    LESS_THAN       reduce using rule 69 (exec_statement -> EXEC NAME args .)
    GREATER_THAN    reduce using rule 69 (exec_statement -> EXEC NAME args .)
    LESS_EQ         reduce using rule 69 (exec_statement -> EXEC NAME args .)
    GREATER_EQ      reduce using rule 69 (exec_statement -> EXEC NAME args .)
    AND             reduce using rule 69 (exec_statement -> EXEC NAME args .)
    NAME            reduce using rule 69 (exec_statement -> EXEC NAME args .)
    OR              reduce using rule 69 (exec_statement -> EXEC NAME args .)
    THEN            reduce using rule 69 (exec_statement -> EXEC NAME args .)
    BEGIN           reduce using rule 69 (exec_statement -> EXEC NAME args .)
    R_PAREN         reduce using rule 69 (exec_statement -> EXEC NAME args .)
    AS              reduce using rule 69 (exec_statement -> EXEC NAME args .)
    WHERE           reduce using rule 69 (exec_statement -> EXEC NAME args .)
    COMMA           shift and go to state 205

  ! COMMA           [ reduce using rule 69 (exec_statement -> EXEC NAME args .) ]


state 165

    (72) args -> ID . ASSIGN a
    (113) h -> ID .

    ASSIGN          shift and go to state 206
    EQUALS          reduce using rule 113 (h -> ID .)
    NOT_EQ          reduce using rule 113 (h -> ID .)
    LESS_THAN       reduce using rule 113 (h -> ID .)
    GREATER_THAN    reduce using rule 113 (h -> ID .)
    LESS_EQ         reduce using rule 113 (h -> ID .)
    GREATER_EQ      reduce using rule 113 (h -> ID .)
    AND             reduce using rule 113 (h -> ID .)
    NAME            reduce using rule 113 (h -> ID .)
    OR              reduce using rule 113 (h -> ID .)
    SEMICOLON       reduce using rule 113 (h -> ID .)
    THEN            reduce using rule 113 (h -> ID .)
    BEGIN           reduce using rule 113 (h -> ID .)
    R_PAREN         reduce using rule 113 (h -> ID .)
    COMMA           reduce using rule 113 (h -> ID .)
    AS              reduce using rule 113 (h -> ID .)
    TIMES           reduce using rule 113 (h -> ID .)
    DIVIDE          reduce using rule 113 (h -> ID .)
    PLUS            reduce using rule 113 (h -> ID .)
    MINUS           reduce using rule 113 (h -> ID .)
    WHERE           reduce using rule 113 (h -> ID .)


state 166

    (74) update_statement -> UPDATE NAME SET . column_assignments WHERE a
    (75) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (76) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 207

    column_assignments             shift and go to state 208

state 167

    (77) while_statement -> WHILE a BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 209
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 168

    (78) truncate_statement -> TRUNCATE TABLE NAME .

    SEMICOLON       reduce using rule 78 (truncate_statement -> TRUNCATE TABLE NAME .)


state 169

    (79) delete_statement -> DELETE FROM NAME . WHERE a

    WHERE           shift and go to state 210


state 170

    (24) create_database_statement -> CREATE DATA BASE NAME .

    SEMICOLON       reduce using rule 24 (create_database_statement -> CREATE DATA BASE NAME .)


state 171

    (31) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN
    (32) properties -> . properties COMMA property
    (33) properties -> . property
    (34) property -> . NAME type null_prod PRIMARY KEY
    (35) property -> . NAME type null_prod
    (36) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 211

    properties                     shift and go to state 212
    property                       shift and go to state 213

state 172

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN . R_PAREN RETURN type AS BEGIN statements END
    (59) parameters -> . parameters COMMA ID AS type
    (60) parameters -> . parameters COMMA ID type
    (61) parameters -> . ID type
    (62) parameters -> . ID AS type

    R_PAREN         shift and go to state 215
    ID              shift and go to state 216

    parameters                     shift and go to state 214

state 173

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . R_PAREN AS BEGIN statements END
    (59) parameters -> . parameters COMMA ID AS type
    (60) parameters -> . parameters COMMA ID type
    (61) parameters -> . ID type
    (62) parameters -> . ID AS type

    R_PAREN         shift and go to state 218
    ID              shift and go to state 216

    parameters                     shift and go to state 217

state 174

    (26) declare_statement -> DECLARE ID AS type .

    SEMICOLON       reduce using rule 26 (declare_statement -> DECLARE ID AS type .)


state 175

    (87) type -> NCHAR L_PAREN . a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 219
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 176

    (88) type -> NVARCHAR L_PAREN . a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 220
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 177

    (29) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 221


state 178

    (30) assignments -> ID ASSIGN a .
    (89) a -> a . OR b

    COMMA           reduce using rule 30 (assignments -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 30 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 134


state 179

    (40) select_statement -> SELECT columns FROM NAME .
    (41) select_statement -> SELECT columns FROM NAME . WHERE a

    SEMICOLON       reduce using rule 40 (select_statement -> SELECT columns FROM NAME .)
    WHERE           shift and go to state 222


state 180

    (45) columns -> columns COMMA column .

    FROM            reduce using rule 45 (columns -> columns COMMA column .)
    COMMA           reduce using rule 45 (columns -> columns COMMA column .)


state 181

    (49) column -> NAME DOT NAME .

    FROM            reduce using rule 49 (column -> NAME DOT NAME .)
    COMMA           reduce using rule 49 (column -> NAME DOT NAME .)


state 182

    (89) a -> a OR b .
    (91) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 89 (a -> a OR b .)
    OR              reduce using rule 89 (a -> a OR b .)
    SEMICOLON       reduce using rule 89 (a -> a OR b .)
    THEN            reduce using rule 89 (a -> a OR b .)
    BEGIN           reduce using rule 89 (a -> a OR b .)
    R_PAREN         reduce using rule 89 (a -> a OR b .)
    COMMA           reduce using rule 89 (a -> a OR b .)
    AS              reduce using rule 89 (a -> a OR b .)
    EQUALS          reduce using rule 89 (a -> a OR b .)
    NOT_EQ          reduce using rule 89 (a -> a OR b .)
    LESS_THAN       reduce using rule 89 (a -> a OR b .)
    GREATER_THAN    reduce using rule 89 (a -> a OR b .)
    LESS_EQ         reduce using rule 89 (a -> a OR b .)
    GREATER_EQ      reduce using rule 89 (a -> a OR b .)
    TIMES           reduce using rule 89 (a -> a OR b .)
    DIVIDE          reduce using rule 89 (a -> a OR b .)
    PLUS            reduce using rule 89 (a -> a OR b .)
    MINUS           reduce using rule 89 (a -> a OR b .)
    WHERE           reduce using rule 89 (a -> a OR b .)
    AND             shift and go to state 137

  ! AND             [ reduce using rule 89 (a -> a OR b .) ]


state 183

    (91) b -> b AND c .

    AND             reduce using rule 91 (b -> b AND c .)
    NAME            reduce using rule 91 (b -> b AND c .)
    OR              reduce using rule 91 (b -> b AND c .)
    SEMICOLON       reduce using rule 91 (b -> b AND c .)
    THEN            reduce using rule 91 (b -> b AND c .)
    BEGIN           reduce using rule 91 (b -> b AND c .)
    R_PAREN         reduce using rule 91 (b -> b AND c .)
    COMMA           reduce using rule 91 (b -> b AND c .)
    AS              reduce using rule 91 (b -> b AND c .)
    EQUALS          reduce using rule 91 (b -> b AND c .)
    NOT_EQ          reduce using rule 91 (b -> b AND c .)
    LESS_THAN       reduce using rule 91 (b -> b AND c .)
    GREATER_THAN    reduce using rule 91 (b -> b AND c .)
    LESS_EQ         reduce using rule 91 (b -> b AND c .)
    GREATER_EQ      reduce using rule 91 (b -> b AND c .)
    TIMES           reduce using rule 91 (b -> b AND c .)
    DIVIDE          reduce using rule 91 (b -> b AND c .)
    PLUS            reduce using rule 91 (b -> b AND c .)
    MINUS           reduce using rule 91 (b -> b AND c .)
    WHERE           reduce using rule 91 (b -> b AND c .)


state 184

    (115) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    PLUS            reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    MINUS           reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    EQUALS          reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    NOT_EQ          reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    LESS_THAN       reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    GREATER_THAN    reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    LESS_EQ         reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    GREATER_EQ      reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    NAME            reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    SEMICOLON       reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    THEN            reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    BEGIN           reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    COMMA           reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    AS              reduce using rule 115 (h -> L_PAREN a R_PAREN .)
    WHERE           reduce using rule 115 (h -> L_PAREN a R_PAREN .)


state 185

    (95) d -> d EQUALS e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 95 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 95 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 95 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 95 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 95 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 95 (d -> d EQUALS e .)
    AND             reduce using rule 95 (d -> d EQUALS e .)
    NAME            reduce using rule 95 (d -> d EQUALS e .)
    OR              reduce using rule 95 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 95 (d -> d EQUALS e .)
    THEN            reduce using rule 95 (d -> d EQUALS e .)
    BEGIN           reduce using rule 95 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 95 (d -> d EQUALS e .)
    COMMA           reduce using rule 95 (d -> d EQUALS e .)
    AS              reduce using rule 95 (d -> d EQUALS e .)
    TIMES           reduce using rule 95 (d -> d EQUALS e .)
    DIVIDE          reduce using rule 95 (d -> d EQUALS e .)
    WHERE           reduce using rule 95 (d -> d EQUALS e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 95 (d -> d EQUALS e .) ]
  ! MINUS           [ reduce using rule 95 (d -> d EQUALS e .) ]


state 186

    (96) d -> d NOT_EQ e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 96 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 96 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 96 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 96 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 96 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 96 (d -> d NOT_EQ e .)
    AND             reduce using rule 96 (d -> d NOT_EQ e .)
    NAME            reduce using rule 96 (d -> d NOT_EQ e .)
    OR              reduce using rule 96 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 96 (d -> d NOT_EQ e .)
    THEN            reduce using rule 96 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 96 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 96 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 96 (d -> d NOT_EQ e .)
    AS              reduce using rule 96 (d -> d NOT_EQ e .)
    TIMES           reduce using rule 96 (d -> d NOT_EQ e .)
    DIVIDE          reduce using rule 96 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 96 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 96 (d -> d NOT_EQ e .) ]
  ! MINUS           [ reduce using rule 96 (d -> d NOT_EQ e .) ]


state 187

    (97) d -> d LESS_THAN e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 97 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 97 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 97 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 97 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 97 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 97 (d -> d LESS_THAN e .)
    AND             reduce using rule 97 (d -> d LESS_THAN e .)
    NAME            reduce using rule 97 (d -> d LESS_THAN e .)
    OR              reduce using rule 97 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 97 (d -> d LESS_THAN e .)
    THEN            reduce using rule 97 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 97 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 97 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 97 (d -> d LESS_THAN e .)
    AS              reduce using rule 97 (d -> d LESS_THAN e .)
    TIMES           reduce using rule 97 (d -> d LESS_THAN e .)
    DIVIDE          reduce using rule 97 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 97 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 97 (d -> d LESS_THAN e .) ]
  ! MINUS           [ reduce using rule 97 (d -> d LESS_THAN e .) ]


state 188

    (98) d -> d GREATER_THAN e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 98 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 98 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 98 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 98 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 98 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 98 (d -> d GREATER_THAN e .)
    AND             reduce using rule 98 (d -> d GREATER_THAN e .)
    NAME            reduce using rule 98 (d -> d GREATER_THAN e .)
    OR              reduce using rule 98 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 98 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 98 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 98 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 98 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 98 (d -> d GREATER_THAN e .)
    AS              reduce using rule 98 (d -> d GREATER_THAN e .)
    TIMES           reduce using rule 98 (d -> d GREATER_THAN e .)
    DIVIDE          reduce using rule 98 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 98 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 98 (d -> d GREATER_THAN e .) ]
  ! MINUS           [ reduce using rule 98 (d -> d GREATER_THAN e .) ]


state 189

    (99) d -> d LESS_EQ e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 99 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 99 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 99 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 99 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 99 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 99 (d -> d LESS_EQ e .)
    AND             reduce using rule 99 (d -> d LESS_EQ e .)
    NAME            reduce using rule 99 (d -> d LESS_EQ e .)
    OR              reduce using rule 99 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 99 (d -> d LESS_EQ e .)
    THEN            reduce using rule 99 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 99 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 99 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 99 (d -> d LESS_EQ e .)
    AS              reduce using rule 99 (d -> d LESS_EQ e .)
    TIMES           reduce using rule 99 (d -> d LESS_EQ e .)
    DIVIDE          reduce using rule 99 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 99 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 99 (d -> d LESS_EQ e .) ]
  ! MINUS           [ reduce using rule 99 (d -> d LESS_EQ e .) ]


state 190

    (100) d -> d GREATER_EQ e .
    (102) e -> e . PLUS f
    (103) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 100 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 100 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 100 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 100 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 100 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 100 (d -> d GREATER_EQ e .)
    AND             reduce using rule 100 (d -> d GREATER_EQ e .)
    NAME            reduce using rule 100 (d -> d GREATER_EQ e .)
    OR              reduce using rule 100 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 100 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 100 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 100 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 100 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 100 (d -> d GREATER_EQ e .)
    AS              reduce using rule 100 (d -> d GREATER_EQ e .)
    TIMES           reduce using rule 100 (d -> d GREATER_EQ e .)
    DIVIDE          reduce using rule 100 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 100 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147

  ! PLUS            [ reduce using rule 100 (d -> d GREATER_EQ e .) ]
  ! MINUS           [ reduce using rule 100 (d -> d GREATER_EQ e .) ]


state 191

    (102) e -> e PLUS f .
    (105) f -> f . TIMES g
    (106) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 102 (e -> e PLUS f .)
    MINUS           reduce using rule 102 (e -> e PLUS f .)
    EQUALS          reduce using rule 102 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 102 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 102 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 102 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 102 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 102 (e -> e PLUS f .)
    AND             reduce using rule 102 (e -> e PLUS f .)
    NAME            reduce using rule 102 (e -> e PLUS f .)
    OR              reduce using rule 102 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 102 (e -> e PLUS f .)
    THEN            reduce using rule 102 (e -> e PLUS f .)
    BEGIN           reduce using rule 102 (e -> e PLUS f .)
    R_PAREN         reduce using rule 102 (e -> e PLUS f .)
    COMMA           reduce using rule 102 (e -> e PLUS f .)
    AS              reduce using rule 102 (e -> e PLUS f .)
    WHERE           reduce using rule 102 (e -> e PLUS f .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149

  ! TIMES           [ reduce using rule 102 (e -> e PLUS f .) ]
  ! DIVIDE          [ reduce using rule 102 (e -> e PLUS f .) ]


state 192

    (103) e -> e MINUS f .
    (105) f -> f . TIMES g
    (106) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 103 (e -> e MINUS f .)
    MINUS           reduce using rule 103 (e -> e MINUS f .)
    EQUALS          reduce using rule 103 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 103 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 103 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 103 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 103 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 103 (e -> e MINUS f .)
    AND             reduce using rule 103 (e -> e MINUS f .)
    NAME            reduce using rule 103 (e -> e MINUS f .)
    OR              reduce using rule 103 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 103 (e -> e MINUS f .)
    THEN            reduce using rule 103 (e -> e MINUS f .)
    BEGIN           reduce using rule 103 (e -> e MINUS f .)
    R_PAREN         reduce using rule 103 (e -> e MINUS f .)
    COMMA           reduce using rule 103 (e -> e MINUS f .)
    AS              reduce using rule 103 (e -> e MINUS f .)
    WHERE           reduce using rule 103 (e -> e MINUS f .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149

  ! TIMES           [ reduce using rule 103 (e -> e MINUS f .) ]
  ! DIVIDE          [ reduce using rule 103 (e -> e MINUS f .) ]


state 193

    (105) f -> f TIMES g .

    TIMES           reduce using rule 105 (f -> f TIMES g .)
    DIVIDE          reduce using rule 105 (f -> f TIMES g .)
    PLUS            reduce using rule 105 (f -> f TIMES g .)
    MINUS           reduce using rule 105 (f -> f TIMES g .)
    EQUALS          reduce using rule 105 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 105 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 105 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 105 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 105 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 105 (f -> f TIMES g .)
    AND             reduce using rule 105 (f -> f TIMES g .)
    NAME            reduce using rule 105 (f -> f TIMES g .)
    OR              reduce using rule 105 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 105 (f -> f TIMES g .)
    THEN            reduce using rule 105 (f -> f TIMES g .)
    BEGIN           reduce using rule 105 (f -> f TIMES g .)
    R_PAREN         reduce using rule 105 (f -> f TIMES g .)
    COMMA           reduce using rule 105 (f -> f TIMES g .)
    AS              reduce using rule 105 (f -> f TIMES g .)
    WHERE           reduce using rule 105 (f -> f TIMES g .)


state 194

    (106) f -> f DIVIDE g .

    TIMES           reduce using rule 106 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 106 (f -> f DIVIDE g .)
    PLUS            reduce using rule 106 (f -> f DIVIDE g .)
    MINUS           reduce using rule 106 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 106 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 106 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 106 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 106 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 106 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 106 (f -> f DIVIDE g .)
    AND             reduce using rule 106 (f -> f DIVIDE g .)
    NAME            reduce using rule 106 (f -> f DIVIDE g .)
    OR              reduce using rule 106 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 106 (f -> f DIVIDE g .)
    THEN            reduce using rule 106 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 106 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 106 (f -> f DIVIDE g .)
    COMMA           reduce using rule 106 (f -> f DIVIDE g .)
    AS              reduce using rule 106 (f -> f DIVIDE g .)
    WHERE           reduce using rule 106 (f -> f DIVIDE g .)


state 195

    (42) insert_statement -> INSERT INTO NAME L_PAREN . column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (43) column_names -> . column_names COMMA NAME
    (44) column_names -> . NAME

    NAME            shift and go to state 223

    column_names                   shift and go to state 224

state 196

    (118) call_function_statement -> function_name_prod L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    TIMES           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    DIVIDE          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    PLUS            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    MINUS           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    EQUALS          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    NOT_EQ          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_THAN       reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_THAN    reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_EQ         reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_EQ      reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AND             reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    NAME            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    OR              reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    THEN            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    BEGIN           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    R_PAREN         reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    COMMA           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AS              reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    WHERE           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)


state 197

    (53) vals -> vals COMMA . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 225
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 198

    (120) call_function_statement -> CAS L_PAREN a AS . type R_PAREN
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 226

state 199

    (63) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type

    COLUMN          shift and go to state 227


state 200

    (64) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME

    COLUMN          shift and go to state 228


state 201

    (65) if_statement -> IF a THEN statements . END IF
    (66) if_statement -> IF a THEN statements . ELSE statements END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 229
    ELSE            shift and go to state 230
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 202

    (67) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 231
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 203

    (81) when_statements -> WHEN a THEN . statements when_statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 232
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 204

    (82) when_statements -> ELSE THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             reduce using rule 82 (when_statements -> ELSE THEN statements .)
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 205

    (71) args -> args COMMA . ID ASSIGN a

    ID              shift and go to state 233


state 206

    (72) args -> ID ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 234
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 207

    (76) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 235


state 208

    (74) update_statement -> UPDATE NAME SET column_assignments . WHERE a
    (75) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 236
    COMMA           shift and go to state 237


state 209

    (77) while_statement -> WHILE a BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 238
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 210

    (79) delete_statement -> DELETE FROM NAME WHERE . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 239
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 211

    (34) property -> NAME . type null_prod PRIMARY KEY
    (35) property -> NAME . type null_prod
    (36) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 240

state 212

    (31) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN
    (32) properties -> properties . COMMA property

    R_PAREN         shift and go to state 241
    COMMA           shift and go to state 242


state 213

    (33) properties -> property .

    R_PAREN         reduce using rule 33 (properties -> property .)
    COMMA           reduce using rule 33 (properties -> property .)


state 214

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END
    (59) parameters -> parameters . COMMA ID AS type
    (60) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 243
    COMMA           shift and go to state 244


state 215

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 245


state 216

    (61) parameters -> ID . type
    (62) parameters -> ID . AS type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 247
    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 246

state 217

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END
    (59) parameters -> parameters . COMMA ID AS type
    (60) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 248
    COMMA           shift and go to state 244


state 218

    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN . AS BEGIN statements END

    AS              shift and go to state 249


state 219

    (87) type -> NCHAR L_PAREN a . R_PAREN
    (89) a -> a . OR b

    R_PAREN         shift and go to state 250
    OR              shift and go to state 134


state 220

    (88) type -> NVARCHAR L_PAREN a . R_PAREN
    (89) a -> a . OR b

    R_PAREN         shift and go to state 251
    OR              shift and go to state 134


state 221

    (29) assignments -> assignments COMMA ID ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 252
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 222

    (41) select_statement -> SELECT columns FROM NAME WHERE . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 253
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 223

    (44) column_names -> NAME .

    R_PAREN         reduce using rule 44 (column_names -> NAME .)
    COMMA           reduce using rule 44 (column_names -> NAME .)


state 224

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names . R_PAREN VALUES L_PAREN vals R_PAREN
    (43) column_names -> column_names . COMMA NAME

    R_PAREN         shift and go to state 254
    COMMA           shift and go to state 255


state 225

    (53) vals -> vals COMMA a .
    (89) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 53 (vals -> vals COMMA a .)
    COMMA           reduce using rule 53 (vals -> vals COMMA a .)
    EQUALS          reduce using rule 53 (vals -> vals COMMA a .)
    NOT_EQ          reduce using rule 53 (vals -> vals COMMA a .)
    LESS_THAN       reduce using rule 53 (vals -> vals COMMA a .)
    GREATER_THAN    reduce using rule 53 (vals -> vals COMMA a .)
    LESS_EQ         reduce using rule 53 (vals -> vals COMMA a .)
    GREATER_EQ      reduce using rule 53 (vals -> vals COMMA a .)
    AND             reduce using rule 53 (vals -> vals COMMA a .)
    NAME            reduce using rule 53 (vals -> vals COMMA a .)
    SEMICOLON       reduce using rule 53 (vals -> vals COMMA a .)
    THEN            reduce using rule 53 (vals -> vals COMMA a .)
    BEGIN           reduce using rule 53 (vals -> vals COMMA a .)
    AS              reduce using rule 53 (vals -> vals COMMA a .)
    TIMES           reduce using rule 53 (vals -> vals COMMA a .)
    DIVIDE          reduce using rule 53 (vals -> vals COMMA a .)
    PLUS            reduce using rule 53 (vals -> vals COMMA a .)
    MINUS           reduce using rule 53 (vals -> vals COMMA a .)
    WHERE           reduce using rule 53 (vals -> vals COMMA a .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 53 (vals -> vals COMMA a .) ]


state 226

    (120) call_function_statement -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 256


state 227

    (63) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type

    NAME            shift and go to state 257


state 228

    (64) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME

    NAME            shift and go to state 258


state 229

    (65) if_statement -> IF a THEN statements END . IF

    IF              shift and go to state 259


state 230

    (66) if_statement -> IF a THEN statements ELSE . statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 260
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 231

    (67) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN
    (89) a -> a . OR b

    COMMA           shift and go to state 261
    OR              shift and go to state 134


state 232

    (81) when_statements -> WHEN a THEN statements . when_statements
    (2) statements -> statements . statement
    (81) when_statements -> . WHEN a THEN statements when_statements
    (82) when_statements -> . ELSE THEN statements
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    WHEN            shift and go to state 109
    ELSE            shift and go to state 110
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    when_statements                shift and go to state 262
    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 233

    (71) args -> args COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 263


state 234

    (72) args -> ID ASSIGN a .
    (89) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 72 (args -> ID ASSIGN a .)
    NOT_EQ          reduce using rule 72 (args -> ID ASSIGN a .)
    LESS_THAN       reduce using rule 72 (args -> ID ASSIGN a .)
    GREATER_THAN    reduce using rule 72 (args -> ID ASSIGN a .)
    LESS_EQ         reduce using rule 72 (args -> ID ASSIGN a .)
    GREATER_EQ      reduce using rule 72 (args -> ID ASSIGN a .)
    AND             reduce using rule 72 (args -> ID ASSIGN a .)
    NAME            reduce using rule 72 (args -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 72 (args -> ID ASSIGN a .)
    THEN            reduce using rule 72 (args -> ID ASSIGN a .)
    BEGIN           reduce using rule 72 (args -> ID ASSIGN a .)
    R_PAREN         reduce using rule 72 (args -> ID ASSIGN a .)
    COMMA           reduce using rule 72 (args -> ID ASSIGN a .)
    AS              reduce using rule 72 (args -> ID ASSIGN a .)
    TIMES           reduce using rule 72 (args -> ID ASSIGN a .)
    DIVIDE          reduce using rule 72 (args -> ID ASSIGN a .)
    PLUS            reduce using rule 72 (args -> ID ASSIGN a .)
    MINUS           reduce using rule 72 (args -> ID ASSIGN a .)
    WHERE           reduce using rule 72 (args -> ID ASSIGN a .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 72 (args -> ID ASSIGN a .) ]


state 235

    (76) column_assignments -> NAME ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 264
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 236

    (74) update_statement -> UPDATE NAME SET column_assignments WHERE . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 265
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 237

    (75) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 266


state 238

    (77) while_statement -> WHILE a BEGIN statements END .

    SEMICOLON       reduce using rule 77 (while_statement -> WHILE a BEGIN statements END .)


state 239

    (79) delete_statement -> DELETE FROM NAME WHERE a .
    (89) a -> a . OR b

    SEMICOLON       reduce using rule 79 (delete_statement -> DELETE FROM NAME WHERE a .)
    OR              shift and go to state 134


state 240

    (34) property -> NAME type . null_prod PRIMARY KEY
    (35) property -> NAME type . null_prod
    (36) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (37) null_prod -> . NOT NULL
    (38) null_prod -> . NULL
    (39) null_prod -> .

    NOT             shift and go to state 268
    NULL            shift and go to state 269
    PRIMARY         reduce using rule 39 (null_prod -> .)
    REFERENCE       reduce using rule 39 (null_prod -> .)
    R_PAREN         reduce using rule 39 (null_prod -> .)
    COMMA           reduce using rule 39 (null_prod -> .)

    null_prod                      shift and go to state 267

state 241

    (31) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .

    SEMICOLON       reduce using rule 31 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .)


state 242

    (32) properties -> properties COMMA . property
    (34) property -> . NAME type null_prod PRIMARY KEY
    (35) property -> . NAME type null_prod
    (36) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 211

    property                       shift and go to state 270

state 243

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 271


state 244

    (59) parameters -> parameters COMMA . ID AS type
    (60) parameters -> parameters COMMA . ID type

    ID              shift and go to state 272


state 245

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN . type AS BEGIN statements END
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 273

state 246

    (61) parameters -> ID type .

    R_PAREN         reduce using rule 61 (parameters -> ID type .)
    COMMA           reduce using rule 61 (parameters -> ID type .)


state 247

    (62) parameters -> ID AS . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 274

state 248

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END

    AS              shift and go to state 275


state 249

    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 276


state 250

    (87) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 87 (type -> NCHAR L_PAREN a R_PAREN .)


state 251

    (88) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 88 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 252

    (29) assignments -> assignments COMMA ID ASSIGN a .
    (89) a -> a . OR b

    COMMA           reduce using rule 29 (assignments -> assignments COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 29 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 134


state 253

    (41) select_statement -> SELECT columns FROM NAME WHERE a .
    (89) a -> a . OR b

    SEMICOLON       reduce using rule 41 (select_statement -> SELECT columns FROM NAME WHERE a .)
    OR              shift and go to state 134


state 254

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN . VALUES L_PAREN vals R_PAREN

    VALUES          shift and go to state 277


state 255

    (43) column_names -> column_names COMMA . NAME

    NAME            shift and go to state 278


state 256

    (120) call_function_statement -> CAS L_PAREN a AS type R_PAREN .

    SEMICOLON       reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    TIMES           reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    DIVIDE          reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    PLUS            reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    MINUS           reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    EQUALS          reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    NOT_EQ          reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_THAN       reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_THAN    reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_EQ         reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_EQ      reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AND             reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    NAME            reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    OR              reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    THEN            reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    BEGIN           reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AS              reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    WHERE           reduce using rule 120 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)


state 257

    (63) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 279

state 258

    (64) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .

    SEMICOLON       reduce using rule 64 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .)


state 259

    (65) if_statement -> IF a THEN statements END IF .

    SEMICOLON       reduce using rule 65 (if_statement -> IF a THEN statements END IF .)
    NAME            reduce using rule 65 (if_statement -> IF a THEN statements END IF .)


state 260

    (66) if_statement -> IF a THEN statements ELSE statements . END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 280
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 261

    (67) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 281
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 262

    (81) when_statements -> WHEN a THEN statements when_statements .

    END             reduce using rule 81 (when_statements -> WHEN a THEN statements when_statements .)


state 263

    (71) args -> args COMMA ID ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 282
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 264

    (76) column_assignments -> NAME ASSIGN a .
    (89) a -> a . OR b

    WHERE           reduce using rule 76 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 76 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 134


state 265

    (74) update_statement -> UPDATE NAME SET column_assignments WHERE a .
    (89) a -> a . OR b

    SEMICOLON       reduce using rule 74 (update_statement -> UPDATE NAME SET column_assignments WHERE a .)
    OR              shift and go to state 134


state 266

    (75) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 283


state 267

    (34) property -> NAME type null_prod . PRIMARY KEY
    (35) property -> NAME type null_prod .
    (36) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 284
    R_PAREN         reduce using rule 35 (property -> NAME type null_prod .)
    COMMA           reduce using rule 35 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 285


state 268

    (37) null_prod -> NOT . NULL

    NULL            shift and go to state 286


state 269

    (38) null_prod -> NULL .

    PRIMARY         reduce using rule 38 (null_prod -> NULL .)
    REFERENCE       reduce using rule 38 (null_prod -> NULL .)
    R_PAREN         reduce using rule 38 (null_prod -> NULL .)
    COMMA           reduce using rule 38 (null_prod -> NULL .)


state 270

    (32) properties -> properties COMMA property .

    R_PAREN         reduce using rule 32 (properties -> properties COMMA property .)
    COMMA           reduce using rule 32 (properties -> properties COMMA property .)


state 271

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 287

state 272

    (59) parameters -> parameters COMMA ID . AS type
    (60) parameters -> parameters COMMA ID . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 288
    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 289

state 273

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 290


state 274

    (62) parameters -> ID AS type .

    R_PAREN         reduce using rule 62 (parameters -> ID AS type .)
    COMMA           reduce using rule 62 (parameters -> ID AS type .)


state 275

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 291


state 276

    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 292
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 277

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES . L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 293


state 278

    (43) column_names -> column_names COMMA NAME .

    R_PAREN         reduce using rule 43 (column_names -> column_names COMMA NAME .)
    COMMA           reduce using rule 43 (column_names -> column_names COMMA NAME .)


state 279

    (63) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .

    SEMICOLON       reduce using rule 63 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .)


state 280

    (66) if_statement -> IF a THEN statements ELSE statements END . IF

    IF              shift and go to state 294


state 281

    (67) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN
    (89) a -> a . OR b

    R_PAREN         shift and go to state 295
    OR              shift and go to state 134


state 282

    (71) args -> args COMMA ID ASSIGN a .
    (89) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    NOT_EQ          reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    LESS_THAN       reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    GREATER_THAN    reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    LESS_EQ         reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    GREATER_EQ      reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    AND             reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    NAME            reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    THEN            reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    BEGIN           reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    R_PAREN         reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    COMMA           reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    AS              reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    TIMES           reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    DIVIDE          reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    PLUS            reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    MINUS           reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    WHERE           reduce using rule 71 (args -> args COMMA ID ASSIGN a .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 71 (args -> args COMMA ID ASSIGN a .) ]


state 283

    (75) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    a                              shift and go to state 296
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 284

    (34) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 297


state 285

    (36) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 298


state 286

    (37) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 37 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 37 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 37 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 37 (null_prod -> NOT NULL .)


state 287

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 299


state 288

    (59) parameters -> parameters COMMA ID AS . type
    (83) type -> . INT
    (84) type -> . DECIMAL
    (85) type -> . DATE
    (86) type -> . DATETIME
    (87) type -> . NCHAR L_PAREN a R_PAREN
    (88) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 122
    DECIMAL         shift and go to state 123
    DATE            shift and go to state 124
    DATETIME        shift and go to state 125
    NCHAR           shift and go to state 126
    NVARCHAR        shift and go to state 127

    type                           shift and go to state 300

state 289

    (60) parameters -> parameters COMMA ID type .

    R_PAREN         reduce using rule 60 (parameters -> parameters COMMA ID type .)
    COMMA           reduce using rule 60 (parameters -> parameters COMMA ID type .)


state 290

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 301


state 291

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 302
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 292

    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 303
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 293

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN . vals R_PAREN
    (53) vals -> . vals COMMA a
    (54) vals -> . a
    (89) a -> . a OR b
    (90) a -> . b
    (91) b -> . b AND c
    (92) b -> . c
    (93) c -> . NOT_SIGN d
    (94) c -> . d
    (95) d -> . d EQUALS e
    (96) d -> . d NOT_EQ e
    (97) d -> . d LESS_THAN e
    (98) d -> . d GREATER_THAN e
    (99) d -> . d LESS_EQ e
    (100) d -> . d GREATER_EQ e
    (101) d -> . e
    (102) e -> . e PLUS f
    (103) e -> . e MINUS f
    (104) e -> . f
    (105) f -> . f TIMES g
    (106) f -> . f DIVIDE g
    (107) f -> . g
    (108) g -> . MINUS h
    (109) g -> . h
    (110) h -> . INTEGER_VALUE
    (111) h -> . DECIMAL_VALUE
    (112) h -> . STRING
    (113) h -> . ID
    (114) h -> . NAME
    (115) h -> . L_PAREN a R_PAREN
    (116) h -> . exec_statement
    (117) h -> . call_function_statement
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 86
    MINUS           shift and go to state 90
    INTEGER_VALUE   shift and go to state 93
    DECIMAL_VALUE   shift and go to state 94
    STRING          shift and go to state 95
    ID              shift and go to state 96
    NAME            shift and go to state 101
    L_PAREN         shift and go to state 84
    EXEC            shift and go to state 37
    CAS             shift and go to state 32
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    vals                           shift and go to state 304
    a                              shift and go to state 154
    b                              shift and go to state 83
    c                              shift and go to state 85
    d                              shift and go to state 87
    e                              shift and go to state 88
    f                              shift and go to state 89
    g                              shift and go to state 91
    h                              shift and go to state 92
    exec_statement                 shift and go to state 97
    call_function_statement        shift and go to state 98
    function_name_prod             shift and go to state 31

state 294

    (66) if_statement -> IF a THEN statements ELSE statements END IF .

    SEMICOLON       reduce using rule 66 (if_statement -> IF a THEN statements ELSE statements END IF .)
    NAME            reduce using rule 66 (if_statement -> IF a THEN statements ELSE statements END IF .)


state 295

    (67) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .

    SEMICOLON       reduce using rule 67 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)
    NAME            reduce using rule 67 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)


state 296

    (75) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (89) a -> a . OR b

    WHERE           reduce using rule 75 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 75 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 134


state 297

    (34) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 34 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 34 (property -> NAME type null_prod PRIMARY KEY .)


state 298

    (36) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 305


state 299

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 306


state 300

    (59) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 59 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 59 (parameters -> parameters COMMA ID AS type .)


state 301

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 307
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 302

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 308
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 303

    (58) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 58 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .)


state 304

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals . R_PAREN
    (53) vals -> vals . COMMA a

    R_PAREN         shift and go to state 309
    COMMA           shift and go to state 197


state 305

    (36) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 310


state 306

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statements                     shift and go to state 311
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 307

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 312
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 308

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 57 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .)


state 309

    (42) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 42 (insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .)


state 310

    (36) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 313


state 311

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . exec_statement SEMICOLON
    (18) statement -> . drop_table_statement SEMICOLON
    (19) statement -> . update_statement SEMICOLON
    (20) statement -> . while_statement SEMICOLON
    (21) statement -> . truncate_statement SEMICOLON
    (22) statement -> . return_statement SEMICOLON
    (23) statement -> . delete_statement SEMICOLON
    (24) create_database_statement -> . CREATE DATA BASE NAME
    (25) use_statement -> . USE NAME
    (26) declare_statement -> . DECLARE ID AS type
    (27) declare_statement -> . DECLARE ID type
    (28) set_statement -> . SET assignments
    (31) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (40) select_statement -> . SELECT columns FROM NAME
    (41) select_statement -> . SELECT columns FROM NAME WHERE a
    (42) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (56) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (58) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (118) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (119) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (120) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (63) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (64) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (65) if_statement -> . IF a THEN statements END IF
    (66) if_statement -> . IF a THEN statements ELSE statements END IF
    (67) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (80) case_statement -> . CASE when_statements END
    (68) exec_statement -> . EXEC NAME vals
    (69) exec_statement -> . EXEC NAME args
    (70) exec_statement -> . EXEC NAME
    (73) drop_table_statement -> . DROP TABLE NAME
    (74) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (77) while_statement -> . WHILE a BEGIN statements END
    (78) truncate_statement -> . TRUNCATE TABLE NAME
    (126) return_statement -> . RETURN a
    (79) delete_statement -> . DELETE FROM NAME WHERE a
    (121) function_name_prod -> . HOY
    (122) function_name_prod -> . CONCATENA
    (123) function_name_prod -> . SUBSTRAER
    (124) function_name_prod -> . CONTAR
    (125) function_name_prod -> . SUMA

    END             shift and go to state 314
    CREATE          shift and go to state 24
    USE             shift and go to state 25
    DECLARE         shift and go to state 26
    SET             shift and go to state 27
    SELECT          shift and go to state 28
    INSERT          shift and go to state 29
    CAS             shift and go to state 32
    ALTER           shift and go to state 33
    IF              shift and go to state 35
    CASE            shift and go to state 36
    EXEC            shift and go to state 37
    DROP            shift and go to state 34
    UPDATE          shift and go to state 38
    WHILE           shift and go to state 39
    TRUNCATE        shift and go to state 40
    RETURN          shift and go to state 30
    DELETE          shift and go to state 41
    HOY             shift and go to state 42
    CONCATENA       shift and go to state 43
    SUBSTRAER       shift and go to state 44
    CONTAR          shift and go to state 45
    SUMA            shift and go to state 46

    statement                      shift and go to state 47
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    case_statement                 shift and go to state 16
    exec_statement                 shift and go to state 17
    drop_table_statement           shift and go to state 18
    update_statement               shift and go to state 19
    while_statement                shift and go to state 20
    truncate_statement             shift and go to state 21
    return_statement               shift and go to state 22
    delete_statement               shift and go to state 23
    function_name_prod             shift and go to state 31

state 312

    (56) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 56 (create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .)


state 313

    (36) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 36 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 36 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 314

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 55 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for NAME in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 139 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 139 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 139 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 163 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 182 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 189 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 191 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 191 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 192 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 225 resolved as shift
WARNING: shift/reduce conflict for OR in state 234 resolved as shift
WARNING: shift/reduce conflict for OR in state 282 resolved as shift
