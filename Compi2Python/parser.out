Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> create_database_statement SEMICOLON
Rule 5     statement -> use_statement SEMICOLON
Rule 6     statement -> declare_statement SEMICOLON
Rule 7     statement -> set_statement SEMICOLON
Rule 8     statement -> create_table_statement SEMICOLON
Rule 9     statement -> select_statement SEMICOLON
Rule 10    statement -> insert_statement SEMICOLON
Rule 11    statement -> create_function_statement SEMICOLON
Rule 12    statement -> create_procedure_statement SEMICOLON
Rule 13    statement -> call_function_statement SEMICOLON
Rule 14    statement -> alter_table_statement SEMICOLON
Rule 15    statement -> if_statement SEMICOLON
Rule 16    statement -> exec_statement SEMICOLON
Rule 17    statement -> drop_table_statement SEMICOLON
Rule 18    statement -> update_statement SEMICOLON
Rule 19    statement -> while_statement SEMICOLON
Rule 20    statement -> truncate_statement SEMICOLON
Rule 21    statement -> return_statement SEMICOLON
Rule 22    statement -> delete_statement SEMICOLON
Rule 23    create_database_statement -> CREATE DATA BASE NAME
Rule 24    use_statement -> USE NAME
Rule 25    declare_statement -> DECLARE ID AS type
Rule 26    declare_statement -> DECLARE ID type
Rule 27    set_statement -> SET assignments
Rule 28    assignments -> assignments COMMA ID ASSIGN a
Rule 29    assignments -> ID ASSIGN a
Rule 30    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN
Rule 31    properties -> properties COMMA property
Rule 32    properties -> property
Rule 33    property -> NAME type null_prod PRIMARY KEY
Rule 34    property -> NAME type null_prod
Rule 35    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 36    null_prod -> NOT NULL
Rule 37    null_prod -> NULL
Rule 38    null_prod -> <empty>
Rule 39    select_statement -> SELECT columns FROM NAME
Rule 40    select_statement -> SELECT columns FROM NAME WHERE a
Rule 41    select_statement -> SELECT columns FROM table_names_select WHERE a
Rule 42    select_statement -> SELECT columns FROM table_names_select
Rule 43    table_names_select -> NAME table_names_select_p
Rule 44    table_names_select_p -> COMMA NAME table_names_select_p
Rule 45    table_names_select_p -> <empty>
Rule 46    insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
Rule 47    column_names -> column_names COMMA NAME
Rule 48    column_names -> NAME
Rule 49    columns -> columns COMMA column
Rule 50    columns -> columns COMMA column POINT column
Rule 51    columns -> column POINT column
Rule 52    columns -> column
Rule 53    column -> TIMES
Rule 54    column -> NAME
Rule 55    column -> case_statement
Rule 56    column -> call_function_statement
Rule 57    column -> if_statement NAME
Rule 58    vals -> vals COMMA a
Rule 59    vals -> a
Rule 60    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
Rule 61    create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
Rule 62    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
Rule 63    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
Rule 64    parameters -> parameters COMMA ID AS type
Rule 65    parameters -> parameters COMMA ID type
Rule 66    parameters -> ID type
Rule 67    parameters -> ID AS type
Rule 68    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type
Rule 69    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME
Rule 70    if_statement -> IF a THEN statements END IF
Rule 71    if_statement -> IF a THEN statements ELSE statements END IF
Rule 72    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN
Rule 73    exec_statement -> EXEC NAME vals
Rule 74    exec_statement -> EXEC NAME args
Rule 75    exec_statement -> EXEC NAME
Rule 76    args -> args COMMA ID ASSIGN a
Rule 77    args -> ID ASSIGN a
Rule 78    drop_table_statement -> DROP TABLE NAME
Rule 79    update_statement -> UPDATE NAME SET column_assignments WHERE a
Rule 80    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 81    column_assignments -> NAME ASSIGN a
Rule 82    while_statement -> WHILE a BEGIN statements END
Rule 83    truncate_statement -> TRUNCATE TABLE NAME
Rule 84    delete_statement -> DELETE FROM NAME WHERE a
Rule 85    case_statement -> CASE when_statements END NAME
Rule 86    when_statements -> WHEN a THEN a when_statements
Rule 87    when_statements -> ELSE THEN a
Rule 88    type -> INT
Rule 89    type -> DECIMAL
Rule 90    type -> DATE
Rule 91    type -> DATETIME
Rule 92    type -> NCHAR L_PAREN a R_PAREN
Rule 93    type -> NVARCHAR L_PAREN a R_PAREN
Rule 94    a -> a OR b
Rule 95    a -> b
Rule 96    b -> b AND c
Rule 97    b -> c
Rule 98    c -> NOT_SIGN d
Rule 99    c -> d
Rule 100   d -> d EQUALS e
Rule 101   d -> d NOT_EQ e
Rule 102   d -> d LESS_THAN e
Rule 103   d -> d GREATER_THAN e
Rule 104   d -> d LESS_EQ e
Rule 105   d -> d GREATER_EQ e
Rule 106   d -> e
Rule 107   e -> e PLUS f
Rule 108   e -> e MINUS f
Rule 109   e -> f
Rule 110   f -> f TIMES g
Rule 111   f -> f DIVIDE g
Rule 112   f -> g
Rule 113   g -> MINUS h
Rule 114   g -> h
Rule 115   h -> INTEGER_VALUE
Rule 116   h -> DECIMAL_VALUE
Rule 117   h -> STRING
Rule 118   h -> ID
Rule 119   h -> NAME
Rule 120   h -> L_PAREN a R_PAREN
Rule 121   h -> exec_statement
Rule 122   h -> call_function_statement
Rule 123   h -> NAME POINT NAME
Rule 124   call_function_statement -> function_name_prod L_PAREN vals R_PAREN
Rule 125   call_function_statement -> function_name_prod L_PAREN R_PAREN
Rule 126   call_function_statement -> CAS L_PAREN a AS type R_PAREN
Rule 127   function_name_prod -> HOY
Rule 128   function_name_prod -> CONCATENA
Rule 129   function_name_prod -> SUBSTRAER
Rule 130   function_name_prod -> CONTAR
Rule 131   function_name_prod -> SUMA
Rule 132   return_statement -> RETURN a

Terminals, with rules where they appear

ADD                  : 68
ALTER                : 68 69
AND                  : 96
AS                   : 25 60 61 62 63 64 67 126
ASSIGN               : 28 29 76 77 80 81
BASE                 : 23
BEGIN                : 60 61 62 63 82
CAS                  : 126
CASE                 : 85
COLUMN               : 68 69
COMMA                : 28 31 44 47 49 50 58 64 65 72 72 76 80
CONCATENA            : 128
CONTAR               : 130
CREATE               : 23 30 60 61 62 63
DATA                 : 23
DATE                 : 90
DATETIME             : 91
DECIMAL              : 89
DECIMAL_VALUE        : 116
DECLARE              : 25 26
DELETE               : 84
DIVIDE               : 111
DROP                 : 69 78
ELSE                 : 71 87
END                  : 60 61 62 63 70 71 82 85
EQUALS               : 100
EXEC                 : 73 74 75
FROM                 : 39 40 41 42 84
FUNCTION             : 60 61
GREATER_EQ           : 105
GREATER_THAN         : 103
HOY                  : 127
ID                   : 25 26 28 29 64 65 66 67 76 77 118
IF                   : 70 70 71 71 72
INSERT               : 46
INT                  : 88
INTEGER_VALUE        : 115
INTO                 : 46
KEY                  : 33
LESS_EQ              : 104
LESS_THAN            : 102
L_PAREN              : 30 35 46 46 60 61 62 63 72 92 93 120 124 125 126
MINUS                : 108 113
NAME                 : 23 24 30 33 34 35 35 35 39 40 43 44 46 47 48 54 57 60 61 62 63 68 68 69 69 73 74 75 78 79 80 81 83 84 85 119 123 123
NCHAR                : 92
NOT                  : 36
NOT_EQ               : 101
NOT_SIGN             : 98
NULL                 : 36 37
NVARCHAR             : 93
OR                   : 94
PLUS                 : 107
POINT                : 50 51 123
PRIMARY              : 33
PROCEDURE            : 62 63
REFERENCE            : 35
RETURN               : 60 61 132
R_PAREN              : 30 35 46 46 60 61 62 63 72 92 93 120 124 125 126
SELECT               : 39 40 41 42
SEMICOLON            : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
SET                  : 27 79
STRING               : 117
SUBSTRAER            : 129
SUMA                 : 131
TABLE                : 30 68 69 78 83
THEN                 : 70 71 86 87
TIMES                : 53 110
TRUNCATE             : 83
UPDATE               : 79
USE                  : 24
VALUES               : 46
WHEN                 : 86
WHERE                : 40 41 79 84
WHILE                : 82
error                : 

Nonterminals, with rules where they appear

a                    : 28 29 40 41 58 59 70 71 72 72 72 76 77 79 80 81 82 84 86 86 87 92 93 94 120 126 132
alter_table_statement : 14
args                 : 74 76
assignments          : 27 28
b                    : 94 95 96
c                    : 96 97
call_function_statement : 13 56 122
case_statement       : 55
column               : 49 50 50 51 51 52
column_assignments   : 79 80
column_names         : 46 47
columns              : 39 40 41 42 49 50
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 98 99 100 101 102 103 104 105
declare_statement    : 6
delete_statement     : 22
drop_table_statement : 17
e                    : 100 101 102 103 104 105 106 107 108
exec_statement       : 16 121
f                    : 107 108 109 110 111
function_name_prod   : 124 125
g                    : 110 111 112
h                    : 113 114
if_statement         : 15 57
init                 : 0
insert_statement     : 10
null_prod            : 33 34 35
parameters           : 60 62 64 65
properties           : 30 31
property             : 31 32
return_statement     : 21
select_statement     : 9
set_statement        : 7
statement            : 2 3
statements           : 1 2 60 61 62 63 70 71 71 82
table_names_select   : 41 42
table_names_select_p : 43 44
truncate_statement   : 20
type                 : 25 26 33 34 35 60 61 64 65 66 67 68 126
update_statement     : 18
use_statement        : 5
vals                 : 46 58 73 124
when_statements      : 85 86
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 3

    (3) statements -> statement .

    CREATE          reduce using rule 3 (statements -> statement .)
    USE             reduce using rule 3 (statements -> statement .)
    DECLARE         reduce using rule 3 (statements -> statement .)
    SET             reduce using rule 3 (statements -> statement .)
    SELECT          reduce using rule 3 (statements -> statement .)
    INSERT          reduce using rule 3 (statements -> statement .)
    CAS             reduce using rule 3 (statements -> statement .)
    ALTER           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    EXEC            reduce using rule 3 (statements -> statement .)
    DROP            reduce using rule 3 (statements -> statement .)
    UPDATE          reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    TRUNCATE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    DELETE          reduce using rule 3 (statements -> statement .)
    HOY             reduce using rule 3 (statements -> statement .)
    CONCATENA       reduce using rule 3 (statements -> statement .)
    SUBSTRAER       reduce using rule 3 (statements -> statement .)
    CONTAR          reduce using rule 3 (statements -> statement .)
    SUMA            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> create_database_statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 5

    (5) statement -> use_statement . SEMICOLON

    SEMICOLON       shift and go to state 47


state 6

    (6) statement -> declare_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 7

    (7) statement -> set_statement . SEMICOLON

    SEMICOLON       shift and go to state 49


state 8

    (8) statement -> create_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 9

    (9) statement -> select_statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 10

    (10) statement -> insert_statement . SEMICOLON

    SEMICOLON       shift and go to state 52


state 11

    (11) statement -> create_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 53


state 12

    (12) statement -> create_procedure_statement . SEMICOLON

    SEMICOLON       shift and go to state 54


state 13

    (13) statement -> call_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 14

    (14) statement -> alter_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 56


state 15

    (15) statement -> if_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 16

    (16) statement -> exec_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 17

    (17) statement -> drop_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 59


state 18

    (18) statement -> update_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 19

    (19) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 20

    (20) statement -> truncate_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 21

    (21) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 63


state 22

    (22) statement -> delete_statement . SEMICOLON

    SEMICOLON       shift and go to state 64


state 23

    (23) create_database_statement -> CREATE . DATA BASE NAME
    (30) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN
    (60) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> CREATE . FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END

    DATA            shift and go to state 65
    TABLE           shift and go to state 66
    FUNCTION        shift and go to state 67
    PROCEDURE       shift and go to state 68


state 24

    (24) use_statement -> USE . NAME

    NAME            shift and go to state 69


state 25

    (25) declare_statement -> DECLARE . ID AS type
    (26) declare_statement -> DECLARE . ID type

    ID              shift and go to state 70


state 26

    (27) set_statement -> SET . assignments
    (28) assignments -> . assignments COMMA ID ASSIGN a
    (29) assignments -> . ID ASSIGN a

    ID              shift and go to state 72

    assignments                    shift and go to state 71

state 27

    (39) select_statement -> SELECT . columns FROM NAME
    (40) select_statement -> SELECT . columns FROM NAME WHERE a
    (41) select_statement -> SELECT . columns FROM table_names_select WHERE a
    (42) select_statement -> SELECT . columns FROM table_names_select
    (49) columns -> . columns COMMA column
    (50) columns -> . columns COMMA column POINT column
    (51) columns -> . column POINT column
    (52) columns -> . column
    (53) column -> . TIMES
    (54) column -> . NAME
    (55) column -> . case_statement
    (56) column -> . call_function_statement
    (57) column -> . if_statement NAME
    (85) case_statement -> . CASE when_statements END NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    TIMES           shift and go to state 76
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    CAS             shift and go to state 31
    IF              shift and go to state 34
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    columns                        shift and go to state 73
    column                         shift and go to state 75
    case_statement                 shift and go to state 77
    call_function_statement        shift and go to state 78
    if_statement                   shift and go to state 79
    function_name_prod             shift and go to state 30

state 28

    (46) insert_statement -> INSERT . INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    INTO            shift and go to state 81


state 29

    (132) return_statement -> RETURN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 82
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 30

    (124) call_function_statement -> function_name_prod . L_PAREN vals R_PAREN
    (125) call_function_statement -> function_name_prod . L_PAREN R_PAREN

    L_PAREN         shift and go to state 100


state 31

    (126) call_function_statement -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 101


state 32

    (68) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME

    TABLE           shift and go to state 102


state 33

    (78) drop_table_statement -> DROP . TABLE NAME

    TABLE           shift and go to state 103


state 34

    (70) if_statement -> IF . a THEN statements END IF
    (71) if_statement -> IF . a THEN statements ELSE statements END IF
    (72) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    L_PAREN         shift and go to state 105
    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 104
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 35

    (73) exec_statement -> EXEC . NAME vals
    (74) exec_statement -> EXEC . NAME args
    (75) exec_statement -> EXEC . NAME

    NAME            shift and go to state 106


state 36

    (79) update_statement -> UPDATE . NAME SET column_assignments WHERE a

    NAME            shift and go to state 107


state 37

    (82) while_statement -> WHILE . a BEGIN statements END
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 108
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 38

    (83) truncate_statement -> TRUNCATE . TABLE NAME

    TABLE           shift and go to state 109


state 39

    (84) delete_statement -> DELETE . FROM NAME WHERE a

    FROM            shift and go to state 110


state 40

    (127) function_name_prod -> HOY .

    L_PAREN         reduce using rule 127 (function_name_prod -> HOY .)


state 41

    (128) function_name_prod -> CONCATENA .

    L_PAREN         reduce using rule 128 (function_name_prod -> CONCATENA .)


state 42

    (129) function_name_prod -> SUBSTRAER .

    L_PAREN         reduce using rule 129 (function_name_prod -> SUBSTRAER .)


state 43

    (130) function_name_prod -> CONTAR .

    L_PAREN         reduce using rule 130 (function_name_prod -> CONTAR .)


state 44

    (131) function_name_prod -> SUMA .

    L_PAREN         reduce using rule 131 (function_name_prod -> SUMA .)


state 45

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    CAS             reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    HOY             reduce using rule 2 (statements -> statements statement .)
    CONCATENA       reduce using rule 2 (statements -> statements statement .)
    SUBSTRAER       reduce using rule 2 (statements -> statements statement .)
    CONTAR          reduce using rule 2 (statements -> statements statement .)
    SUMA            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 46

    (4) statement -> create_database_statement SEMICOLON .

    CREATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    USE             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SET             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SELECT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    INSERT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CAS             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ALTER           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    IF              reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    EXEC            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DROP            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DELETE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    HOY             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONCATENA       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONTAR          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUMA            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    END             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ELSE            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)


state 47

    (5) statement -> use_statement SEMICOLON .

    CREATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    USE             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DECLARE         reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SET             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SELECT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    INSERT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CAS             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ALTER           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    IF              reduce using rule 5 (statement -> use_statement SEMICOLON .)
    EXEC            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DROP            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    UPDATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DELETE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    HOY             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONCATENA       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONTAR          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUMA            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    $end            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    END             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> use_statement SEMICOLON .)


state 48

    (6) statement -> declare_statement SEMICOLON .

    CREATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    USE             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DECLARE         reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SET             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SELECT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    INSERT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CAS             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ALTER           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    IF              reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    EXEC            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DROP            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    UPDATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DELETE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    HOY             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONCATENA       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONTAR          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUMA            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    $end            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    END             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declare_statement SEMICOLON .)


state 49

    (7) statement -> set_statement SEMICOLON .

    CREATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    USE             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DECLARE         reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SET             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SELECT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    INSERT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CAS             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    IF              reduce using rule 7 (statement -> set_statement SEMICOLON .)
    EXEC            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DROP            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    UPDATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DELETE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    HOY             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONCATENA       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONTAR          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUMA            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    $end            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    END             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> set_statement SEMICOLON .)


state 50

    (8) statement -> create_table_statement SEMICOLON .

    CREATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    USE             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SET             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SELECT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    INSERT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CAS             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    IF              reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    EXEC            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DROP            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DELETE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    HOY             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONTAR          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUMA            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    $end            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    END             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)


state 51

    (9) statement -> select_statement SEMICOLON .

    CREATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    USE             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DECLARE         reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SET             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SELECT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    INSERT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CAS             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    IF              reduce using rule 9 (statement -> select_statement SEMICOLON .)
    EXEC            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DROP            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    UPDATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DELETE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    HOY             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONCATENA       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONTAR          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUMA            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    $end            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    END             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> select_statement SEMICOLON .)


state 52

    (10) statement -> insert_statement SEMICOLON .

    CREATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    USE             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DECLARE         reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SET             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SELECT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    INSERT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CAS             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    IF              reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    EXEC            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DROP            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    UPDATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DELETE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    HOY             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONCATENA       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONTAR          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUMA            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    $end            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    END             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> insert_statement SEMICOLON .)


state 53

    (11) statement -> create_function_statement SEMICOLON .

    CREATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    USE             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SET             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SELECT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    INSERT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CAS             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    IF              reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    EXEC            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DROP            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DELETE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    HOY             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONTAR          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUMA            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    $end            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    END             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)


state 54

    (12) statement -> create_procedure_statement SEMICOLON .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    USE             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SET             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CAS             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    IF              reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    HOY             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONCATENA       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONTAR          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUMA            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    $end            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    END             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)


state 55

    (13) statement -> call_function_statement SEMICOLON .

    CREATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    USE             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DECLARE         reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SET             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SELECT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    INSERT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CAS             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    IF              reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    EXEC            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DROP            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    UPDATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DELETE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    HOY             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONTAR          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUMA            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    $end            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    END             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)


state 56

    (14) statement -> alter_table_statement SEMICOLON .

    CREATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    USE             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DECLARE         reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SET             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SELECT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    INSERT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CAS             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    EXEC            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DROP            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    UPDATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DELETE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    HOY             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONTAR          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUMA            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    END             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)


state 57

    (15) statement -> if_statement SEMICOLON .

    CREATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    USE             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DECLARE         reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SET             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SELECT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    INSERT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CAS             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> if_statement SEMICOLON .)
    EXEC            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DROP            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    UPDATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    TRUNCATE        reduce using rule 15 (statement -> if_statement SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DELETE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    HOY             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONCATENA       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONTAR          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUMA            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    END             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> if_statement SEMICOLON .)


state 58

    (16) statement -> exec_statement SEMICOLON .

    CREATE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    USE             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DECLARE         reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SET             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SELECT          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    INSERT          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CAS             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    IF              reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    EXEC            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DROP            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    UPDATE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    TRUNCATE        reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DELETE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    HOY             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CONCATENA       reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CONTAR          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SUMA            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    $end            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    END             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> exec_statement SEMICOLON .)


state 59

    (17) statement -> drop_table_statement SEMICOLON .

    CREATE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    USE             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DECLARE         reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SET             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SELECT          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    INSERT          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CAS             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    IF              reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    EXEC            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DROP            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    UPDATE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DELETE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    HOY             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CONTAR          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SUMA            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    $end            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    END             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)


state 60

    (18) statement -> update_statement SEMICOLON .

    CREATE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    USE             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DECLARE         reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SET             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SELECT          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    INSERT          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CAS             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> update_statement SEMICOLON .)
    IF              reduce using rule 18 (statement -> update_statement SEMICOLON .)
    EXEC            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DROP            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    UPDATE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> update_statement SEMICOLON .)
    TRUNCATE        reduce using rule 18 (statement -> update_statement SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DELETE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    HOY             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CONCATENA       reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CONTAR          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SUMA            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    $end            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    END             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> update_statement SEMICOLON .)


state 61

    (19) statement -> while_statement SEMICOLON .

    CREATE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    USE             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DECLARE         reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SET             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SELECT          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    INSERT          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CAS             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> while_statement SEMICOLON .)
    IF              reduce using rule 19 (statement -> while_statement SEMICOLON .)
    EXEC            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DROP            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    UPDATE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> while_statement SEMICOLON .)
    TRUNCATE        reduce using rule 19 (statement -> while_statement SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DELETE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    HOY             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CONCATENA       reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CONTAR          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SUMA            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    $end            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    END             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> while_statement SEMICOLON .)


state 62

    (20) statement -> truncate_statement SEMICOLON .

    CREATE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    USE             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DECLARE         reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SET             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SELECT          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    INSERT          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CAS             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    IF              reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    EXEC            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DROP            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    UPDATE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    TRUNCATE        reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DELETE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    HOY             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CONCATENA       reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CONTAR          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SUMA            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    $end            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    END             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)


state 63

    (21) statement -> return_statement SEMICOLON .

    CREATE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    USE             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DECLARE         reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SET             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SELECT          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    INSERT          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CAS             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> return_statement SEMICOLON .)
    EXEC            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DROP            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    UPDATE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> return_statement SEMICOLON .)
    TRUNCATE        reduce using rule 21 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DELETE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    HOY             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CONCATENA       reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CONTAR          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SUMA            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    $end            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    END             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> return_statement SEMICOLON .)


state 64

    (22) statement -> delete_statement SEMICOLON .

    CREATE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    USE             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DECLARE         reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SET             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SELECT          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    INSERT          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CAS             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    ALTER           reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    IF              reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    EXEC            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DROP            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    UPDATE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    TRUNCATE        reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DELETE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    HOY             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CONCATENA       reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CONTAR          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SUMA            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    $end            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    END             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> delete_statement SEMICOLON .)


state 65

    (23) create_database_statement -> CREATE DATA . BASE NAME

    BASE            shift and go to state 111


state 66

    (30) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN

    NAME            shift and go to state 112


state 67

    (60) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> CREATE FUNCTION . NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END

    NAME            shift and go to state 113


state 68

    (62) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN R_PAREN AS BEGIN statements END

    NAME            shift and go to state 114


state 69

    (24) use_statement -> USE NAME .

    SEMICOLON       reduce using rule 24 (use_statement -> USE NAME .)


state 70

    (25) declare_statement -> DECLARE ID . AS type
    (26) declare_statement -> DECLARE ID . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 115
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 116

state 71

    (27) set_statement -> SET assignments .
    (28) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       reduce using rule 27 (set_statement -> SET assignments .)
    COMMA           shift and go to state 123


state 72

    (29) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 124


state 73

    (39) select_statement -> SELECT columns . FROM NAME
    (40) select_statement -> SELECT columns . FROM NAME WHERE a
    (41) select_statement -> SELECT columns . FROM table_names_select WHERE a
    (42) select_statement -> SELECT columns . FROM table_names_select
    (49) columns -> columns . COMMA column
    (50) columns -> columns . COMMA column POINT column

    FROM            shift and go to state 125
    COMMA           shift and go to state 126


state 74

    (54) column -> NAME .

    POINT           reduce using rule 54 (column -> NAME .)
    FROM            reduce using rule 54 (column -> NAME .)
    COMMA           reduce using rule 54 (column -> NAME .)


state 75

    (51) columns -> column . POINT column
    (52) columns -> column .

    POINT           shift and go to state 127
    FROM            reduce using rule 52 (columns -> column .)
    COMMA           reduce using rule 52 (columns -> column .)


state 76

    (53) column -> TIMES .

    POINT           reduce using rule 53 (column -> TIMES .)
    FROM            reduce using rule 53 (column -> TIMES .)
    COMMA           reduce using rule 53 (column -> TIMES .)


state 77

    (55) column -> case_statement .

    POINT           reduce using rule 55 (column -> case_statement .)
    FROM            reduce using rule 55 (column -> case_statement .)
    COMMA           reduce using rule 55 (column -> case_statement .)


state 78

    (56) column -> call_function_statement .

    POINT           reduce using rule 56 (column -> call_function_statement .)
    FROM            reduce using rule 56 (column -> call_function_statement .)
    COMMA           reduce using rule 56 (column -> call_function_statement .)


state 79

    (57) column -> if_statement . NAME

    NAME            shift and go to state 128


state 80

    (85) case_statement -> CASE . when_statements END NAME
    (86) when_statements -> . WHEN a THEN a when_statements
    (87) when_statements -> . ELSE THEN a

    WHEN            shift and go to state 130
    ELSE            shift and go to state 131

    when_statements                shift and go to state 129

state 81

    (46) insert_statement -> INSERT INTO . NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    NAME            shift and go to state 132


state 82

    (132) return_statement -> RETURN a .
    (94) a -> a . OR b

    SEMICOLON       reduce using rule 132 (return_statement -> RETURN a .)
    OR              shift and go to state 133


state 83

    (95) a -> b .
    (96) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 95 (a -> b .)
    SEMICOLON       reduce using rule 95 (a -> b .)
    THEN            reduce using rule 95 (a -> b .)
    BEGIN           reduce using rule 95 (a -> b .)
    R_PAREN         reduce using rule 95 (a -> b .)
    COMMA           reduce using rule 95 (a -> b .)
    AS              reduce using rule 95 (a -> b .)
    EQUALS          reduce using rule 95 (a -> b .)
    NOT_EQ          reduce using rule 95 (a -> b .)
    LESS_THAN       reduce using rule 95 (a -> b .)
    GREATER_THAN    reduce using rule 95 (a -> b .)
    LESS_EQ         reduce using rule 95 (a -> b .)
    GREATER_EQ      reduce using rule 95 (a -> b .)
    TIMES           reduce using rule 95 (a -> b .)
    DIVIDE          reduce using rule 95 (a -> b .)
    PLUS            reduce using rule 95 (a -> b .)
    MINUS           reduce using rule 95 (a -> b .)
    END             reduce using rule 95 (a -> b .)
    WHEN            reduce using rule 95 (a -> b .)
    ELSE            reduce using rule 95 (a -> b .)
    WHERE           reduce using rule 95 (a -> b .)
    AND             shift and go to state 134

  ! AND             [ reduce using rule 95 (a -> b .) ]


state 84

    (97) b -> c .

    AND             reduce using rule 97 (b -> c .)
    OR              reduce using rule 97 (b -> c .)
    SEMICOLON       reduce using rule 97 (b -> c .)
    THEN            reduce using rule 97 (b -> c .)
    BEGIN           reduce using rule 97 (b -> c .)
    R_PAREN         reduce using rule 97 (b -> c .)
    COMMA           reduce using rule 97 (b -> c .)
    AS              reduce using rule 97 (b -> c .)
    EQUALS          reduce using rule 97 (b -> c .)
    NOT_EQ          reduce using rule 97 (b -> c .)
    LESS_THAN       reduce using rule 97 (b -> c .)
    GREATER_THAN    reduce using rule 97 (b -> c .)
    LESS_EQ         reduce using rule 97 (b -> c .)
    GREATER_EQ      reduce using rule 97 (b -> c .)
    TIMES           reduce using rule 97 (b -> c .)
    DIVIDE          reduce using rule 97 (b -> c .)
    PLUS            reduce using rule 97 (b -> c .)
    MINUS           reduce using rule 97 (b -> c .)
    END             reduce using rule 97 (b -> c .)
    WHEN            reduce using rule 97 (b -> c .)
    ELSE            reduce using rule 97 (b -> c .)
    WHERE           reduce using rule 97 (b -> c .)


state 85

    (98) c -> NOT_SIGN . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    d                              shift and go to state 135
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 86

    (99) c -> d .
    (100) d -> d . EQUALS e
    (101) d -> d . NOT_EQ e
    (102) d -> d . LESS_THAN e
    (103) d -> d . GREATER_THAN e
    (104) d -> d . LESS_EQ e
    (105) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 99 (c -> d .)
    OR              reduce using rule 99 (c -> d .)
    SEMICOLON       reduce using rule 99 (c -> d .)
    THEN            reduce using rule 99 (c -> d .)
    BEGIN           reduce using rule 99 (c -> d .)
    R_PAREN         reduce using rule 99 (c -> d .)
    COMMA           reduce using rule 99 (c -> d .)
    AS              reduce using rule 99 (c -> d .)
    TIMES           reduce using rule 99 (c -> d .)
    DIVIDE          reduce using rule 99 (c -> d .)
    PLUS            reduce using rule 99 (c -> d .)
    MINUS           reduce using rule 99 (c -> d .)
    END             reduce using rule 99 (c -> d .)
    WHEN            reduce using rule 99 (c -> d .)
    ELSE            reduce using rule 99 (c -> d .)
    WHERE           reduce using rule 99 (c -> d .)
    EQUALS          shift and go to state 136
    NOT_EQ          shift and go to state 137
    LESS_THAN       shift and go to state 138
    GREATER_THAN    shift and go to state 139
    LESS_EQ         shift and go to state 140
    GREATER_EQ      shift and go to state 141

  ! EQUALS          [ reduce using rule 99 (c -> d .) ]
  ! NOT_EQ          [ reduce using rule 99 (c -> d .) ]
  ! LESS_THAN       [ reduce using rule 99 (c -> d .) ]
  ! GREATER_THAN    [ reduce using rule 99 (c -> d .) ]
  ! LESS_EQ         [ reduce using rule 99 (c -> d .) ]
  ! GREATER_EQ      [ reduce using rule 99 (c -> d .) ]


state 87

    (106) d -> e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 106 (d -> e .)
    NOT_EQ          reduce using rule 106 (d -> e .)
    LESS_THAN       reduce using rule 106 (d -> e .)
    GREATER_THAN    reduce using rule 106 (d -> e .)
    LESS_EQ         reduce using rule 106 (d -> e .)
    GREATER_EQ      reduce using rule 106 (d -> e .)
    AND             reduce using rule 106 (d -> e .)
    OR              reduce using rule 106 (d -> e .)
    SEMICOLON       reduce using rule 106 (d -> e .)
    THEN            reduce using rule 106 (d -> e .)
    BEGIN           reduce using rule 106 (d -> e .)
    R_PAREN         reduce using rule 106 (d -> e .)
    COMMA           reduce using rule 106 (d -> e .)
    AS              reduce using rule 106 (d -> e .)
    TIMES           reduce using rule 106 (d -> e .)
    DIVIDE          reduce using rule 106 (d -> e .)
    END             reduce using rule 106 (d -> e .)
    WHEN            reduce using rule 106 (d -> e .)
    ELSE            reduce using rule 106 (d -> e .)
    WHERE           reduce using rule 106 (d -> e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 106 (d -> e .) ]
  ! MINUS           [ reduce using rule 106 (d -> e .) ]


state 88

    (109) e -> f .
    (110) f -> f . TIMES g
    (111) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 109 (e -> f .)
    MINUS           reduce using rule 109 (e -> f .)
    EQUALS          reduce using rule 109 (e -> f .)
    NOT_EQ          reduce using rule 109 (e -> f .)
    LESS_THAN       reduce using rule 109 (e -> f .)
    GREATER_THAN    reduce using rule 109 (e -> f .)
    LESS_EQ         reduce using rule 109 (e -> f .)
    GREATER_EQ      reduce using rule 109 (e -> f .)
    AND             reduce using rule 109 (e -> f .)
    OR              reduce using rule 109 (e -> f .)
    SEMICOLON       reduce using rule 109 (e -> f .)
    THEN            reduce using rule 109 (e -> f .)
    BEGIN           reduce using rule 109 (e -> f .)
    R_PAREN         reduce using rule 109 (e -> f .)
    COMMA           reduce using rule 109 (e -> f .)
    AS              reduce using rule 109 (e -> f .)
    END             reduce using rule 109 (e -> f .)
    WHEN            reduce using rule 109 (e -> f .)
    ELSE            reduce using rule 109 (e -> f .)
    WHERE           reduce using rule 109 (e -> f .)
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145

  ! TIMES           [ reduce using rule 109 (e -> f .) ]
  ! DIVIDE          [ reduce using rule 109 (e -> f .) ]


state 89

    (113) g -> MINUS . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    h                              shift and go to state 146
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 90

    (112) f -> g .

    TIMES           reduce using rule 112 (f -> g .)
    DIVIDE          reduce using rule 112 (f -> g .)
    PLUS            reduce using rule 112 (f -> g .)
    MINUS           reduce using rule 112 (f -> g .)
    EQUALS          reduce using rule 112 (f -> g .)
    NOT_EQ          reduce using rule 112 (f -> g .)
    LESS_THAN       reduce using rule 112 (f -> g .)
    GREATER_THAN    reduce using rule 112 (f -> g .)
    LESS_EQ         reduce using rule 112 (f -> g .)
    GREATER_EQ      reduce using rule 112 (f -> g .)
    AND             reduce using rule 112 (f -> g .)
    OR              reduce using rule 112 (f -> g .)
    SEMICOLON       reduce using rule 112 (f -> g .)
    THEN            reduce using rule 112 (f -> g .)
    BEGIN           reduce using rule 112 (f -> g .)
    R_PAREN         reduce using rule 112 (f -> g .)
    COMMA           reduce using rule 112 (f -> g .)
    AS              reduce using rule 112 (f -> g .)
    END             reduce using rule 112 (f -> g .)
    WHEN            reduce using rule 112 (f -> g .)
    ELSE            reduce using rule 112 (f -> g .)
    WHERE           reduce using rule 112 (f -> g .)


state 91

    (114) g -> h .

    TIMES           reduce using rule 114 (g -> h .)
    DIVIDE          reduce using rule 114 (g -> h .)
    PLUS            reduce using rule 114 (g -> h .)
    MINUS           reduce using rule 114 (g -> h .)
    EQUALS          reduce using rule 114 (g -> h .)
    NOT_EQ          reduce using rule 114 (g -> h .)
    LESS_THAN       reduce using rule 114 (g -> h .)
    GREATER_THAN    reduce using rule 114 (g -> h .)
    LESS_EQ         reduce using rule 114 (g -> h .)
    GREATER_EQ      reduce using rule 114 (g -> h .)
    AND             reduce using rule 114 (g -> h .)
    OR              reduce using rule 114 (g -> h .)
    SEMICOLON       reduce using rule 114 (g -> h .)
    THEN            reduce using rule 114 (g -> h .)
    BEGIN           reduce using rule 114 (g -> h .)
    R_PAREN         reduce using rule 114 (g -> h .)
    COMMA           reduce using rule 114 (g -> h .)
    AS              reduce using rule 114 (g -> h .)
    END             reduce using rule 114 (g -> h .)
    WHEN            reduce using rule 114 (g -> h .)
    ELSE            reduce using rule 114 (g -> h .)
    WHERE           reduce using rule 114 (g -> h .)


state 92

    (115) h -> INTEGER_VALUE .

    TIMES           reduce using rule 115 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 115 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 115 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 115 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 115 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 115 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 115 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 115 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 115 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 115 (h -> INTEGER_VALUE .)
    AND             reduce using rule 115 (h -> INTEGER_VALUE .)
    OR              reduce using rule 115 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 115 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 115 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 115 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 115 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 115 (h -> INTEGER_VALUE .)
    AS              reduce using rule 115 (h -> INTEGER_VALUE .)
    END             reduce using rule 115 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 115 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 115 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 115 (h -> INTEGER_VALUE .)


state 93

    (116) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 116 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 116 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 116 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 116 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 116 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 116 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 116 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 116 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 116 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 116 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 116 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 116 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 116 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 116 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 116 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 116 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 116 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 116 (h -> DECIMAL_VALUE .)
    END             reduce using rule 116 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 116 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 116 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 116 (h -> DECIMAL_VALUE .)


state 94

    (117) h -> STRING .

    TIMES           reduce using rule 117 (h -> STRING .)
    DIVIDE          reduce using rule 117 (h -> STRING .)
    PLUS            reduce using rule 117 (h -> STRING .)
    MINUS           reduce using rule 117 (h -> STRING .)
    EQUALS          reduce using rule 117 (h -> STRING .)
    NOT_EQ          reduce using rule 117 (h -> STRING .)
    LESS_THAN       reduce using rule 117 (h -> STRING .)
    GREATER_THAN    reduce using rule 117 (h -> STRING .)
    LESS_EQ         reduce using rule 117 (h -> STRING .)
    GREATER_EQ      reduce using rule 117 (h -> STRING .)
    AND             reduce using rule 117 (h -> STRING .)
    OR              reduce using rule 117 (h -> STRING .)
    SEMICOLON       reduce using rule 117 (h -> STRING .)
    THEN            reduce using rule 117 (h -> STRING .)
    BEGIN           reduce using rule 117 (h -> STRING .)
    R_PAREN         reduce using rule 117 (h -> STRING .)
    COMMA           reduce using rule 117 (h -> STRING .)
    AS              reduce using rule 117 (h -> STRING .)
    END             reduce using rule 117 (h -> STRING .)
    WHEN            reduce using rule 117 (h -> STRING .)
    ELSE            reduce using rule 117 (h -> STRING .)
    WHERE           reduce using rule 117 (h -> STRING .)


state 95

    (118) h -> ID .

    TIMES           reduce using rule 118 (h -> ID .)
    DIVIDE          reduce using rule 118 (h -> ID .)
    PLUS            reduce using rule 118 (h -> ID .)
    MINUS           reduce using rule 118 (h -> ID .)
    EQUALS          reduce using rule 118 (h -> ID .)
    NOT_EQ          reduce using rule 118 (h -> ID .)
    LESS_THAN       reduce using rule 118 (h -> ID .)
    GREATER_THAN    reduce using rule 118 (h -> ID .)
    LESS_EQ         reduce using rule 118 (h -> ID .)
    GREATER_EQ      reduce using rule 118 (h -> ID .)
    AND             reduce using rule 118 (h -> ID .)
    OR              reduce using rule 118 (h -> ID .)
    SEMICOLON       reduce using rule 118 (h -> ID .)
    THEN            reduce using rule 118 (h -> ID .)
    BEGIN           reduce using rule 118 (h -> ID .)
    R_PAREN         reduce using rule 118 (h -> ID .)
    COMMA           reduce using rule 118 (h -> ID .)
    AS              reduce using rule 118 (h -> ID .)
    END             reduce using rule 118 (h -> ID .)
    WHEN            reduce using rule 118 (h -> ID .)
    ELSE            reduce using rule 118 (h -> ID .)
    WHERE           reduce using rule 118 (h -> ID .)


state 96

    (119) h -> NAME .
    (123) h -> NAME . POINT NAME

    TIMES           reduce using rule 119 (h -> NAME .)
    DIVIDE          reduce using rule 119 (h -> NAME .)
    PLUS            reduce using rule 119 (h -> NAME .)
    MINUS           reduce using rule 119 (h -> NAME .)
    EQUALS          reduce using rule 119 (h -> NAME .)
    NOT_EQ          reduce using rule 119 (h -> NAME .)
    LESS_THAN       reduce using rule 119 (h -> NAME .)
    GREATER_THAN    reduce using rule 119 (h -> NAME .)
    LESS_EQ         reduce using rule 119 (h -> NAME .)
    GREATER_EQ      reduce using rule 119 (h -> NAME .)
    AND             reduce using rule 119 (h -> NAME .)
    OR              reduce using rule 119 (h -> NAME .)
    SEMICOLON       reduce using rule 119 (h -> NAME .)
    THEN            reduce using rule 119 (h -> NAME .)
    BEGIN           reduce using rule 119 (h -> NAME .)
    R_PAREN         reduce using rule 119 (h -> NAME .)
    COMMA           reduce using rule 119 (h -> NAME .)
    AS              reduce using rule 119 (h -> NAME .)
    END             reduce using rule 119 (h -> NAME .)
    WHEN            reduce using rule 119 (h -> NAME .)
    ELSE            reduce using rule 119 (h -> NAME .)
    WHERE           reduce using rule 119 (h -> NAME .)
    POINT           shift and go to state 147


state 97

    (120) h -> L_PAREN . a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 148
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 98

    (121) h -> exec_statement .

    TIMES           reduce using rule 121 (h -> exec_statement .)
    DIVIDE          reduce using rule 121 (h -> exec_statement .)
    PLUS            reduce using rule 121 (h -> exec_statement .)
    MINUS           reduce using rule 121 (h -> exec_statement .)
    EQUALS          reduce using rule 121 (h -> exec_statement .)
    NOT_EQ          reduce using rule 121 (h -> exec_statement .)
    LESS_THAN       reduce using rule 121 (h -> exec_statement .)
    GREATER_THAN    reduce using rule 121 (h -> exec_statement .)
    LESS_EQ         reduce using rule 121 (h -> exec_statement .)
    GREATER_EQ      reduce using rule 121 (h -> exec_statement .)
    AND             reduce using rule 121 (h -> exec_statement .)
    OR              reduce using rule 121 (h -> exec_statement .)
    SEMICOLON       reduce using rule 121 (h -> exec_statement .)
    THEN            reduce using rule 121 (h -> exec_statement .)
    BEGIN           reduce using rule 121 (h -> exec_statement .)
    R_PAREN         reduce using rule 121 (h -> exec_statement .)
    COMMA           reduce using rule 121 (h -> exec_statement .)
    AS              reduce using rule 121 (h -> exec_statement .)
    END             reduce using rule 121 (h -> exec_statement .)
    WHEN            reduce using rule 121 (h -> exec_statement .)
    ELSE            reduce using rule 121 (h -> exec_statement .)
    WHERE           reduce using rule 121 (h -> exec_statement .)


state 99

    (122) h -> call_function_statement .

    TIMES           reduce using rule 122 (h -> call_function_statement .)
    DIVIDE          reduce using rule 122 (h -> call_function_statement .)
    PLUS            reduce using rule 122 (h -> call_function_statement .)
    MINUS           reduce using rule 122 (h -> call_function_statement .)
    EQUALS          reduce using rule 122 (h -> call_function_statement .)
    NOT_EQ          reduce using rule 122 (h -> call_function_statement .)
    LESS_THAN       reduce using rule 122 (h -> call_function_statement .)
    GREATER_THAN    reduce using rule 122 (h -> call_function_statement .)
    LESS_EQ         reduce using rule 122 (h -> call_function_statement .)
    GREATER_EQ      reduce using rule 122 (h -> call_function_statement .)
    AND             reduce using rule 122 (h -> call_function_statement .)
    OR              reduce using rule 122 (h -> call_function_statement .)
    SEMICOLON       reduce using rule 122 (h -> call_function_statement .)
    THEN            reduce using rule 122 (h -> call_function_statement .)
    BEGIN           reduce using rule 122 (h -> call_function_statement .)
    R_PAREN         reduce using rule 122 (h -> call_function_statement .)
    COMMA           reduce using rule 122 (h -> call_function_statement .)
    AS              reduce using rule 122 (h -> call_function_statement .)
    END             reduce using rule 122 (h -> call_function_statement .)
    WHEN            reduce using rule 122 (h -> call_function_statement .)
    ELSE            reduce using rule 122 (h -> call_function_statement .)
    WHERE           reduce using rule 122 (h -> call_function_statement .)


state 100

    (124) call_function_statement -> function_name_prod L_PAREN . vals R_PAREN
    (125) call_function_statement -> function_name_prod L_PAREN . R_PAREN
    (58) vals -> . vals COMMA a
    (59) vals -> . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    R_PAREN         shift and go to state 150
    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    function_name_prod             shift and go to state 30
    vals                           shift and go to state 149
    a                              shift and go to state 151
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99

state 101

    (126) call_function_statement -> CAS L_PAREN . a AS type R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 152
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 102

    (68) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type
    (69) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME

    NAME            shift and go to state 153


state 103

    (78) drop_table_statement -> DROP TABLE . NAME

    NAME            shift and go to state 154


state 104

    (70) if_statement -> IF a . THEN statements END IF
    (71) if_statement -> IF a . THEN statements ELSE statements END IF
    (94) a -> a . OR b

    THEN            shift and go to state 155
    OR              shift and go to state 133


state 105

    (72) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN
    (120) h -> L_PAREN . a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 156
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 106

    (73) exec_statement -> EXEC NAME . vals
    (74) exec_statement -> EXEC NAME . args
    (75) exec_statement -> EXEC NAME .
    (58) vals -> . vals COMMA a
    (59) vals -> . a
    (76) args -> . args COMMA ID ASSIGN a
    (77) args -> . ID ASSIGN a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 75 (exec_statement -> EXEC NAME .)
    TIMES           reduce using rule 75 (exec_statement -> EXEC NAME .)
    DIVIDE          reduce using rule 75 (exec_statement -> EXEC NAME .)
    PLUS            reduce using rule 75 (exec_statement -> EXEC NAME .)
    EQUALS          reduce using rule 75 (exec_statement -> EXEC NAME .)
    NOT_EQ          reduce using rule 75 (exec_statement -> EXEC NAME .)
    LESS_THAN       reduce using rule 75 (exec_statement -> EXEC NAME .)
    GREATER_THAN    reduce using rule 75 (exec_statement -> EXEC NAME .)
    LESS_EQ         reduce using rule 75 (exec_statement -> EXEC NAME .)
    GREATER_EQ      reduce using rule 75 (exec_statement -> EXEC NAME .)
    AND             reduce using rule 75 (exec_statement -> EXEC NAME .)
    OR              reduce using rule 75 (exec_statement -> EXEC NAME .)
    THEN            reduce using rule 75 (exec_statement -> EXEC NAME .)
    BEGIN           reduce using rule 75 (exec_statement -> EXEC NAME .)
    R_PAREN         reduce using rule 75 (exec_statement -> EXEC NAME .)
    COMMA           reduce using rule 75 (exec_statement -> EXEC NAME .)
    AS              reduce using rule 75 (exec_statement -> EXEC NAME .)
    END             reduce using rule 75 (exec_statement -> EXEC NAME .)
    WHEN            reduce using rule 75 (exec_statement -> EXEC NAME .)
    ELSE            reduce using rule 75 (exec_statement -> EXEC NAME .)
    WHERE           reduce using rule 75 (exec_statement -> EXEC NAME .)
    ID              shift and go to state 159
    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

  ! MINUS           [ reduce using rule 75 (exec_statement -> EXEC NAME .) ]

    vals                           shift and go to state 157
    args                           shift and go to state 158
    a                              shift and go to state 151
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 107

    (79) update_statement -> UPDATE NAME . SET column_assignments WHERE a

    SET             shift and go to state 160


state 108

    (82) while_statement -> WHILE a . BEGIN statements END
    (94) a -> a . OR b

    BEGIN           shift and go to state 161
    OR              shift and go to state 133


state 109

    (83) truncate_statement -> TRUNCATE TABLE . NAME

    NAME            shift and go to state 162


state 110

    (84) delete_statement -> DELETE FROM . NAME WHERE a

    NAME            shift and go to state 163


state 111

    (23) create_database_statement -> CREATE DATA BASE . NAME

    NAME            shift and go to state 164


state 112

    (30) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN

    L_PAREN         shift and go to state 165


state 113

    (60) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> CREATE FUNCTION NAME . L_PAREN R_PAREN RETURN type AS BEGIN statements END

    L_PAREN         shift and go to state 166


state 114

    (62) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN R_PAREN AS BEGIN statements END

    L_PAREN         shift and go to state 167


state 115

    (25) declare_statement -> DECLARE ID AS . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 168

state 116

    (26) declare_statement -> DECLARE ID type .

    SEMICOLON       reduce using rule 26 (declare_statement -> DECLARE ID type .)


state 117

    (88) type -> INT .

    SEMICOLON       reduce using rule 88 (type -> INT .)
    R_PAREN         reduce using rule 88 (type -> INT .)
    NOT             reduce using rule 88 (type -> INT .)
    NULL            reduce using rule 88 (type -> INT .)
    PRIMARY         reduce using rule 88 (type -> INT .)
    REFERENCE       reduce using rule 88 (type -> INT .)
    COMMA           reduce using rule 88 (type -> INT .)
    AS              reduce using rule 88 (type -> INT .)


state 118

    (89) type -> DECIMAL .

    SEMICOLON       reduce using rule 89 (type -> DECIMAL .)
    R_PAREN         reduce using rule 89 (type -> DECIMAL .)
    NOT             reduce using rule 89 (type -> DECIMAL .)
    NULL            reduce using rule 89 (type -> DECIMAL .)
    PRIMARY         reduce using rule 89 (type -> DECIMAL .)
    REFERENCE       reduce using rule 89 (type -> DECIMAL .)
    COMMA           reduce using rule 89 (type -> DECIMAL .)
    AS              reduce using rule 89 (type -> DECIMAL .)


state 119

    (90) type -> DATE .

    SEMICOLON       reduce using rule 90 (type -> DATE .)
    R_PAREN         reduce using rule 90 (type -> DATE .)
    NOT             reduce using rule 90 (type -> DATE .)
    NULL            reduce using rule 90 (type -> DATE .)
    PRIMARY         reduce using rule 90 (type -> DATE .)
    REFERENCE       reduce using rule 90 (type -> DATE .)
    COMMA           reduce using rule 90 (type -> DATE .)
    AS              reduce using rule 90 (type -> DATE .)


state 120

    (91) type -> DATETIME .

    SEMICOLON       reduce using rule 91 (type -> DATETIME .)
    R_PAREN         reduce using rule 91 (type -> DATETIME .)
    NOT             reduce using rule 91 (type -> DATETIME .)
    NULL            reduce using rule 91 (type -> DATETIME .)
    PRIMARY         reduce using rule 91 (type -> DATETIME .)
    REFERENCE       reduce using rule 91 (type -> DATETIME .)
    COMMA           reduce using rule 91 (type -> DATETIME .)
    AS              reduce using rule 91 (type -> DATETIME .)


state 121

    (92) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 169


state 122

    (93) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 170


state 123

    (28) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 171


state 124

    (29) assignments -> ID ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 172
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 125

    (39) select_statement -> SELECT columns FROM . NAME
    (40) select_statement -> SELECT columns FROM . NAME WHERE a
    (41) select_statement -> SELECT columns FROM . table_names_select WHERE a
    (42) select_statement -> SELECT columns FROM . table_names_select
    (43) table_names_select -> . NAME table_names_select_p

    NAME            shift and go to state 173

    table_names_select             shift and go to state 174

state 126

    (49) columns -> columns COMMA . column
    (50) columns -> columns COMMA . column POINT column
    (53) column -> . TIMES
    (54) column -> . NAME
    (55) column -> . case_statement
    (56) column -> . call_function_statement
    (57) column -> . if_statement NAME
    (85) case_statement -> . CASE when_statements END NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    TIMES           shift and go to state 76
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    CAS             shift and go to state 31
    IF              shift and go to state 34
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    column                         shift and go to state 175
    case_statement                 shift and go to state 77
    call_function_statement        shift and go to state 78
    if_statement                   shift and go to state 79
    function_name_prod             shift and go to state 30

state 127

    (51) columns -> column POINT . column
    (53) column -> . TIMES
    (54) column -> . NAME
    (55) column -> . case_statement
    (56) column -> . call_function_statement
    (57) column -> . if_statement NAME
    (85) case_statement -> . CASE when_statements END NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    TIMES           shift and go to state 76
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    CAS             shift and go to state 31
    IF              shift and go to state 34
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    column                         shift and go to state 176
    case_statement                 shift and go to state 77
    call_function_statement        shift and go to state 78
    if_statement                   shift and go to state 79
    function_name_prod             shift and go to state 30

state 128

    (57) column -> if_statement NAME .

    POINT           reduce using rule 57 (column -> if_statement NAME .)
    FROM            reduce using rule 57 (column -> if_statement NAME .)
    COMMA           reduce using rule 57 (column -> if_statement NAME .)


state 129

    (85) case_statement -> CASE when_statements . END NAME

    END             shift and go to state 177


state 130

    (86) when_statements -> WHEN . a THEN a when_statements
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 178
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 131

    (87) when_statements -> ELSE . THEN a

    THEN            shift and go to state 179


state 132

    (46) insert_statement -> INSERT INTO NAME . L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 180


state 133

    (94) a -> a OR . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    b                              shift and go to state 181
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 134

    (96) b -> b AND . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    c                              shift and go to state 182
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 135

    (98) c -> NOT_SIGN d .
    (100) d -> d . EQUALS e
    (101) d -> d . NOT_EQ e
    (102) d -> d . LESS_THAN e
    (103) d -> d . GREATER_THAN e
    (104) d -> d . LESS_EQ e
    (105) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 98 (c -> NOT_SIGN d .)
    OR              reduce using rule 98 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 98 (c -> NOT_SIGN d .)
    THEN            reduce using rule 98 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 98 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 98 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 98 (c -> NOT_SIGN d .)
    AS              reduce using rule 98 (c -> NOT_SIGN d .)
    TIMES           reduce using rule 98 (c -> NOT_SIGN d .)
    DIVIDE          reduce using rule 98 (c -> NOT_SIGN d .)
    PLUS            reduce using rule 98 (c -> NOT_SIGN d .)
    MINUS           reduce using rule 98 (c -> NOT_SIGN d .)
    END             reduce using rule 98 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 98 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 98 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 98 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 136
    NOT_EQ          shift and go to state 137
    LESS_THAN       shift and go to state 138
    GREATER_THAN    shift and go to state 139
    LESS_EQ         shift and go to state 140
    GREATER_EQ      shift and go to state 141

  ! EQUALS          [ reduce using rule 98 (c -> NOT_SIGN d .) ]
  ! NOT_EQ          [ reduce using rule 98 (c -> NOT_SIGN d .) ]
  ! LESS_THAN       [ reduce using rule 98 (c -> NOT_SIGN d .) ]
  ! GREATER_THAN    [ reduce using rule 98 (c -> NOT_SIGN d .) ]
  ! LESS_EQ         [ reduce using rule 98 (c -> NOT_SIGN d .) ]
  ! GREATER_EQ      [ reduce using rule 98 (c -> NOT_SIGN d .) ]


state 136

    (100) d -> d EQUALS . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 183
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 137

    (101) d -> d NOT_EQ . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 184
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 138

    (102) d -> d LESS_THAN . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 185
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 139

    (103) d -> d GREATER_THAN . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 186
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 140

    (104) d -> d LESS_EQ . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 187
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 141

    (105) d -> d GREATER_EQ . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 188
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 142

    (107) e -> e PLUS . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    f                              shift and go to state 189
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 143

    (108) e -> e MINUS . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    f                              shift and go to state 190
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 144

    (110) f -> f TIMES . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    g                              shift and go to state 191
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 145

    (111) f -> f DIVIDE . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    g                              shift and go to state 192
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 146

    (113) g -> MINUS h .

    TIMES           reduce using rule 113 (g -> MINUS h .)
    DIVIDE          reduce using rule 113 (g -> MINUS h .)
    PLUS            reduce using rule 113 (g -> MINUS h .)
    MINUS           reduce using rule 113 (g -> MINUS h .)
    EQUALS          reduce using rule 113 (g -> MINUS h .)
    NOT_EQ          reduce using rule 113 (g -> MINUS h .)
    LESS_THAN       reduce using rule 113 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 113 (g -> MINUS h .)
    LESS_EQ         reduce using rule 113 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 113 (g -> MINUS h .)
    AND             reduce using rule 113 (g -> MINUS h .)
    OR              reduce using rule 113 (g -> MINUS h .)
    SEMICOLON       reduce using rule 113 (g -> MINUS h .)
    THEN            reduce using rule 113 (g -> MINUS h .)
    BEGIN           reduce using rule 113 (g -> MINUS h .)
    R_PAREN         reduce using rule 113 (g -> MINUS h .)
    COMMA           reduce using rule 113 (g -> MINUS h .)
    AS              reduce using rule 113 (g -> MINUS h .)
    END             reduce using rule 113 (g -> MINUS h .)
    WHEN            reduce using rule 113 (g -> MINUS h .)
    ELSE            reduce using rule 113 (g -> MINUS h .)
    WHERE           reduce using rule 113 (g -> MINUS h .)


state 147

    (123) h -> NAME POINT . NAME

    NAME            shift and go to state 193


state 148

    (120) h -> L_PAREN a . R_PAREN
    (94) a -> a . OR b

    R_PAREN         shift and go to state 194
    OR              shift and go to state 133


state 149

    (124) call_function_statement -> function_name_prod L_PAREN vals . R_PAREN
    (58) vals -> vals . COMMA a

    R_PAREN         shift and go to state 195
    COMMA           shift and go to state 196


state 150

    (125) call_function_statement -> function_name_prod L_PAREN R_PAREN .

    SEMICOLON       reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    POINT           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    FROM            reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    COMMA           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    TIMES           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    PLUS            reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    MINUS           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    EQUALS          reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    NOT_EQ          reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_THAN       reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_THAN    reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_EQ         reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_EQ      reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AND             reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    OR              reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    THEN            reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    BEGIN           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AS              reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    END             reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    WHEN            reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    ELSE            reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    WHERE           reduce using rule 125 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)


state 151

    (59) vals -> a .
    (94) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 59 (vals -> a .)
    COMMA           reduce using rule 59 (vals -> a .)
    EQUALS          reduce using rule 59 (vals -> a .)
    NOT_EQ          reduce using rule 59 (vals -> a .)
    LESS_THAN       reduce using rule 59 (vals -> a .)
    GREATER_THAN    reduce using rule 59 (vals -> a .)
    LESS_EQ         reduce using rule 59 (vals -> a .)
    GREATER_EQ      reduce using rule 59 (vals -> a .)
    AND             reduce using rule 59 (vals -> a .)
    SEMICOLON       reduce using rule 59 (vals -> a .)
    THEN            reduce using rule 59 (vals -> a .)
    BEGIN           reduce using rule 59 (vals -> a .)
    AS              reduce using rule 59 (vals -> a .)
    TIMES           reduce using rule 59 (vals -> a .)
    DIVIDE          reduce using rule 59 (vals -> a .)
    PLUS            reduce using rule 59 (vals -> a .)
    MINUS           reduce using rule 59 (vals -> a .)
    END             reduce using rule 59 (vals -> a .)
    WHEN            reduce using rule 59 (vals -> a .)
    ELSE            reduce using rule 59 (vals -> a .)
    WHERE           reduce using rule 59 (vals -> a .)
    OR              shift and go to state 133

  ! OR              [ reduce using rule 59 (vals -> a .) ]


state 152

    (126) call_function_statement -> CAS L_PAREN a . AS type R_PAREN
    (94) a -> a . OR b

    AS              shift and go to state 197
    OR              shift and go to state 133


state 153

    (68) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type
    (69) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME

    ADD             shift and go to state 198
    DROP            shift and go to state 199


state 154

    (78) drop_table_statement -> DROP TABLE NAME .

    SEMICOLON       reduce using rule 78 (drop_table_statement -> DROP TABLE NAME .)


state 155

    (70) if_statement -> IF a THEN . statements END IF
    (71) if_statement -> IF a THEN . statements ELSE statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 200
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 156

    (72) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN
    (120) h -> L_PAREN a . R_PAREN
    (94) a -> a . OR b

    COMMA           shift and go to state 201
    R_PAREN         shift and go to state 194
    OR              shift and go to state 133


state 157

    (73) exec_statement -> EXEC NAME vals .
    (58) vals -> vals . COMMA a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    TIMES           reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    DIVIDE          reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    PLUS            reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    MINUS           reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    EQUALS          reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    NOT_EQ          reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    LESS_THAN       reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    GREATER_THAN    reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    LESS_EQ         reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    GREATER_EQ      reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    AND             reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    OR              reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    THEN            reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    BEGIN           reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    R_PAREN         reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    AS              reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    END             reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    WHEN            reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    ELSE            reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    WHERE           reduce using rule 73 (exec_statement -> EXEC NAME vals .)
    COMMA           shift and go to state 196

  ! COMMA           [ reduce using rule 73 (exec_statement -> EXEC NAME vals .) ]


state 158

    (74) exec_statement -> EXEC NAME args .
    (76) args -> args . COMMA ID ASSIGN a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 74 (exec_statement -> EXEC NAME args .)
    TIMES           reduce using rule 74 (exec_statement -> EXEC NAME args .)
    DIVIDE          reduce using rule 74 (exec_statement -> EXEC NAME args .)
    PLUS            reduce using rule 74 (exec_statement -> EXEC NAME args .)
    MINUS           reduce using rule 74 (exec_statement -> EXEC NAME args .)
    EQUALS          reduce using rule 74 (exec_statement -> EXEC NAME args .)
    NOT_EQ          reduce using rule 74 (exec_statement -> EXEC NAME args .)
    LESS_THAN       reduce using rule 74 (exec_statement -> EXEC NAME args .)
    GREATER_THAN    reduce using rule 74 (exec_statement -> EXEC NAME args .)
    LESS_EQ         reduce using rule 74 (exec_statement -> EXEC NAME args .)
    GREATER_EQ      reduce using rule 74 (exec_statement -> EXEC NAME args .)
    AND             reduce using rule 74 (exec_statement -> EXEC NAME args .)
    OR              reduce using rule 74 (exec_statement -> EXEC NAME args .)
    THEN            reduce using rule 74 (exec_statement -> EXEC NAME args .)
    BEGIN           reduce using rule 74 (exec_statement -> EXEC NAME args .)
    R_PAREN         reduce using rule 74 (exec_statement -> EXEC NAME args .)
    AS              reduce using rule 74 (exec_statement -> EXEC NAME args .)
    END             reduce using rule 74 (exec_statement -> EXEC NAME args .)
    WHEN            reduce using rule 74 (exec_statement -> EXEC NAME args .)
    ELSE            reduce using rule 74 (exec_statement -> EXEC NAME args .)
    WHERE           reduce using rule 74 (exec_statement -> EXEC NAME args .)
    COMMA           shift and go to state 202

  ! COMMA           [ reduce using rule 74 (exec_statement -> EXEC NAME args .) ]


state 159

    (77) args -> ID . ASSIGN a
    (118) h -> ID .

    ASSIGN          shift and go to state 203
    EQUALS          reduce using rule 118 (h -> ID .)
    NOT_EQ          reduce using rule 118 (h -> ID .)
    LESS_THAN       reduce using rule 118 (h -> ID .)
    GREATER_THAN    reduce using rule 118 (h -> ID .)
    LESS_EQ         reduce using rule 118 (h -> ID .)
    GREATER_EQ      reduce using rule 118 (h -> ID .)
    AND             reduce using rule 118 (h -> ID .)
    OR              reduce using rule 118 (h -> ID .)
    SEMICOLON       reduce using rule 118 (h -> ID .)
    THEN            reduce using rule 118 (h -> ID .)
    BEGIN           reduce using rule 118 (h -> ID .)
    R_PAREN         reduce using rule 118 (h -> ID .)
    COMMA           reduce using rule 118 (h -> ID .)
    AS              reduce using rule 118 (h -> ID .)
    TIMES           reduce using rule 118 (h -> ID .)
    DIVIDE          reduce using rule 118 (h -> ID .)
    PLUS            reduce using rule 118 (h -> ID .)
    MINUS           reduce using rule 118 (h -> ID .)
    END             reduce using rule 118 (h -> ID .)
    WHEN            reduce using rule 118 (h -> ID .)
    ELSE            reduce using rule 118 (h -> ID .)
    WHERE           reduce using rule 118 (h -> ID .)


state 160

    (79) update_statement -> UPDATE NAME SET . column_assignments WHERE a
    (80) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (81) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 204

    column_assignments             shift and go to state 205

state 161

    (82) while_statement -> WHILE a BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 206
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 162

    (83) truncate_statement -> TRUNCATE TABLE NAME .

    SEMICOLON       reduce using rule 83 (truncate_statement -> TRUNCATE TABLE NAME .)


state 163

    (84) delete_statement -> DELETE FROM NAME . WHERE a

    WHERE           shift and go to state 207


state 164

    (23) create_database_statement -> CREATE DATA BASE NAME .

    SEMICOLON       reduce using rule 23 (create_database_statement -> CREATE DATA BASE NAME .)


state 165

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN
    (31) properties -> . properties COMMA property
    (32) properties -> . property
    (33) property -> . NAME type null_prod PRIMARY KEY
    (34) property -> . NAME type null_prod
    (35) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 208

    properties                     shift and go to state 209
    property                       shift and go to state 210

state 166

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN . R_PAREN RETURN type AS BEGIN statements END
    (64) parameters -> . parameters COMMA ID AS type
    (65) parameters -> . parameters COMMA ID type
    (66) parameters -> . ID type
    (67) parameters -> . ID AS type

    R_PAREN         shift and go to state 212
    ID              shift and go to state 213

    parameters                     shift and go to state 211

state 167

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . R_PAREN AS BEGIN statements END
    (64) parameters -> . parameters COMMA ID AS type
    (65) parameters -> . parameters COMMA ID type
    (66) parameters -> . ID type
    (67) parameters -> . ID AS type

    R_PAREN         shift and go to state 215
    ID              shift and go to state 213

    parameters                     shift and go to state 214

state 168

    (25) declare_statement -> DECLARE ID AS type .

    SEMICOLON       reduce using rule 25 (declare_statement -> DECLARE ID AS type .)


state 169

    (92) type -> NCHAR L_PAREN . a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 216
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 170

    (93) type -> NVARCHAR L_PAREN . a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 217
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 171

    (28) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 218


state 172

    (29) assignments -> ID ASSIGN a .
    (94) a -> a . OR b

    COMMA           reduce using rule 29 (assignments -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 29 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 133


state 173

    (39) select_statement -> SELECT columns FROM NAME .
    (40) select_statement -> SELECT columns FROM NAME . WHERE a
    (43) table_names_select -> NAME . table_names_select_p
    (44) table_names_select_p -> . COMMA NAME table_names_select_p
    (45) table_names_select_p -> .

  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (select_statement -> SELECT columns FROM NAME .)
    SEMICOLON       reduce using rule 39 (select_statement -> SELECT columns FROM NAME .)
    WHERE           shift and go to state 219
    COMMA           shift and go to state 221

  ! WHERE           [ reduce using rule 45 (table_names_select_p -> .) ]
  ! SEMICOLON       [ reduce using rule 45 (table_names_select_p -> .) ]

    table_names_select_p           shift and go to state 220

state 174

    (41) select_statement -> SELECT columns FROM table_names_select . WHERE a
    (42) select_statement -> SELECT columns FROM table_names_select .

    WHERE           shift and go to state 222
    SEMICOLON       reduce using rule 42 (select_statement -> SELECT columns FROM table_names_select .)


state 175

    (49) columns -> columns COMMA column .
    (50) columns -> columns COMMA column . POINT column

    FROM            reduce using rule 49 (columns -> columns COMMA column .)
    COMMA           reduce using rule 49 (columns -> columns COMMA column .)
    POINT           shift and go to state 223


state 176

    (51) columns -> column POINT column .

    FROM            reduce using rule 51 (columns -> column POINT column .)
    COMMA           reduce using rule 51 (columns -> column POINT column .)


state 177

    (85) case_statement -> CASE when_statements END . NAME

    NAME            shift and go to state 224


state 178

    (86) when_statements -> WHEN a . THEN a when_statements
    (94) a -> a . OR b

    THEN            shift and go to state 225
    OR              shift and go to state 133


state 179

    (87) when_statements -> ELSE THEN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 226
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 180

    (46) insert_statement -> INSERT INTO NAME L_PAREN . column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (47) column_names -> . column_names COMMA NAME
    (48) column_names -> . NAME

    NAME            shift and go to state 227

    column_names                   shift and go to state 228

state 181

    (94) a -> a OR b .
    (96) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 94 (a -> a OR b .)
    SEMICOLON       reduce using rule 94 (a -> a OR b .)
    THEN            reduce using rule 94 (a -> a OR b .)
    BEGIN           reduce using rule 94 (a -> a OR b .)
    R_PAREN         reduce using rule 94 (a -> a OR b .)
    COMMA           reduce using rule 94 (a -> a OR b .)
    AS              reduce using rule 94 (a -> a OR b .)
    EQUALS          reduce using rule 94 (a -> a OR b .)
    NOT_EQ          reduce using rule 94 (a -> a OR b .)
    LESS_THAN       reduce using rule 94 (a -> a OR b .)
    GREATER_THAN    reduce using rule 94 (a -> a OR b .)
    LESS_EQ         reduce using rule 94 (a -> a OR b .)
    GREATER_EQ      reduce using rule 94 (a -> a OR b .)
    TIMES           reduce using rule 94 (a -> a OR b .)
    DIVIDE          reduce using rule 94 (a -> a OR b .)
    PLUS            reduce using rule 94 (a -> a OR b .)
    MINUS           reduce using rule 94 (a -> a OR b .)
    END             reduce using rule 94 (a -> a OR b .)
    WHEN            reduce using rule 94 (a -> a OR b .)
    ELSE            reduce using rule 94 (a -> a OR b .)
    WHERE           reduce using rule 94 (a -> a OR b .)
    AND             shift and go to state 134

  ! AND             [ reduce using rule 94 (a -> a OR b .) ]


state 182

    (96) b -> b AND c .

    AND             reduce using rule 96 (b -> b AND c .)
    OR              reduce using rule 96 (b -> b AND c .)
    SEMICOLON       reduce using rule 96 (b -> b AND c .)
    THEN            reduce using rule 96 (b -> b AND c .)
    BEGIN           reduce using rule 96 (b -> b AND c .)
    R_PAREN         reduce using rule 96 (b -> b AND c .)
    COMMA           reduce using rule 96 (b -> b AND c .)
    AS              reduce using rule 96 (b -> b AND c .)
    EQUALS          reduce using rule 96 (b -> b AND c .)
    NOT_EQ          reduce using rule 96 (b -> b AND c .)
    LESS_THAN       reduce using rule 96 (b -> b AND c .)
    GREATER_THAN    reduce using rule 96 (b -> b AND c .)
    LESS_EQ         reduce using rule 96 (b -> b AND c .)
    GREATER_EQ      reduce using rule 96 (b -> b AND c .)
    TIMES           reduce using rule 96 (b -> b AND c .)
    DIVIDE          reduce using rule 96 (b -> b AND c .)
    PLUS            reduce using rule 96 (b -> b AND c .)
    MINUS           reduce using rule 96 (b -> b AND c .)
    END             reduce using rule 96 (b -> b AND c .)
    WHEN            reduce using rule 96 (b -> b AND c .)
    ELSE            reduce using rule 96 (b -> b AND c .)
    WHERE           reduce using rule 96 (b -> b AND c .)


state 183

    (100) d -> d EQUALS e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 100 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 100 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 100 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 100 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 100 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 100 (d -> d EQUALS e .)
    AND             reduce using rule 100 (d -> d EQUALS e .)
    OR              reduce using rule 100 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 100 (d -> d EQUALS e .)
    THEN            reduce using rule 100 (d -> d EQUALS e .)
    BEGIN           reduce using rule 100 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 100 (d -> d EQUALS e .)
    COMMA           reduce using rule 100 (d -> d EQUALS e .)
    AS              reduce using rule 100 (d -> d EQUALS e .)
    TIMES           reduce using rule 100 (d -> d EQUALS e .)
    DIVIDE          reduce using rule 100 (d -> d EQUALS e .)
    END             reduce using rule 100 (d -> d EQUALS e .)
    WHEN            reduce using rule 100 (d -> d EQUALS e .)
    ELSE            reduce using rule 100 (d -> d EQUALS e .)
    WHERE           reduce using rule 100 (d -> d EQUALS e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 100 (d -> d EQUALS e .) ]
  ! MINUS           [ reduce using rule 100 (d -> d EQUALS e .) ]


state 184

    (101) d -> d NOT_EQ e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 101 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 101 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 101 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 101 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 101 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 101 (d -> d NOT_EQ e .)
    AND             reduce using rule 101 (d -> d NOT_EQ e .)
    OR              reduce using rule 101 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 101 (d -> d NOT_EQ e .)
    THEN            reduce using rule 101 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 101 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 101 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 101 (d -> d NOT_EQ e .)
    AS              reduce using rule 101 (d -> d NOT_EQ e .)
    TIMES           reduce using rule 101 (d -> d NOT_EQ e .)
    DIVIDE          reduce using rule 101 (d -> d NOT_EQ e .)
    END             reduce using rule 101 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 101 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 101 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 101 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 101 (d -> d NOT_EQ e .) ]
  ! MINUS           [ reduce using rule 101 (d -> d NOT_EQ e .) ]


state 185

    (102) d -> d LESS_THAN e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 102 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 102 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 102 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 102 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 102 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 102 (d -> d LESS_THAN e .)
    AND             reduce using rule 102 (d -> d LESS_THAN e .)
    OR              reduce using rule 102 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 102 (d -> d LESS_THAN e .)
    THEN            reduce using rule 102 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 102 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 102 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 102 (d -> d LESS_THAN e .)
    AS              reduce using rule 102 (d -> d LESS_THAN e .)
    TIMES           reduce using rule 102 (d -> d LESS_THAN e .)
    DIVIDE          reduce using rule 102 (d -> d LESS_THAN e .)
    END             reduce using rule 102 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 102 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 102 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 102 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 102 (d -> d LESS_THAN e .) ]
  ! MINUS           [ reduce using rule 102 (d -> d LESS_THAN e .) ]


state 186

    (103) d -> d GREATER_THAN e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 103 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 103 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 103 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 103 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 103 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 103 (d -> d GREATER_THAN e .)
    AND             reduce using rule 103 (d -> d GREATER_THAN e .)
    OR              reduce using rule 103 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 103 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 103 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 103 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 103 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 103 (d -> d GREATER_THAN e .)
    AS              reduce using rule 103 (d -> d GREATER_THAN e .)
    TIMES           reduce using rule 103 (d -> d GREATER_THAN e .)
    DIVIDE          reduce using rule 103 (d -> d GREATER_THAN e .)
    END             reduce using rule 103 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 103 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 103 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 103 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 103 (d -> d GREATER_THAN e .) ]
  ! MINUS           [ reduce using rule 103 (d -> d GREATER_THAN e .) ]


state 187

    (104) d -> d LESS_EQ e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 104 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 104 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 104 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 104 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 104 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 104 (d -> d LESS_EQ e .)
    AND             reduce using rule 104 (d -> d LESS_EQ e .)
    OR              reduce using rule 104 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 104 (d -> d LESS_EQ e .)
    THEN            reduce using rule 104 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 104 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 104 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 104 (d -> d LESS_EQ e .)
    AS              reduce using rule 104 (d -> d LESS_EQ e .)
    TIMES           reduce using rule 104 (d -> d LESS_EQ e .)
    DIVIDE          reduce using rule 104 (d -> d LESS_EQ e .)
    END             reduce using rule 104 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 104 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 104 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 104 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 104 (d -> d LESS_EQ e .) ]
  ! MINUS           [ reduce using rule 104 (d -> d LESS_EQ e .) ]


state 188

    (105) d -> d GREATER_EQ e .
    (107) e -> e . PLUS f
    (108) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 105 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 105 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 105 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 105 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 105 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 105 (d -> d GREATER_EQ e .)
    AND             reduce using rule 105 (d -> d GREATER_EQ e .)
    OR              reduce using rule 105 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 105 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 105 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 105 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 105 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 105 (d -> d GREATER_EQ e .)
    AS              reduce using rule 105 (d -> d GREATER_EQ e .)
    TIMES           reduce using rule 105 (d -> d GREATER_EQ e .)
    DIVIDE          reduce using rule 105 (d -> d GREATER_EQ e .)
    END             reduce using rule 105 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 105 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 105 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 105 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

  ! PLUS            [ reduce using rule 105 (d -> d GREATER_EQ e .) ]
  ! MINUS           [ reduce using rule 105 (d -> d GREATER_EQ e .) ]


state 189

    (107) e -> e PLUS f .
    (110) f -> f . TIMES g
    (111) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 107 (e -> e PLUS f .)
    MINUS           reduce using rule 107 (e -> e PLUS f .)
    EQUALS          reduce using rule 107 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 107 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 107 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 107 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 107 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 107 (e -> e PLUS f .)
    AND             reduce using rule 107 (e -> e PLUS f .)
    OR              reduce using rule 107 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 107 (e -> e PLUS f .)
    THEN            reduce using rule 107 (e -> e PLUS f .)
    BEGIN           reduce using rule 107 (e -> e PLUS f .)
    R_PAREN         reduce using rule 107 (e -> e PLUS f .)
    COMMA           reduce using rule 107 (e -> e PLUS f .)
    AS              reduce using rule 107 (e -> e PLUS f .)
    END             reduce using rule 107 (e -> e PLUS f .)
    WHEN            reduce using rule 107 (e -> e PLUS f .)
    ELSE            reduce using rule 107 (e -> e PLUS f .)
    WHERE           reduce using rule 107 (e -> e PLUS f .)
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145

  ! TIMES           [ reduce using rule 107 (e -> e PLUS f .) ]
  ! DIVIDE          [ reduce using rule 107 (e -> e PLUS f .) ]


state 190

    (108) e -> e MINUS f .
    (110) f -> f . TIMES g
    (111) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 108 (e -> e MINUS f .)
    MINUS           reduce using rule 108 (e -> e MINUS f .)
    EQUALS          reduce using rule 108 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 108 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 108 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 108 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 108 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 108 (e -> e MINUS f .)
    AND             reduce using rule 108 (e -> e MINUS f .)
    OR              reduce using rule 108 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 108 (e -> e MINUS f .)
    THEN            reduce using rule 108 (e -> e MINUS f .)
    BEGIN           reduce using rule 108 (e -> e MINUS f .)
    R_PAREN         reduce using rule 108 (e -> e MINUS f .)
    COMMA           reduce using rule 108 (e -> e MINUS f .)
    AS              reduce using rule 108 (e -> e MINUS f .)
    END             reduce using rule 108 (e -> e MINUS f .)
    WHEN            reduce using rule 108 (e -> e MINUS f .)
    ELSE            reduce using rule 108 (e -> e MINUS f .)
    WHERE           reduce using rule 108 (e -> e MINUS f .)
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145

  ! TIMES           [ reduce using rule 108 (e -> e MINUS f .) ]
  ! DIVIDE          [ reduce using rule 108 (e -> e MINUS f .) ]


state 191

    (110) f -> f TIMES g .

    TIMES           reduce using rule 110 (f -> f TIMES g .)
    DIVIDE          reduce using rule 110 (f -> f TIMES g .)
    PLUS            reduce using rule 110 (f -> f TIMES g .)
    MINUS           reduce using rule 110 (f -> f TIMES g .)
    EQUALS          reduce using rule 110 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 110 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 110 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 110 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 110 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 110 (f -> f TIMES g .)
    AND             reduce using rule 110 (f -> f TIMES g .)
    OR              reduce using rule 110 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 110 (f -> f TIMES g .)
    THEN            reduce using rule 110 (f -> f TIMES g .)
    BEGIN           reduce using rule 110 (f -> f TIMES g .)
    R_PAREN         reduce using rule 110 (f -> f TIMES g .)
    COMMA           reduce using rule 110 (f -> f TIMES g .)
    AS              reduce using rule 110 (f -> f TIMES g .)
    END             reduce using rule 110 (f -> f TIMES g .)
    WHEN            reduce using rule 110 (f -> f TIMES g .)
    ELSE            reduce using rule 110 (f -> f TIMES g .)
    WHERE           reduce using rule 110 (f -> f TIMES g .)


state 192

    (111) f -> f DIVIDE g .

    TIMES           reduce using rule 111 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 111 (f -> f DIVIDE g .)
    PLUS            reduce using rule 111 (f -> f DIVIDE g .)
    MINUS           reduce using rule 111 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 111 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 111 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 111 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 111 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 111 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 111 (f -> f DIVIDE g .)
    AND             reduce using rule 111 (f -> f DIVIDE g .)
    OR              reduce using rule 111 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 111 (f -> f DIVIDE g .)
    THEN            reduce using rule 111 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 111 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 111 (f -> f DIVIDE g .)
    COMMA           reduce using rule 111 (f -> f DIVIDE g .)
    AS              reduce using rule 111 (f -> f DIVIDE g .)
    END             reduce using rule 111 (f -> f DIVIDE g .)
    WHEN            reduce using rule 111 (f -> f DIVIDE g .)
    ELSE            reduce using rule 111 (f -> f DIVIDE g .)
    WHERE           reduce using rule 111 (f -> f DIVIDE g .)


state 193

    (123) h -> NAME POINT NAME .

    TIMES           reduce using rule 123 (h -> NAME POINT NAME .)
    DIVIDE          reduce using rule 123 (h -> NAME POINT NAME .)
    PLUS            reduce using rule 123 (h -> NAME POINT NAME .)
    MINUS           reduce using rule 123 (h -> NAME POINT NAME .)
    EQUALS          reduce using rule 123 (h -> NAME POINT NAME .)
    NOT_EQ          reduce using rule 123 (h -> NAME POINT NAME .)
    LESS_THAN       reduce using rule 123 (h -> NAME POINT NAME .)
    GREATER_THAN    reduce using rule 123 (h -> NAME POINT NAME .)
    LESS_EQ         reduce using rule 123 (h -> NAME POINT NAME .)
    GREATER_EQ      reduce using rule 123 (h -> NAME POINT NAME .)
    AND             reduce using rule 123 (h -> NAME POINT NAME .)
    OR              reduce using rule 123 (h -> NAME POINT NAME .)
    SEMICOLON       reduce using rule 123 (h -> NAME POINT NAME .)
    THEN            reduce using rule 123 (h -> NAME POINT NAME .)
    BEGIN           reduce using rule 123 (h -> NAME POINT NAME .)
    R_PAREN         reduce using rule 123 (h -> NAME POINT NAME .)
    COMMA           reduce using rule 123 (h -> NAME POINT NAME .)
    AS              reduce using rule 123 (h -> NAME POINT NAME .)
    END             reduce using rule 123 (h -> NAME POINT NAME .)
    WHEN            reduce using rule 123 (h -> NAME POINT NAME .)
    ELSE            reduce using rule 123 (h -> NAME POINT NAME .)
    WHERE           reduce using rule 123 (h -> NAME POINT NAME .)


state 194

    (120) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    PLUS            reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    MINUS           reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    EQUALS          reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    NOT_EQ          reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    LESS_THAN       reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    GREATER_THAN    reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    LESS_EQ         reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    GREATER_EQ      reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    SEMICOLON       reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    THEN            reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    BEGIN           reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    COMMA           reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    AS              reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    END             reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    WHEN            reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    ELSE            reduce using rule 120 (h -> L_PAREN a R_PAREN .)
    WHERE           reduce using rule 120 (h -> L_PAREN a R_PAREN .)


state 195

    (124) call_function_statement -> function_name_prod L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    POINT           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    FROM            reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    COMMA           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    TIMES           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    DIVIDE          reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    PLUS            reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    MINUS           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    EQUALS          reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    NOT_EQ          reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_THAN       reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_THAN    reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_EQ         reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_EQ      reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AND             reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    OR              reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    THEN            reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    BEGIN           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    R_PAREN         reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AS              reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    END             reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    WHEN            reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    ELSE            reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    WHERE           reduce using rule 124 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)


state 196

    (58) vals -> vals COMMA . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 229
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 197

    (126) call_function_statement -> CAS L_PAREN a AS . type R_PAREN
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 230

state 198

    (68) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type

    COLUMN          shift and go to state 231


state 199

    (69) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME

    COLUMN          shift and go to state 232


state 200

    (70) if_statement -> IF a THEN statements . END IF
    (71) if_statement -> IF a THEN statements . ELSE statements END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 233
    ELSE            shift and go to state 234
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 201

    (72) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 235
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 202

    (76) args -> args COMMA . ID ASSIGN a

    ID              shift and go to state 236


state 203

    (77) args -> ID ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 237
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 204

    (81) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 238


state 205

    (79) update_statement -> UPDATE NAME SET column_assignments . WHERE a
    (80) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 239
    COMMA           shift and go to state 240


state 206

    (82) while_statement -> WHILE a BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 241
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 207

    (84) delete_statement -> DELETE FROM NAME WHERE . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 242
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 208

    (33) property -> NAME . type null_prod PRIMARY KEY
    (34) property -> NAME . type null_prod
    (35) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 243

state 209

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN
    (31) properties -> properties . COMMA property

    R_PAREN         shift and go to state 244
    COMMA           shift and go to state 245


state 210

    (32) properties -> property .

    R_PAREN         reduce using rule 32 (properties -> property .)
    COMMA           reduce using rule 32 (properties -> property .)


state 211

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END
    (64) parameters -> parameters . COMMA ID AS type
    (65) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 246
    COMMA           shift and go to state 247


state 212

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 248


state 213

    (66) parameters -> ID . type
    (67) parameters -> ID . AS type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 250
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 249

state 214

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END
    (64) parameters -> parameters . COMMA ID AS type
    (65) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 251
    COMMA           shift and go to state 247


state 215

    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN . AS BEGIN statements END

    AS              shift and go to state 252


state 216

    (92) type -> NCHAR L_PAREN a . R_PAREN
    (94) a -> a . OR b

    R_PAREN         shift and go to state 253
    OR              shift and go to state 133


state 217

    (93) type -> NVARCHAR L_PAREN a . R_PAREN
    (94) a -> a . OR b

    R_PAREN         shift and go to state 254
    OR              shift and go to state 133


state 218

    (28) assignments -> assignments COMMA ID ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 255
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 219

    (40) select_statement -> SELECT columns FROM NAME WHERE . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 256
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 220

    (43) table_names_select -> NAME table_names_select_p .

    WHERE           reduce using rule 43 (table_names_select -> NAME table_names_select_p .)
    SEMICOLON       reduce using rule 43 (table_names_select -> NAME table_names_select_p .)


state 221

    (44) table_names_select_p -> COMMA . NAME table_names_select_p

    NAME            shift and go to state 257


state 222

    (41) select_statement -> SELECT columns FROM table_names_select WHERE . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 258
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 223

    (50) columns -> columns COMMA column POINT . column
    (53) column -> . TIMES
    (54) column -> . NAME
    (55) column -> . case_statement
    (56) column -> . call_function_statement
    (57) column -> . if_statement NAME
    (85) case_statement -> . CASE when_statements END NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    TIMES           shift and go to state 76
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    CAS             shift and go to state 31
    IF              shift and go to state 34
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    column                         shift and go to state 259
    case_statement                 shift and go to state 77
    call_function_statement        shift and go to state 78
    if_statement                   shift and go to state 79
    function_name_prod             shift and go to state 30

state 224

    (85) case_statement -> CASE when_statements END NAME .

    POINT           reduce using rule 85 (case_statement -> CASE when_statements END NAME .)
    FROM            reduce using rule 85 (case_statement -> CASE when_statements END NAME .)
    COMMA           reduce using rule 85 (case_statement -> CASE when_statements END NAME .)


state 225

    (86) when_statements -> WHEN a THEN . a when_statements
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 260
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 226

    (87) when_statements -> ELSE THEN a .
    (94) a -> a . OR b

    END             reduce using rule 87 (when_statements -> ELSE THEN a .)
    OR              shift and go to state 133


state 227

    (48) column_names -> NAME .

    R_PAREN         reduce using rule 48 (column_names -> NAME .)
    COMMA           reduce using rule 48 (column_names -> NAME .)


state 228

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names . R_PAREN VALUES L_PAREN vals R_PAREN
    (47) column_names -> column_names . COMMA NAME

    R_PAREN         shift and go to state 261
    COMMA           shift and go to state 262


state 229

    (58) vals -> vals COMMA a .
    (94) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 58 (vals -> vals COMMA a .)
    COMMA           reduce using rule 58 (vals -> vals COMMA a .)
    EQUALS          reduce using rule 58 (vals -> vals COMMA a .)
    NOT_EQ          reduce using rule 58 (vals -> vals COMMA a .)
    LESS_THAN       reduce using rule 58 (vals -> vals COMMA a .)
    GREATER_THAN    reduce using rule 58 (vals -> vals COMMA a .)
    LESS_EQ         reduce using rule 58 (vals -> vals COMMA a .)
    GREATER_EQ      reduce using rule 58 (vals -> vals COMMA a .)
    AND             reduce using rule 58 (vals -> vals COMMA a .)
    SEMICOLON       reduce using rule 58 (vals -> vals COMMA a .)
    THEN            reduce using rule 58 (vals -> vals COMMA a .)
    BEGIN           reduce using rule 58 (vals -> vals COMMA a .)
    AS              reduce using rule 58 (vals -> vals COMMA a .)
    TIMES           reduce using rule 58 (vals -> vals COMMA a .)
    DIVIDE          reduce using rule 58 (vals -> vals COMMA a .)
    PLUS            reduce using rule 58 (vals -> vals COMMA a .)
    MINUS           reduce using rule 58 (vals -> vals COMMA a .)
    END             reduce using rule 58 (vals -> vals COMMA a .)
    WHEN            reduce using rule 58 (vals -> vals COMMA a .)
    ELSE            reduce using rule 58 (vals -> vals COMMA a .)
    WHERE           reduce using rule 58 (vals -> vals COMMA a .)
    OR              shift and go to state 133

  ! OR              [ reduce using rule 58 (vals -> vals COMMA a .) ]


state 230

    (126) call_function_statement -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 263


state 231

    (68) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type

    NAME            shift and go to state 264


state 232

    (69) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME

    NAME            shift and go to state 265


state 233

    (70) if_statement -> IF a THEN statements END . IF

    IF              shift and go to state 266


state 234

    (71) if_statement -> IF a THEN statements ELSE . statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 267
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 235

    (72) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN
    (94) a -> a . OR b

    COMMA           shift and go to state 268
    OR              shift and go to state 133


state 236

    (76) args -> args COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 269


state 237

    (77) args -> ID ASSIGN a .
    (94) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 77 (args -> ID ASSIGN a .)
    NOT_EQ          reduce using rule 77 (args -> ID ASSIGN a .)
    LESS_THAN       reduce using rule 77 (args -> ID ASSIGN a .)
    GREATER_THAN    reduce using rule 77 (args -> ID ASSIGN a .)
    LESS_EQ         reduce using rule 77 (args -> ID ASSIGN a .)
    GREATER_EQ      reduce using rule 77 (args -> ID ASSIGN a .)
    AND             reduce using rule 77 (args -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 77 (args -> ID ASSIGN a .)
    THEN            reduce using rule 77 (args -> ID ASSIGN a .)
    BEGIN           reduce using rule 77 (args -> ID ASSIGN a .)
    R_PAREN         reduce using rule 77 (args -> ID ASSIGN a .)
    COMMA           reduce using rule 77 (args -> ID ASSIGN a .)
    AS              reduce using rule 77 (args -> ID ASSIGN a .)
    TIMES           reduce using rule 77 (args -> ID ASSIGN a .)
    DIVIDE          reduce using rule 77 (args -> ID ASSIGN a .)
    PLUS            reduce using rule 77 (args -> ID ASSIGN a .)
    MINUS           reduce using rule 77 (args -> ID ASSIGN a .)
    END             reduce using rule 77 (args -> ID ASSIGN a .)
    WHEN            reduce using rule 77 (args -> ID ASSIGN a .)
    ELSE            reduce using rule 77 (args -> ID ASSIGN a .)
    WHERE           reduce using rule 77 (args -> ID ASSIGN a .)
    OR              shift and go to state 133

  ! OR              [ reduce using rule 77 (args -> ID ASSIGN a .) ]


state 238

    (81) column_assignments -> NAME ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 270
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 239

    (79) update_statement -> UPDATE NAME SET column_assignments WHERE . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 271
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 240

    (80) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 272


state 241

    (82) while_statement -> WHILE a BEGIN statements END .

    SEMICOLON       reduce using rule 82 (while_statement -> WHILE a BEGIN statements END .)


state 242

    (84) delete_statement -> DELETE FROM NAME WHERE a .
    (94) a -> a . OR b

    SEMICOLON       reduce using rule 84 (delete_statement -> DELETE FROM NAME WHERE a .)
    OR              shift and go to state 133


state 243

    (33) property -> NAME type . null_prod PRIMARY KEY
    (34) property -> NAME type . null_prod
    (35) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (36) null_prod -> . NOT NULL
    (37) null_prod -> . NULL
    (38) null_prod -> .

    NOT             shift and go to state 274
    NULL            shift and go to state 275
    PRIMARY         reduce using rule 38 (null_prod -> .)
    REFERENCE       reduce using rule 38 (null_prod -> .)
    R_PAREN         reduce using rule 38 (null_prod -> .)
    COMMA           reduce using rule 38 (null_prod -> .)

    null_prod                      shift and go to state 273

state 244

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .

    SEMICOLON       reduce using rule 30 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .)


state 245

    (31) properties -> properties COMMA . property
    (33) property -> . NAME type null_prod PRIMARY KEY
    (34) property -> . NAME type null_prod
    (35) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 208

    property                       shift and go to state 276

state 246

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 277


state 247

    (64) parameters -> parameters COMMA . ID AS type
    (65) parameters -> parameters COMMA . ID type

    ID              shift and go to state 278


state 248

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN . type AS BEGIN statements END
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 279

state 249

    (66) parameters -> ID type .

    R_PAREN         reduce using rule 66 (parameters -> ID type .)
    COMMA           reduce using rule 66 (parameters -> ID type .)


state 250

    (67) parameters -> ID AS . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 280

state 251

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END

    AS              shift and go to state 281


state 252

    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 282


state 253

    (92) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 92 (type -> NCHAR L_PAREN a R_PAREN .)


state 254

    (93) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 93 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 255

    (28) assignments -> assignments COMMA ID ASSIGN a .
    (94) a -> a . OR b

    COMMA           reduce using rule 28 (assignments -> assignments COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 28 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 133


state 256

    (40) select_statement -> SELECT columns FROM NAME WHERE a .
    (94) a -> a . OR b

    SEMICOLON       reduce using rule 40 (select_statement -> SELECT columns FROM NAME WHERE a .)
    OR              shift and go to state 133


state 257

    (44) table_names_select_p -> COMMA NAME . table_names_select_p
    (44) table_names_select_p -> . COMMA NAME table_names_select_p
    (45) table_names_select_p -> .

    COMMA           shift and go to state 221
    WHERE           reduce using rule 45 (table_names_select_p -> .)
    SEMICOLON       reduce using rule 45 (table_names_select_p -> .)

    table_names_select_p           shift and go to state 283

state 258

    (41) select_statement -> SELECT columns FROM table_names_select WHERE a .
    (94) a -> a . OR b

    SEMICOLON       reduce using rule 41 (select_statement -> SELECT columns FROM table_names_select WHERE a .)
    OR              shift and go to state 133


state 259

    (50) columns -> columns COMMA column POINT column .

    FROM            reduce using rule 50 (columns -> columns COMMA column POINT column .)
    COMMA           reduce using rule 50 (columns -> columns COMMA column POINT column .)


state 260

    (86) when_statements -> WHEN a THEN a . when_statements
    (94) a -> a . OR b
    (86) when_statements -> . WHEN a THEN a when_statements
    (87) when_statements -> . ELSE THEN a

    OR              shift and go to state 133
    WHEN            shift and go to state 130
    ELSE            shift and go to state 131

    when_statements                shift and go to state 284

state 261

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN . VALUES L_PAREN vals R_PAREN

    VALUES          shift and go to state 285


state 262

    (47) column_names -> column_names COMMA . NAME

    NAME            shift and go to state 286


state 263

    (126) call_function_statement -> CAS L_PAREN a AS type R_PAREN .

    SEMICOLON       reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    POINT           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    FROM            reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    TIMES           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    DIVIDE          reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    PLUS            reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    MINUS           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    EQUALS          reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    NOT_EQ          reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_THAN       reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_THAN    reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_EQ         reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_EQ      reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AND             reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    OR              reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    THEN            reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    BEGIN           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AS              reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    END             reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    WHEN            reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    ELSE            reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    WHERE           reduce using rule 126 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)


state 264

    (68) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 287

state 265

    (69) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .

    SEMICOLON       reduce using rule 69 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .)


state 266

    (70) if_statement -> IF a THEN statements END IF .

    SEMICOLON       reduce using rule 70 (if_statement -> IF a THEN statements END IF .)
    NAME            reduce using rule 70 (if_statement -> IF a THEN statements END IF .)


state 267

    (71) if_statement -> IF a THEN statements ELSE statements . END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 288
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 268

    (72) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 289
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 269

    (76) args -> args COMMA ID ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 290
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 270

    (81) column_assignments -> NAME ASSIGN a .
    (94) a -> a . OR b

    WHERE           reduce using rule 81 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 81 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 133


state 271

    (79) update_statement -> UPDATE NAME SET column_assignments WHERE a .
    (94) a -> a . OR b

    SEMICOLON       reduce using rule 79 (update_statement -> UPDATE NAME SET column_assignments WHERE a .)
    OR              shift and go to state 133


state 272

    (80) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 291


state 273

    (33) property -> NAME type null_prod . PRIMARY KEY
    (34) property -> NAME type null_prod .
    (35) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 292
    R_PAREN         reduce using rule 34 (property -> NAME type null_prod .)
    COMMA           reduce using rule 34 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 293


state 274

    (36) null_prod -> NOT . NULL

    NULL            shift and go to state 294


state 275

    (37) null_prod -> NULL .

    PRIMARY         reduce using rule 37 (null_prod -> NULL .)
    REFERENCE       reduce using rule 37 (null_prod -> NULL .)
    R_PAREN         reduce using rule 37 (null_prod -> NULL .)
    COMMA           reduce using rule 37 (null_prod -> NULL .)


state 276

    (31) properties -> properties COMMA property .

    R_PAREN         reduce using rule 31 (properties -> properties COMMA property .)
    COMMA           reduce using rule 31 (properties -> properties COMMA property .)


state 277

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 295

state 278

    (64) parameters -> parameters COMMA ID . AS type
    (65) parameters -> parameters COMMA ID . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 296
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 297

state 279

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 298


state 280

    (67) parameters -> ID AS type .

    R_PAREN         reduce using rule 67 (parameters -> ID AS type .)
    COMMA           reduce using rule 67 (parameters -> ID AS type .)


state 281

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 299


state 282

    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 300
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 283

    (44) table_names_select_p -> COMMA NAME table_names_select_p .

    WHERE           reduce using rule 44 (table_names_select_p -> COMMA NAME table_names_select_p .)
    SEMICOLON       reduce using rule 44 (table_names_select_p -> COMMA NAME table_names_select_p .)


state 284

    (86) when_statements -> WHEN a THEN a when_statements .

    END             reduce using rule 86 (when_statements -> WHEN a THEN a when_statements .)


state 285

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES . L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 301


state 286

    (47) column_names -> column_names COMMA NAME .

    R_PAREN         reduce using rule 47 (column_names -> column_names COMMA NAME .)
    COMMA           reduce using rule 47 (column_names -> column_names COMMA NAME .)


state 287

    (68) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .

    SEMICOLON       reduce using rule 68 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .)


state 288

    (71) if_statement -> IF a THEN statements ELSE statements END . IF

    IF              shift and go to state 302


state 289

    (72) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN
    (94) a -> a . OR b

    R_PAREN         shift and go to state 303
    OR              shift and go to state 133


state 290

    (76) args -> args COMMA ID ASSIGN a .
    (94) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    NOT_EQ          reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    LESS_THAN       reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    GREATER_THAN    reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    LESS_EQ         reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    GREATER_EQ      reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    AND             reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    THEN            reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    BEGIN           reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    R_PAREN         reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    COMMA           reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    AS              reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    TIMES           reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    DIVIDE          reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    PLUS            reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    MINUS           reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    END             reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    WHEN            reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    ELSE            reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    WHERE           reduce using rule 76 (args -> args COMMA ID ASSIGN a .)
    OR              shift and go to state 133

  ! OR              [ reduce using rule 76 (args -> args COMMA ID ASSIGN a .) ]


state 291

    (80) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 304
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 292

    (33) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 305


state 293

    (35) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 306


state 294

    (36) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 36 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 36 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 36 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 36 (null_prod -> NOT NULL .)


state 295

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 307


state 296

    (64) parameters -> parameters COMMA ID AS . type
    (88) type -> . INT
    (89) type -> . DECIMAL
    (90) type -> . DATE
    (91) type -> . DATETIME
    (92) type -> . NCHAR L_PAREN a R_PAREN
    (93) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 308

state 297

    (65) parameters -> parameters COMMA ID type .

    R_PAREN         reduce using rule 65 (parameters -> parameters COMMA ID type .)
    COMMA           reduce using rule 65 (parameters -> parameters COMMA ID type .)


state 298

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 309


state 299

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 310
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 300

    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 311
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 301

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN . vals R_PAREN
    (58) vals -> . vals COMMA a
    (59) vals -> . a
    (94) a -> . a OR b
    (95) a -> . b
    (96) b -> . b AND c
    (97) b -> . c
    (98) c -> . NOT_SIGN d
    (99) c -> . d
    (100) d -> . d EQUALS e
    (101) d -> . d NOT_EQ e
    (102) d -> . d LESS_THAN e
    (103) d -> . d GREATER_THAN e
    (104) d -> . d LESS_EQ e
    (105) d -> . d GREATER_EQ e
    (106) d -> . e
    (107) e -> . e PLUS f
    (108) e -> . e MINUS f
    (109) e -> . f
    (110) f -> . f TIMES g
    (111) f -> . f DIVIDE g
    (112) f -> . g
    (113) g -> . MINUS h
    (114) g -> . h
    (115) h -> . INTEGER_VALUE
    (116) h -> . DECIMAL_VALUE
    (117) h -> . STRING
    (118) h -> . ID
    (119) h -> . NAME
    (120) h -> . L_PAREN a R_PAREN
    (121) h -> . exec_statement
    (122) h -> . call_function_statement
    (123) h -> . NAME POINT NAME
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 85
    MINUS           shift and go to state 89
    INTEGER_VALUE   shift and go to state 92
    DECIMAL_VALUE   shift and go to state 93
    STRING          shift and go to state 94
    ID              shift and go to state 95
    NAME            shift and go to state 96
    L_PAREN         shift and go to state 97
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    vals                           shift and go to state 312
    a                              shift and go to state 151
    b                              shift and go to state 83
    c                              shift and go to state 84
    d                              shift and go to state 86
    e                              shift and go to state 87
    f                              shift and go to state 88
    g                              shift and go to state 90
    h                              shift and go to state 91
    exec_statement                 shift and go to state 98
    call_function_statement        shift and go to state 99
    function_name_prod             shift and go to state 30

state 302

    (71) if_statement -> IF a THEN statements ELSE statements END IF .

    SEMICOLON       reduce using rule 71 (if_statement -> IF a THEN statements ELSE statements END IF .)
    NAME            reduce using rule 71 (if_statement -> IF a THEN statements ELSE statements END IF .)


state 303

    (72) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .

    SEMICOLON       reduce using rule 72 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)
    NAME            reduce using rule 72 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)


state 304

    (80) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (94) a -> a . OR b

    WHERE           reduce using rule 80 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 80 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 133


state 305

    (33) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 33 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod PRIMARY KEY .)


state 306

    (35) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 313


state 307

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 314


state 308

    (64) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 64 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 64 (parameters -> parameters COMMA ID AS type .)


state 309

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 315
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 310

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 316
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 311

    (63) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 63 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .)


state 312

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals . R_PAREN
    (58) vals -> vals . COMMA a

    R_PAREN         shift and go to state 317
    COMMA           shift and go to state 196


state 313

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 318


state 314

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 319
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 315

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 320
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 316

    (62) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 62 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .)


state 317

    (46) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 46 (insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .)


state 318

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 321


state 319

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) select_statement -> . SELECT columns FROM table_names_select WHERE a
    (42) select_statement -> . SELECT columns FROM table_names_select
    (46) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (60) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (61) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (62) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (63) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (124) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (125) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (126) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (68) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (69) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (70) if_statement -> . IF a THEN statements END IF
    (71) if_statement -> . IF a THEN statements ELSE statements END IF
    (72) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (73) exec_statement -> . EXEC NAME vals
    (74) exec_statement -> . EXEC NAME args
    (75) exec_statement -> . EXEC NAME
    (78) drop_table_statement -> . DROP TABLE NAME
    (79) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (82) while_statement -> . WHILE a BEGIN statements END
    (83) truncate_statement -> . TRUNCATE TABLE NAME
    (132) return_statement -> . RETURN a
    (84) delete_statement -> . DELETE FROM NAME WHERE a
    (127) function_name_prod -> . HOY
    (128) function_name_prod -> . CONCATENA
    (129) function_name_prod -> . SUBSTRAER
    (130) function_name_prod -> . CONTAR
    (131) function_name_prod -> . SUMA

    END             shift and go to state 322
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 320

    (61) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 61 (create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .)


state 321

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 35 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 35 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 322

    (60) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 60 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 158 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 181 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 183 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 189 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 189 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 229 resolved as shift
WARNING: shift/reduce conflict for OR in state 237 resolved as shift
WARNING: shift/reduce conflict for OR in state 290 resolved as shift
WARNING: reduce/reduce conflict in state 173 resolved using rule (select_statement -> SELECT columns FROM NAME)
WARNING: rejected rule (table_names_select_p -> <empty>) in state 173
