Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> create_database_statement SEMICOLON
Rule 5     statement -> use_statement SEMICOLON
Rule 6     statement -> declare_statement SEMICOLON
Rule 7     statement -> set_statement SEMICOLON
Rule 8     statement -> create_table_statement SEMICOLON
Rule 9     statement -> select_statement SEMICOLON
Rule 10    statement -> insert_statement SEMICOLON
Rule 11    statement -> create_function_statement SEMICOLON
Rule 12    statement -> create_procedure_statement SEMICOLON
Rule 13    statement -> call_function_statement SEMICOLON
Rule 14    statement -> alter_table_statement SEMICOLON
Rule 15    statement -> if_statement SEMICOLON
Rule 16    statement -> exec_statement SEMICOLON
Rule 17    statement -> drop_table_statement SEMICOLON
Rule 18    statement -> update_statement SEMICOLON
Rule 19    statement -> while_statement SEMICOLON
Rule 20    statement -> truncate_statement SEMICOLON
Rule 21    statement -> return_statement SEMICOLON
Rule 22    statement -> delete_statement SEMICOLON
Rule 23    create_database_statement -> CREATE DATA BASE NAME
Rule 24    use_statement -> USE NAME
Rule 25    declare_statement -> DECLARE ID AS type
Rule 26    declare_statement -> DECLARE ID type
Rule 27    set_statement -> SET assignments
Rule 28    assignments -> assignments COMMA ID ASSIGN a
Rule 29    assignments -> ID ASSIGN a
Rule 30    create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN
Rule 31    properties -> properties COMMA property
Rule 32    properties -> property
Rule 33    property -> NAME type null_prod PRIMARY KEY
Rule 34    property -> NAME type null_prod
Rule 35    property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
Rule 36    null_prod -> NOT NULL
Rule 37    null_prod -> NULL
Rule 38    null_prod -> <empty>
Rule 39    select_statement -> SELECT columns FROM NAME
Rule 40    select_statement -> SELECT columns FROM NAME WHERE a
Rule 41    insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
Rule 42    column_names -> column_names COMMA NAME
Rule 43    column_names -> NAME
Rule 44    columns -> columns COMMA column
Rule 45    columns -> column
Rule 46    column -> TIMES
Rule 47    column -> NAME
Rule 48    column -> NAME DOT NAME
Rule 49    column -> case_statement NAME
Rule 50    column -> a NAME
Rule 51    column -> if_statement NAME
Rule 52    vals -> vals COMMA a
Rule 53    vals -> a
Rule 54    create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
Rule 55    create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
Rule 56    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
Rule 57    create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
Rule 58    parameters -> parameters COMMA ID AS type
Rule 59    parameters -> parameters COMMA ID type
Rule 60    parameters -> ID type
Rule 61    parameters -> ID AS type
Rule 62    alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type
Rule 63    alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME
Rule 64    if_statement -> IF a THEN statements END IF
Rule 65    if_statement -> IF a THEN statements ELSE statements END IF
Rule 66    if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN
Rule 67    exec_statement -> EXEC NAME vals
Rule 68    exec_statement -> EXEC NAME args
Rule 69    exec_statement -> EXEC NAME
Rule 70    args -> args COMMA ID ASSIGN a
Rule 71    args -> ID ASSIGN a
Rule 72    drop_table_statement -> DROP TABLE NAME
Rule 73    update_statement -> UPDATE NAME SET column_assignments WHERE a
Rule 74    column_assignments -> column_assignments COMMA NAME ASSIGN a
Rule 75    column_assignments -> NAME ASSIGN a
Rule 76    while_statement -> WHILE a BEGIN statements END
Rule 77    truncate_statement -> TRUNCATE TABLE NAME
Rule 78    delete_statement -> DELETE FROM NAME WHERE a
Rule 79    case_statement -> CASE when_statements END NAME
Rule 80    when_statements -> WHEN a THEN a when_statements
Rule 81    when_statements -> ELSE THEN a
Rule 82    type -> INT
Rule 83    type -> DECIMAL
Rule 84    type -> DATE
Rule 85    type -> DATETIME
Rule 86    type -> NCHAR L_PAREN a R_PAREN
Rule 87    type -> NVARCHAR L_PAREN a R_PAREN
Rule 88    a -> a OR b
Rule 89    a -> b
Rule 90    b -> b AND c
Rule 91    b -> c
Rule 92    c -> NOT_SIGN d
Rule 93    c -> d
Rule 94    d -> d EQUALS e
Rule 95    d -> d NOT_EQ e
Rule 96    d -> d LESS_THAN e
Rule 97    d -> d GREATER_THAN e
Rule 98    d -> d LESS_EQ e
Rule 99    d -> d GREATER_EQ e
Rule 100   d -> e
Rule 101   e -> e PLUS f
Rule 102   e -> e MINUS f
Rule 103   e -> f
Rule 104   f -> f TIMES g
Rule 105   f -> f DIVIDE g
Rule 106   f -> g
Rule 107   g -> MINUS h
Rule 108   g -> h
Rule 109   h -> INTEGER_VALUE
Rule 110   h -> DECIMAL_VALUE
Rule 111   h -> STRING
Rule 112   h -> ID
Rule 113   h -> NAME
Rule 114   h -> L_PAREN a R_PAREN
Rule 115   h -> exec_statement
Rule 116   h -> call_function_statement
Rule 117   call_function_statement -> function_name_prod L_PAREN vals R_PAREN
Rule 118   call_function_statement -> function_name_prod L_PAREN R_PAREN
Rule 119   call_function_statement -> CAS L_PAREN a AS type R_PAREN
Rule 120   function_name_prod -> HOY
Rule 121   function_name_prod -> CONCATENA
Rule 122   function_name_prod -> SUBSTRAER
Rule 123   function_name_prod -> CONTAR
Rule 124   function_name_prod -> SUMA
Rule 125   return_statement -> RETURN a

Terminals, with rules where they appear

ADD                  : 62
ALTER                : 62 63
AND                  : 90
AS                   : 25 54 55 56 57 58 61 119
ASSIGN               : 28 29 70 71 74 75
BASE                 : 23
BEGIN                : 54 55 56 57 76
CAS                  : 119
CASE                 : 79
COLUMN               : 62 63
COMMA                : 28 31 42 44 52 58 59 66 66 70 74
CONCATENA            : 121
CONTAR               : 123
CREATE               : 23 30 54 55 56 57
DATA                 : 23
DATE                 : 84
DATETIME             : 85
DECIMAL              : 83
DECIMAL_VALUE        : 110
DECLARE              : 25 26
DELETE               : 78
DIVIDE               : 105
DOT                  : 48
DROP                 : 63 72
ELSE                 : 65 81
END                  : 54 55 56 57 64 65 76 79
EQUALS               : 94
EXEC                 : 67 68 69
FROM                 : 39 40 78
FUNCTION             : 54 55
GREATER_EQ           : 99
GREATER_THAN         : 97
HOY                  : 120
ID                   : 25 26 28 29 58 59 60 61 70 71 112
IF                   : 64 64 65 65 66
INSERT               : 41
INT                  : 82
INTEGER_VALUE        : 109
INTO                 : 41
KEY                  : 33
LESS_EQ              : 98
LESS_THAN            : 96
L_PAREN              : 30 35 41 41 54 55 56 57 66 86 87 114 117 118 119
MINUS                : 102 107
NAME                 : 23 24 30 33 34 35 35 35 39 40 41 42 43 47 48 48 49 50 51 54 55 56 57 62 62 63 63 67 68 69 72 73 74 75 77 78 79 113
NCHAR                : 86
NOT                  : 36
NOT_EQ               : 95
NOT_SIGN             : 92
NULL                 : 36 37
NVARCHAR             : 87
OR                   : 88
PLUS                 : 101
PRIMARY              : 33
PROCEDURE            : 56 57
REFERENCE            : 35
RETURN               : 54 55 125
R_PAREN              : 30 35 41 41 54 55 56 57 66 86 87 114 117 118 119
SELECT               : 39 40
SEMICOLON            : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
SET                  : 27 73
STRING               : 111
SUBSTRAER            : 122
SUMA                 : 124
TABLE                : 30 62 63 72 77
THEN                 : 64 65 80 81
TIMES                : 46 104
TRUNCATE             : 77
UPDATE               : 73
USE                  : 24
VALUES               : 41
WHEN                 : 80
WHERE                : 40 73 78
WHILE                : 76
error                : 

Nonterminals, with rules where they appear

a                    : 28 29 40 50 52 53 64 65 66 66 66 70 71 73 74 75 76 78 80 80 81 86 87 88 114 119 125
alter_table_statement : 14
args                 : 68 70
assignments          : 27 28
b                    : 88 89 90
c                    : 90 91
call_function_statement : 13 116
case_statement       : 49
column               : 44 45
column_assignments   : 73 74
column_names         : 41 42
columns              : 39 40 44
create_database_statement : 4
create_function_statement : 11
create_procedure_statement : 12
create_table_statement : 8
d                    : 92 93 94 95 96 97 98 99
declare_statement    : 6
delete_statement     : 22
drop_table_statement : 17
e                    : 94 95 96 97 98 99 100 101 102
exec_statement       : 16 115
f                    : 101 102 103 104 105
function_name_prod   : 117 118
g                    : 104 105 106
h                    : 107 108
if_statement         : 15 51
init                 : 0
insert_statement     : 10
null_prod            : 33 34 35
parameters           : 54 56 58 59
properties           : 30 31
property             : 31 32
return_statement     : 21
select_statement     : 9
set_statement        : 7
statement            : 2 3
statements           : 1 2 54 55 56 57 64 65 65 76
truncate_statement   : 20
type                 : 25 26 33 34 35 54 55 58 59 60 61 62 119
update_statement     : 18
use_statement        : 5
vals                 : 41 52 67 117
when_statements      : 79 80
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    $end            reduce using rule 1 (init -> statements .)
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 3

    (3) statements -> statement .

    CREATE          reduce using rule 3 (statements -> statement .)
    USE             reduce using rule 3 (statements -> statement .)
    DECLARE         reduce using rule 3 (statements -> statement .)
    SET             reduce using rule 3 (statements -> statement .)
    SELECT          reduce using rule 3 (statements -> statement .)
    INSERT          reduce using rule 3 (statements -> statement .)
    CAS             reduce using rule 3 (statements -> statement .)
    ALTER           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    EXEC            reduce using rule 3 (statements -> statement .)
    DROP            reduce using rule 3 (statements -> statement .)
    UPDATE          reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    TRUNCATE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    DELETE          reduce using rule 3 (statements -> statement .)
    HOY             reduce using rule 3 (statements -> statement .)
    CONCATENA       reduce using rule 3 (statements -> statement .)
    SUBSTRAER       reduce using rule 3 (statements -> statement .)
    CONTAR          reduce using rule 3 (statements -> statement .)
    SUMA            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> create_database_statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 5

    (5) statement -> use_statement . SEMICOLON

    SEMICOLON       shift and go to state 47


state 6

    (6) statement -> declare_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 7

    (7) statement -> set_statement . SEMICOLON

    SEMICOLON       shift and go to state 49


state 8

    (8) statement -> create_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 9

    (9) statement -> select_statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 10

    (10) statement -> insert_statement . SEMICOLON

    SEMICOLON       shift and go to state 52


state 11

    (11) statement -> create_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 53


state 12

    (12) statement -> create_procedure_statement . SEMICOLON

    SEMICOLON       shift and go to state 54


state 13

    (13) statement -> call_function_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 14

    (14) statement -> alter_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 56


state 15

    (15) statement -> if_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 16

    (16) statement -> exec_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 17

    (17) statement -> drop_table_statement . SEMICOLON

    SEMICOLON       shift and go to state 59


state 18

    (18) statement -> update_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 19

    (19) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 20

    (20) statement -> truncate_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 21

    (21) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 63


state 22

    (22) statement -> delete_statement . SEMICOLON

    SEMICOLON       shift and go to state 64


state 23

    (23) create_database_statement -> CREATE . DATA BASE NAME
    (30) create_table_statement -> CREATE . TABLE NAME L_PAREN properties R_PAREN
    (54) create_function_statement -> CREATE . FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> CREATE . FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> CREATE . PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END

    DATA            shift and go to state 65
    TABLE           shift and go to state 66
    FUNCTION        shift and go to state 67
    PROCEDURE       shift and go to state 68


state 24

    (24) use_statement -> USE . NAME

    NAME            shift and go to state 69


state 25

    (25) declare_statement -> DECLARE . ID AS type
    (26) declare_statement -> DECLARE . ID type

    ID              shift and go to state 70


state 26

    (27) set_statement -> SET . assignments
    (28) assignments -> . assignments COMMA ID ASSIGN a
    (29) assignments -> . ID ASSIGN a

    ID              shift and go to state 72

    assignments                    shift and go to state 71

state 27

    (39) select_statement -> SELECT . columns FROM NAME
    (40) select_statement -> SELECT . columns FROM NAME WHERE a
    (44) columns -> . columns COMMA column
    (45) columns -> . column
    (46) column -> . TIMES
    (47) column -> . NAME
    (48) column -> . NAME DOT NAME
    (49) column -> . case_statement NAME
    (50) column -> . a NAME
    (51) column -> . if_statement NAME
    (79) case_statement -> . CASE when_statements END NAME
    (88) a -> . a OR b
    (89) a -> . b
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    TIMES           shift and go to state 77
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    IF              shift and go to state 34
    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    columns                        shift and go to state 73
    a                              shift and go to state 75
    column                         shift and go to state 76
    case_statement                 shift and go to state 78
    if_statement                   shift and go to state 79
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 28

    (41) insert_statement -> INSERT . INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    INTO            shift and go to state 97


state 29

    (125) return_statement -> RETURN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 98
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 30

    (117) call_function_statement -> function_name_prod . L_PAREN vals R_PAREN
    (118) call_function_statement -> function_name_prod . L_PAREN R_PAREN

    L_PAREN         shift and go to state 100


state 31

    (119) call_function_statement -> CAS . L_PAREN a AS type R_PAREN

    L_PAREN         shift and go to state 101


state 32

    (62) alter_table_statement -> ALTER . TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> ALTER . TABLE NAME DROP COLUMN NAME

    TABLE           shift and go to state 102


state 33

    (72) drop_table_statement -> DROP . TABLE NAME

    TABLE           shift and go to state 103


state 34

    (64) if_statement -> IF . a THEN statements END IF
    (65) if_statement -> IF . a THEN statements ELSE statements END IF
    (66) if_statement -> IF . L_PAREN a COMMA a COMMA a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    L_PAREN         shift and go to state 105
    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 104
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 35

    (67) exec_statement -> EXEC . NAME vals
    (68) exec_statement -> EXEC . NAME args
    (69) exec_statement -> EXEC . NAME

    NAME            shift and go to state 106


state 36

    (73) update_statement -> UPDATE . NAME SET column_assignments WHERE a

    NAME            shift and go to state 107


state 37

    (76) while_statement -> WHILE . a BEGIN statements END
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 108
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 38

    (77) truncate_statement -> TRUNCATE . TABLE NAME

    TABLE           shift and go to state 109


state 39

    (78) delete_statement -> DELETE . FROM NAME WHERE a

    FROM            shift and go to state 110


state 40

    (120) function_name_prod -> HOY .

    L_PAREN         reduce using rule 120 (function_name_prod -> HOY .)


state 41

    (121) function_name_prod -> CONCATENA .

    L_PAREN         reduce using rule 121 (function_name_prod -> CONCATENA .)


state 42

    (122) function_name_prod -> SUBSTRAER .

    L_PAREN         reduce using rule 122 (function_name_prod -> SUBSTRAER .)


state 43

    (123) function_name_prod -> CONTAR .

    L_PAREN         reduce using rule 123 (function_name_prod -> CONTAR .)


state 44

    (124) function_name_prod -> SUMA .

    L_PAREN         reduce using rule 124 (function_name_prod -> SUMA .)


state 45

    (2) statements -> statements statement .

    CREATE          reduce using rule 2 (statements -> statements statement .)
    USE             reduce using rule 2 (statements -> statements statement .)
    DECLARE         reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    SELECT          reduce using rule 2 (statements -> statements statement .)
    INSERT          reduce using rule 2 (statements -> statements statement .)
    CAS             reduce using rule 2 (statements -> statements statement .)
    ALTER           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    EXEC            reduce using rule 2 (statements -> statements statement .)
    DROP            reduce using rule 2 (statements -> statements statement .)
    UPDATE          reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    TRUNCATE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    HOY             reduce using rule 2 (statements -> statements statement .)
    CONCATENA       reduce using rule 2 (statements -> statements statement .)
    SUBSTRAER       reduce using rule 2 (statements -> statements statement .)
    CONTAR          reduce using rule 2 (statements -> statements statement .)
    SUMA            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 46

    (4) statement -> create_database_statement SEMICOLON .

    CREATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    USE             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DECLARE         reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SET             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SELECT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    INSERT          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CAS             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ALTER           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    IF              reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    EXEC            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DROP            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    UPDATE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    TRUNCATE        reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    DELETE          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    HOY             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONCATENA       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    CONTAR          reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    SUMA            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    END             reduce using rule 4 (statement -> create_database_statement SEMICOLON .)
    ELSE            reduce using rule 4 (statement -> create_database_statement SEMICOLON .)


state 47

    (5) statement -> use_statement SEMICOLON .

    CREATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    USE             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DECLARE         reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SET             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SELECT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    INSERT          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CAS             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ALTER           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    IF              reduce using rule 5 (statement -> use_statement SEMICOLON .)
    EXEC            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DROP            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    UPDATE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> use_statement SEMICOLON .)
    TRUNCATE        reduce using rule 5 (statement -> use_statement SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    DELETE          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    HOY             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONCATENA       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 5 (statement -> use_statement SEMICOLON .)
    CONTAR          reduce using rule 5 (statement -> use_statement SEMICOLON .)
    SUMA            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    $end            reduce using rule 5 (statement -> use_statement SEMICOLON .)
    END             reduce using rule 5 (statement -> use_statement SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> use_statement SEMICOLON .)


state 48

    (6) statement -> declare_statement SEMICOLON .

    CREATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    USE             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DECLARE         reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SET             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SELECT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    INSERT          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CAS             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ALTER           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    IF              reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    EXEC            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DROP            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    UPDATE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    TRUNCATE        reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    DELETE          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    HOY             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONCATENA       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    CONTAR          reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    SUMA            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    $end            reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    END             reduce using rule 6 (statement -> declare_statement SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declare_statement SEMICOLON .)


state 49

    (7) statement -> set_statement SEMICOLON .

    CREATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    USE             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DECLARE         reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SET             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SELECT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    INSERT          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CAS             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    IF              reduce using rule 7 (statement -> set_statement SEMICOLON .)
    EXEC            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DROP            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    UPDATE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> set_statement SEMICOLON .)
    TRUNCATE        reduce using rule 7 (statement -> set_statement SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    DELETE          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    HOY             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONCATENA       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 7 (statement -> set_statement SEMICOLON .)
    CONTAR          reduce using rule 7 (statement -> set_statement SEMICOLON .)
    SUMA            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    $end            reduce using rule 7 (statement -> set_statement SEMICOLON .)
    END             reduce using rule 7 (statement -> set_statement SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> set_statement SEMICOLON .)


state 50

    (8) statement -> create_table_statement SEMICOLON .

    CREATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    USE             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DECLARE         reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SET             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SELECT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    INSERT          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CAS             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    IF              reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    EXEC            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DROP            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    UPDATE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    DELETE          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    HOY             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    CONTAR          reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    SUMA            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    $end            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    END             reduce using rule 8 (statement -> create_table_statement SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> create_table_statement SEMICOLON .)


state 51

    (9) statement -> select_statement SEMICOLON .

    CREATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    USE             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DECLARE         reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SET             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SELECT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    INSERT          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CAS             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    IF              reduce using rule 9 (statement -> select_statement SEMICOLON .)
    EXEC            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DROP            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    UPDATE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> select_statement SEMICOLON .)
    TRUNCATE        reduce using rule 9 (statement -> select_statement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    DELETE          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    HOY             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONCATENA       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 9 (statement -> select_statement SEMICOLON .)
    CONTAR          reduce using rule 9 (statement -> select_statement SEMICOLON .)
    SUMA            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    $end            reduce using rule 9 (statement -> select_statement SEMICOLON .)
    END             reduce using rule 9 (statement -> select_statement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> select_statement SEMICOLON .)


state 52

    (10) statement -> insert_statement SEMICOLON .

    CREATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    USE             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DECLARE         reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SET             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SELECT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    INSERT          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CAS             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    IF              reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    EXEC            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DROP            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    UPDATE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    TRUNCATE        reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    DELETE          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    HOY             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONCATENA       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    CONTAR          reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    SUMA            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    $end            reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    END             reduce using rule 10 (statement -> insert_statement SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> insert_statement SEMICOLON .)


state 53

    (11) statement -> create_function_statement SEMICOLON .

    CREATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    USE             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DECLARE         reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SET             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SELECT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    INSERT          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CAS             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    IF              reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    EXEC            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DROP            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    UPDATE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    DELETE          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    HOY             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    CONTAR          reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    SUMA            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    $end            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    END             reduce using rule 11 (statement -> create_function_statement SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> create_function_statement SEMICOLON .)


state 54

    (12) statement -> create_procedure_statement SEMICOLON .

    CREATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    USE             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DECLARE         reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SET             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SELECT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    INSERT          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CAS             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    IF              reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    EXEC            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DROP            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    UPDATE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    TRUNCATE        reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    DELETE          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    HOY             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONCATENA       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    CONTAR          reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    SUMA            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    $end            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    END             reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> create_procedure_statement SEMICOLON .)


state 55

    (13) statement -> call_function_statement SEMICOLON .

    CREATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    USE             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DECLARE         reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SET             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SELECT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    INSERT          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CAS             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    IF              reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    EXEC            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DROP            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    UPDATE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    TRUNCATE        reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    DELETE          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    HOY             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONCATENA       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    CONTAR          reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    SUMA            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    $end            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    END             reduce using rule 13 (statement -> call_function_statement SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> call_function_statement SEMICOLON .)


state 56

    (14) statement -> alter_table_statement SEMICOLON .

    CREATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    USE             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DECLARE         reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SET             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SELECT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    INSERT          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CAS             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    EXEC            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DROP            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    UPDATE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    DELETE          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    HOY             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    CONTAR          reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    SUMA            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    END             reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> alter_table_statement SEMICOLON .)


state 57

    (15) statement -> if_statement SEMICOLON .

    CREATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    USE             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DECLARE         reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SET             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SELECT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    INSERT          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CAS             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> if_statement SEMICOLON .)
    EXEC            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DROP            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    UPDATE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> if_statement SEMICOLON .)
    TRUNCATE        reduce using rule 15 (statement -> if_statement SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    DELETE          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    HOY             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONCATENA       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 15 (statement -> if_statement SEMICOLON .)
    CONTAR          reduce using rule 15 (statement -> if_statement SEMICOLON .)
    SUMA            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> if_statement SEMICOLON .)
    END             reduce using rule 15 (statement -> if_statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> if_statement SEMICOLON .)


state 58

    (16) statement -> exec_statement SEMICOLON .

    CREATE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    USE             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DECLARE         reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SET             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SELECT          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    INSERT          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CAS             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    IF              reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    EXEC            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DROP            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    UPDATE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    TRUNCATE        reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    DELETE          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    HOY             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CONCATENA       reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    CONTAR          reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    SUMA            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    $end            reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    END             reduce using rule 16 (statement -> exec_statement SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> exec_statement SEMICOLON .)


state 59

    (17) statement -> drop_table_statement SEMICOLON .

    CREATE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    USE             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DECLARE         reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SET             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SELECT          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    INSERT          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CAS             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    IF              reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    EXEC            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DROP            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    UPDATE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    TRUNCATE        reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    DELETE          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    HOY             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CONCATENA       reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    CONTAR          reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    SUMA            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    $end            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    END             reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> drop_table_statement SEMICOLON .)


state 60

    (18) statement -> update_statement SEMICOLON .

    CREATE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    USE             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DECLARE         reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SET             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SELECT          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    INSERT          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CAS             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> update_statement SEMICOLON .)
    IF              reduce using rule 18 (statement -> update_statement SEMICOLON .)
    EXEC            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DROP            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    UPDATE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> update_statement SEMICOLON .)
    TRUNCATE        reduce using rule 18 (statement -> update_statement SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    DELETE          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    HOY             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CONCATENA       reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 18 (statement -> update_statement SEMICOLON .)
    CONTAR          reduce using rule 18 (statement -> update_statement SEMICOLON .)
    SUMA            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    $end            reduce using rule 18 (statement -> update_statement SEMICOLON .)
    END             reduce using rule 18 (statement -> update_statement SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> update_statement SEMICOLON .)


state 61

    (19) statement -> while_statement SEMICOLON .

    CREATE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    USE             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DECLARE         reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SET             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SELECT          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    INSERT          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CAS             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> while_statement SEMICOLON .)
    IF              reduce using rule 19 (statement -> while_statement SEMICOLON .)
    EXEC            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DROP            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    UPDATE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> while_statement SEMICOLON .)
    TRUNCATE        reduce using rule 19 (statement -> while_statement SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    DELETE          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    HOY             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CONCATENA       reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 19 (statement -> while_statement SEMICOLON .)
    CONTAR          reduce using rule 19 (statement -> while_statement SEMICOLON .)
    SUMA            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    $end            reduce using rule 19 (statement -> while_statement SEMICOLON .)
    END             reduce using rule 19 (statement -> while_statement SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> while_statement SEMICOLON .)


state 62

    (20) statement -> truncate_statement SEMICOLON .

    CREATE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    USE             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DECLARE         reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SET             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SELECT          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    INSERT          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CAS             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    IF              reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    EXEC            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DROP            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    UPDATE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    TRUNCATE        reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    DELETE          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    HOY             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CONCATENA       reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    CONTAR          reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    SUMA            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    $end            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    END             reduce using rule 20 (statement -> truncate_statement SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> truncate_statement SEMICOLON .)


state 63

    (21) statement -> return_statement SEMICOLON .

    CREATE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    USE             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DECLARE         reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SET             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SELECT          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    INSERT          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CAS             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> return_statement SEMICOLON .)
    EXEC            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DROP            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    UPDATE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> return_statement SEMICOLON .)
    TRUNCATE        reduce using rule 21 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    DELETE          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    HOY             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CONCATENA       reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 21 (statement -> return_statement SEMICOLON .)
    CONTAR          reduce using rule 21 (statement -> return_statement SEMICOLON .)
    SUMA            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    $end            reduce using rule 21 (statement -> return_statement SEMICOLON .)
    END             reduce using rule 21 (statement -> return_statement SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> return_statement SEMICOLON .)


state 64

    (22) statement -> delete_statement SEMICOLON .

    CREATE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    USE             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DECLARE         reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SET             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SELECT          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    INSERT          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CAS             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    ALTER           reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    IF              reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    EXEC            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DROP            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    UPDATE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    TRUNCATE        reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    DELETE          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    HOY             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CONCATENA       reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SUBSTRAER       reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    CONTAR          reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    SUMA            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    $end            reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    END             reduce using rule 22 (statement -> delete_statement SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> delete_statement SEMICOLON .)


state 65

    (23) create_database_statement -> CREATE DATA . BASE NAME

    BASE            shift and go to state 111


state 66

    (30) create_table_statement -> CREATE TABLE . NAME L_PAREN properties R_PAREN

    NAME            shift and go to state 112


state 67

    (54) create_function_statement -> CREATE FUNCTION . NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> CREATE FUNCTION . NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END

    NAME            shift and go to state 113


state 68

    (56) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> CREATE PROCEDURE . NAME L_PAREN R_PAREN AS BEGIN statements END

    NAME            shift and go to state 114


state 69

    (24) use_statement -> USE NAME .

    SEMICOLON       reduce using rule 24 (use_statement -> USE NAME .)


state 70

    (25) declare_statement -> DECLARE ID . AS type
    (26) declare_statement -> DECLARE ID . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 115
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 116

state 71

    (27) set_statement -> SET assignments .
    (28) assignments -> assignments . COMMA ID ASSIGN a

    SEMICOLON       reduce using rule 27 (set_statement -> SET assignments .)
    COMMA           shift and go to state 123


state 72

    (29) assignments -> ID . ASSIGN a

    ASSIGN          shift and go to state 124


state 73

    (39) select_statement -> SELECT columns . FROM NAME
    (40) select_statement -> SELECT columns . FROM NAME WHERE a
    (44) columns -> columns . COMMA column

    FROM            shift and go to state 125
    COMMA           shift and go to state 126


state 74

    (47) column -> NAME .
    (48) column -> NAME . DOT NAME
    (113) h -> NAME .

    FROM            reduce using rule 47 (column -> NAME .)
    COMMA           reduce using rule 47 (column -> NAME .)
    DOT             shift and go to state 127
    TIMES           reduce using rule 113 (h -> NAME .)
    DIVIDE          reduce using rule 113 (h -> NAME .)
    PLUS            reduce using rule 113 (h -> NAME .)
    MINUS           reduce using rule 113 (h -> NAME .)
    EQUALS          reduce using rule 113 (h -> NAME .)
    NOT_EQ          reduce using rule 113 (h -> NAME .)
    LESS_THAN       reduce using rule 113 (h -> NAME .)
    GREATER_THAN    reduce using rule 113 (h -> NAME .)
    LESS_EQ         reduce using rule 113 (h -> NAME .)
    GREATER_EQ      reduce using rule 113 (h -> NAME .)
    AND             reduce using rule 113 (h -> NAME .)
    NAME            reduce using rule 113 (h -> NAME .)
    OR              reduce using rule 113 (h -> NAME .)


state 75

    (50) column -> a . NAME
    (88) a -> a . OR b

    NAME            shift and go to state 128
    OR              shift and go to state 129


state 76

    (45) columns -> column .

    FROM            reduce using rule 45 (columns -> column .)
    COMMA           reduce using rule 45 (columns -> column .)


state 77

    (46) column -> TIMES .

    FROM            reduce using rule 46 (column -> TIMES .)
    COMMA           reduce using rule 46 (column -> TIMES .)


state 78

    (49) column -> case_statement . NAME

    NAME            shift and go to state 130


state 79

    (51) column -> if_statement . NAME

    NAME            shift and go to state 131


state 80

    (79) case_statement -> CASE . when_statements END NAME
    (80) when_statements -> . WHEN a THEN a when_statements
    (81) when_statements -> . ELSE THEN a

    WHEN            shift and go to state 133
    ELSE            shift and go to state 134

    when_statements                shift and go to state 132

state 81

    (89) a -> b .
    (90) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 89 (a -> b .)
    OR              reduce using rule 89 (a -> b .)
    SEMICOLON       reduce using rule 89 (a -> b .)
    THEN            reduce using rule 89 (a -> b .)
    BEGIN           reduce using rule 89 (a -> b .)
    R_PAREN         reduce using rule 89 (a -> b .)
    COMMA           reduce using rule 89 (a -> b .)
    AS              reduce using rule 89 (a -> b .)
    EQUALS          reduce using rule 89 (a -> b .)
    NOT_EQ          reduce using rule 89 (a -> b .)
    LESS_THAN       reduce using rule 89 (a -> b .)
    GREATER_THAN    reduce using rule 89 (a -> b .)
    LESS_EQ         reduce using rule 89 (a -> b .)
    GREATER_EQ      reduce using rule 89 (a -> b .)
    TIMES           reduce using rule 89 (a -> b .)
    DIVIDE          reduce using rule 89 (a -> b .)
    PLUS            reduce using rule 89 (a -> b .)
    MINUS           reduce using rule 89 (a -> b .)
    END             reduce using rule 89 (a -> b .)
    WHEN            reduce using rule 89 (a -> b .)
    ELSE            reduce using rule 89 (a -> b .)
    WHERE           reduce using rule 89 (a -> b .)
    AND             shift and go to state 135

  ! AND             [ reduce using rule 89 (a -> b .) ]


state 82

    (114) h -> L_PAREN . a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 136
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 83

    (91) b -> c .

    AND             reduce using rule 91 (b -> c .)
    NAME            reduce using rule 91 (b -> c .)
    OR              reduce using rule 91 (b -> c .)
    SEMICOLON       reduce using rule 91 (b -> c .)
    THEN            reduce using rule 91 (b -> c .)
    BEGIN           reduce using rule 91 (b -> c .)
    R_PAREN         reduce using rule 91 (b -> c .)
    COMMA           reduce using rule 91 (b -> c .)
    AS              reduce using rule 91 (b -> c .)
    EQUALS          reduce using rule 91 (b -> c .)
    NOT_EQ          reduce using rule 91 (b -> c .)
    LESS_THAN       reduce using rule 91 (b -> c .)
    GREATER_THAN    reduce using rule 91 (b -> c .)
    LESS_EQ         reduce using rule 91 (b -> c .)
    GREATER_EQ      reduce using rule 91 (b -> c .)
    TIMES           reduce using rule 91 (b -> c .)
    DIVIDE          reduce using rule 91 (b -> c .)
    PLUS            reduce using rule 91 (b -> c .)
    MINUS           reduce using rule 91 (b -> c .)
    END             reduce using rule 91 (b -> c .)
    WHEN            reduce using rule 91 (b -> c .)
    ELSE            reduce using rule 91 (b -> c .)
    WHERE           reduce using rule 91 (b -> c .)


state 84

    (92) c -> NOT_SIGN . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    d                              shift and go to state 137
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 85

    (93) c -> d .
    (94) d -> d . EQUALS e
    (95) d -> d . NOT_EQ e
    (96) d -> d . LESS_THAN e
    (97) d -> d . GREATER_THAN e
    (98) d -> d . LESS_EQ e
    (99) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 93 (c -> d .)
    NAME            reduce using rule 93 (c -> d .)
    OR              reduce using rule 93 (c -> d .)
    SEMICOLON       reduce using rule 93 (c -> d .)
    THEN            reduce using rule 93 (c -> d .)
    BEGIN           reduce using rule 93 (c -> d .)
    R_PAREN         reduce using rule 93 (c -> d .)
    COMMA           reduce using rule 93 (c -> d .)
    AS              reduce using rule 93 (c -> d .)
    TIMES           reduce using rule 93 (c -> d .)
    DIVIDE          reduce using rule 93 (c -> d .)
    PLUS            reduce using rule 93 (c -> d .)
    MINUS           reduce using rule 93 (c -> d .)
    END             reduce using rule 93 (c -> d .)
    WHEN            reduce using rule 93 (c -> d .)
    ELSE            reduce using rule 93 (c -> d .)
    WHERE           reduce using rule 93 (c -> d .)
    EQUALS          shift and go to state 138
    NOT_EQ          shift and go to state 139
    LESS_THAN       shift and go to state 140
    GREATER_THAN    shift and go to state 141
    LESS_EQ         shift and go to state 142
    GREATER_EQ      shift and go to state 143

  ! EQUALS          [ reduce using rule 93 (c -> d .) ]
  ! NOT_EQ          [ reduce using rule 93 (c -> d .) ]
  ! LESS_THAN       [ reduce using rule 93 (c -> d .) ]
  ! GREATER_THAN    [ reduce using rule 93 (c -> d .) ]
  ! LESS_EQ         [ reduce using rule 93 (c -> d .) ]
  ! GREATER_EQ      [ reduce using rule 93 (c -> d .) ]


state 86

    (100) d -> e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 100 (d -> e .)
    NOT_EQ          reduce using rule 100 (d -> e .)
    LESS_THAN       reduce using rule 100 (d -> e .)
    GREATER_THAN    reduce using rule 100 (d -> e .)
    LESS_EQ         reduce using rule 100 (d -> e .)
    GREATER_EQ      reduce using rule 100 (d -> e .)
    AND             reduce using rule 100 (d -> e .)
    NAME            reduce using rule 100 (d -> e .)
    OR              reduce using rule 100 (d -> e .)
    SEMICOLON       reduce using rule 100 (d -> e .)
    THEN            reduce using rule 100 (d -> e .)
    BEGIN           reduce using rule 100 (d -> e .)
    R_PAREN         reduce using rule 100 (d -> e .)
    COMMA           reduce using rule 100 (d -> e .)
    AS              reduce using rule 100 (d -> e .)
    TIMES           reduce using rule 100 (d -> e .)
    DIVIDE          reduce using rule 100 (d -> e .)
    END             reduce using rule 100 (d -> e .)
    WHEN            reduce using rule 100 (d -> e .)
    ELSE            reduce using rule 100 (d -> e .)
    WHERE           reduce using rule 100 (d -> e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 100 (d -> e .) ]
  ! MINUS           [ reduce using rule 100 (d -> e .) ]


state 87

    (103) e -> f .
    (104) f -> f . TIMES g
    (105) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 103 (e -> f .)
    MINUS           reduce using rule 103 (e -> f .)
    EQUALS          reduce using rule 103 (e -> f .)
    NOT_EQ          reduce using rule 103 (e -> f .)
    LESS_THAN       reduce using rule 103 (e -> f .)
    GREATER_THAN    reduce using rule 103 (e -> f .)
    LESS_EQ         reduce using rule 103 (e -> f .)
    GREATER_EQ      reduce using rule 103 (e -> f .)
    AND             reduce using rule 103 (e -> f .)
    NAME            reduce using rule 103 (e -> f .)
    OR              reduce using rule 103 (e -> f .)
    SEMICOLON       reduce using rule 103 (e -> f .)
    THEN            reduce using rule 103 (e -> f .)
    BEGIN           reduce using rule 103 (e -> f .)
    R_PAREN         reduce using rule 103 (e -> f .)
    COMMA           reduce using rule 103 (e -> f .)
    AS              reduce using rule 103 (e -> f .)
    END             reduce using rule 103 (e -> f .)
    WHEN            reduce using rule 103 (e -> f .)
    ELSE            reduce using rule 103 (e -> f .)
    WHERE           reduce using rule 103 (e -> f .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147

  ! TIMES           [ reduce using rule 103 (e -> f .) ]
  ! DIVIDE          [ reduce using rule 103 (e -> f .) ]


state 88

    (107) g -> MINUS . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    h                              shift and go to state 148
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 89

    (106) f -> g .

    TIMES           reduce using rule 106 (f -> g .)
    DIVIDE          reduce using rule 106 (f -> g .)
    PLUS            reduce using rule 106 (f -> g .)
    MINUS           reduce using rule 106 (f -> g .)
    EQUALS          reduce using rule 106 (f -> g .)
    NOT_EQ          reduce using rule 106 (f -> g .)
    LESS_THAN       reduce using rule 106 (f -> g .)
    GREATER_THAN    reduce using rule 106 (f -> g .)
    LESS_EQ         reduce using rule 106 (f -> g .)
    GREATER_EQ      reduce using rule 106 (f -> g .)
    AND             reduce using rule 106 (f -> g .)
    NAME            reduce using rule 106 (f -> g .)
    OR              reduce using rule 106 (f -> g .)
    SEMICOLON       reduce using rule 106 (f -> g .)
    THEN            reduce using rule 106 (f -> g .)
    BEGIN           reduce using rule 106 (f -> g .)
    R_PAREN         reduce using rule 106 (f -> g .)
    COMMA           reduce using rule 106 (f -> g .)
    AS              reduce using rule 106 (f -> g .)
    END             reduce using rule 106 (f -> g .)
    WHEN            reduce using rule 106 (f -> g .)
    ELSE            reduce using rule 106 (f -> g .)
    WHERE           reduce using rule 106 (f -> g .)


state 90

    (108) g -> h .

    TIMES           reduce using rule 108 (g -> h .)
    DIVIDE          reduce using rule 108 (g -> h .)
    PLUS            reduce using rule 108 (g -> h .)
    MINUS           reduce using rule 108 (g -> h .)
    EQUALS          reduce using rule 108 (g -> h .)
    NOT_EQ          reduce using rule 108 (g -> h .)
    LESS_THAN       reduce using rule 108 (g -> h .)
    GREATER_THAN    reduce using rule 108 (g -> h .)
    LESS_EQ         reduce using rule 108 (g -> h .)
    GREATER_EQ      reduce using rule 108 (g -> h .)
    AND             reduce using rule 108 (g -> h .)
    NAME            reduce using rule 108 (g -> h .)
    OR              reduce using rule 108 (g -> h .)
    SEMICOLON       reduce using rule 108 (g -> h .)
    THEN            reduce using rule 108 (g -> h .)
    BEGIN           reduce using rule 108 (g -> h .)
    R_PAREN         reduce using rule 108 (g -> h .)
    COMMA           reduce using rule 108 (g -> h .)
    AS              reduce using rule 108 (g -> h .)
    END             reduce using rule 108 (g -> h .)
    WHEN            reduce using rule 108 (g -> h .)
    ELSE            reduce using rule 108 (g -> h .)
    WHERE           reduce using rule 108 (g -> h .)


state 91

    (109) h -> INTEGER_VALUE .

    TIMES           reduce using rule 109 (h -> INTEGER_VALUE .)
    DIVIDE          reduce using rule 109 (h -> INTEGER_VALUE .)
    PLUS            reduce using rule 109 (h -> INTEGER_VALUE .)
    MINUS           reduce using rule 109 (h -> INTEGER_VALUE .)
    EQUALS          reduce using rule 109 (h -> INTEGER_VALUE .)
    NOT_EQ          reduce using rule 109 (h -> INTEGER_VALUE .)
    LESS_THAN       reduce using rule 109 (h -> INTEGER_VALUE .)
    GREATER_THAN    reduce using rule 109 (h -> INTEGER_VALUE .)
    LESS_EQ         reduce using rule 109 (h -> INTEGER_VALUE .)
    GREATER_EQ      reduce using rule 109 (h -> INTEGER_VALUE .)
    AND             reduce using rule 109 (h -> INTEGER_VALUE .)
    NAME            reduce using rule 109 (h -> INTEGER_VALUE .)
    OR              reduce using rule 109 (h -> INTEGER_VALUE .)
    SEMICOLON       reduce using rule 109 (h -> INTEGER_VALUE .)
    THEN            reduce using rule 109 (h -> INTEGER_VALUE .)
    BEGIN           reduce using rule 109 (h -> INTEGER_VALUE .)
    R_PAREN         reduce using rule 109 (h -> INTEGER_VALUE .)
    COMMA           reduce using rule 109 (h -> INTEGER_VALUE .)
    AS              reduce using rule 109 (h -> INTEGER_VALUE .)
    END             reduce using rule 109 (h -> INTEGER_VALUE .)
    WHEN            reduce using rule 109 (h -> INTEGER_VALUE .)
    ELSE            reduce using rule 109 (h -> INTEGER_VALUE .)
    WHERE           reduce using rule 109 (h -> INTEGER_VALUE .)


state 92

    (110) h -> DECIMAL_VALUE .

    TIMES           reduce using rule 110 (h -> DECIMAL_VALUE .)
    DIVIDE          reduce using rule 110 (h -> DECIMAL_VALUE .)
    PLUS            reduce using rule 110 (h -> DECIMAL_VALUE .)
    MINUS           reduce using rule 110 (h -> DECIMAL_VALUE .)
    EQUALS          reduce using rule 110 (h -> DECIMAL_VALUE .)
    NOT_EQ          reduce using rule 110 (h -> DECIMAL_VALUE .)
    LESS_THAN       reduce using rule 110 (h -> DECIMAL_VALUE .)
    GREATER_THAN    reduce using rule 110 (h -> DECIMAL_VALUE .)
    LESS_EQ         reduce using rule 110 (h -> DECIMAL_VALUE .)
    GREATER_EQ      reduce using rule 110 (h -> DECIMAL_VALUE .)
    AND             reduce using rule 110 (h -> DECIMAL_VALUE .)
    NAME            reduce using rule 110 (h -> DECIMAL_VALUE .)
    OR              reduce using rule 110 (h -> DECIMAL_VALUE .)
    SEMICOLON       reduce using rule 110 (h -> DECIMAL_VALUE .)
    THEN            reduce using rule 110 (h -> DECIMAL_VALUE .)
    BEGIN           reduce using rule 110 (h -> DECIMAL_VALUE .)
    R_PAREN         reduce using rule 110 (h -> DECIMAL_VALUE .)
    COMMA           reduce using rule 110 (h -> DECIMAL_VALUE .)
    AS              reduce using rule 110 (h -> DECIMAL_VALUE .)
    END             reduce using rule 110 (h -> DECIMAL_VALUE .)
    WHEN            reduce using rule 110 (h -> DECIMAL_VALUE .)
    ELSE            reduce using rule 110 (h -> DECIMAL_VALUE .)
    WHERE           reduce using rule 110 (h -> DECIMAL_VALUE .)


state 93

    (111) h -> STRING .

    TIMES           reduce using rule 111 (h -> STRING .)
    DIVIDE          reduce using rule 111 (h -> STRING .)
    PLUS            reduce using rule 111 (h -> STRING .)
    MINUS           reduce using rule 111 (h -> STRING .)
    EQUALS          reduce using rule 111 (h -> STRING .)
    NOT_EQ          reduce using rule 111 (h -> STRING .)
    LESS_THAN       reduce using rule 111 (h -> STRING .)
    GREATER_THAN    reduce using rule 111 (h -> STRING .)
    LESS_EQ         reduce using rule 111 (h -> STRING .)
    GREATER_EQ      reduce using rule 111 (h -> STRING .)
    AND             reduce using rule 111 (h -> STRING .)
    NAME            reduce using rule 111 (h -> STRING .)
    OR              reduce using rule 111 (h -> STRING .)
    SEMICOLON       reduce using rule 111 (h -> STRING .)
    THEN            reduce using rule 111 (h -> STRING .)
    BEGIN           reduce using rule 111 (h -> STRING .)
    R_PAREN         reduce using rule 111 (h -> STRING .)
    COMMA           reduce using rule 111 (h -> STRING .)
    AS              reduce using rule 111 (h -> STRING .)
    END             reduce using rule 111 (h -> STRING .)
    WHEN            reduce using rule 111 (h -> STRING .)
    ELSE            reduce using rule 111 (h -> STRING .)
    WHERE           reduce using rule 111 (h -> STRING .)


state 94

    (112) h -> ID .

    TIMES           reduce using rule 112 (h -> ID .)
    DIVIDE          reduce using rule 112 (h -> ID .)
    PLUS            reduce using rule 112 (h -> ID .)
    MINUS           reduce using rule 112 (h -> ID .)
    EQUALS          reduce using rule 112 (h -> ID .)
    NOT_EQ          reduce using rule 112 (h -> ID .)
    LESS_THAN       reduce using rule 112 (h -> ID .)
    GREATER_THAN    reduce using rule 112 (h -> ID .)
    LESS_EQ         reduce using rule 112 (h -> ID .)
    GREATER_EQ      reduce using rule 112 (h -> ID .)
    AND             reduce using rule 112 (h -> ID .)
    NAME            reduce using rule 112 (h -> ID .)
    OR              reduce using rule 112 (h -> ID .)
    SEMICOLON       reduce using rule 112 (h -> ID .)
    THEN            reduce using rule 112 (h -> ID .)
    BEGIN           reduce using rule 112 (h -> ID .)
    R_PAREN         reduce using rule 112 (h -> ID .)
    COMMA           reduce using rule 112 (h -> ID .)
    AS              reduce using rule 112 (h -> ID .)
    END             reduce using rule 112 (h -> ID .)
    WHEN            reduce using rule 112 (h -> ID .)
    ELSE            reduce using rule 112 (h -> ID .)
    WHERE           reduce using rule 112 (h -> ID .)


state 95

    (115) h -> exec_statement .

    TIMES           reduce using rule 115 (h -> exec_statement .)
    DIVIDE          reduce using rule 115 (h -> exec_statement .)
    PLUS            reduce using rule 115 (h -> exec_statement .)
    MINUS           reduce using rule 115 (h -> exec_statement .)
    EQUALS          reduce using rule 115 (h -> exec_statement .)
    NOT_EQ          reduce using rule 115 (h -> exec_statement .)
    LESS_THAN       reduce using rule 115 (h -> exec_statement .)
    GREATER_THAN    reduce using rule 115 (h -> exec_statement .)
    LESS_EQ         reduce using rule 115 (h -> exec_statement .)
    GREATER_EQ      reduce using rule 115 (h -> exec_statement .)
    AND             reduce using rule 115 (h -> exec_statement .)
    NAME            reduce using rule 115 (h -> exec_statement .)
    OR              reduce using rule 115 (h -> exec_statement .)
    SEMICOLON       reduce using rule 115 (h -> exec_statement .)
    THEN            reduce using rule 115 (h -> exec_statement .)
    BEGIN           reduce using rule 115 (h -> exec_statement .)
    R_PAREN         reduce using rule 115 (h -> exec_statement .)
    COMMA           reduce using rule 115 (h -> exec_statement .)
    AS              reduce using rule 115 (h -> exec_statement .)
    END             reduce using rule 115 (h -> exec_statement .)
    WHEN            reduce using rule 115 (h -> exec_statement .)
    ELSE            reduce using rule 115 (h -> exec_statement .)
    WHERE           reduce using rule 115 (h -> exec_statement .)


state 96

    (116) h -> call_function_statement .

    TIMES           reduce using rule 116 (h -> call_function_statement .)
    DIVIDE          reduce using rule 116 (h -> call_function_statement .)
    PLUS            reduce using rule 116 (h -> call_function_statement .)
    MINUS           reduce using rule 116 (h -> call_function_statement .)
    EQUALS          reduce using rule 116 (h -> call_function_statement .)
    NOT_EQ          reduce using rule 116 (h -> call_function_statement .)
    LESS_THAN       reduce using rule 116 (h -> call_function_statement .)
    GREATER_THAN    reduce using rule 116 (h -> call_function_statement .)
    LESS_EQ         reduce using rule 116 (h -> call_function_statement .)
    GREATER_EQ      reduce using rule 116 (h -> call_function_statement .)
    AND             reduce using rule 116 (h -> call_function_statement .)
    NAME            reduce using rule 116 (h -> call_function_statement .)
    OR              reduce using rule 116 (h -> call_function_statement .)
    SEMICOLON       reduce using rule 116 (h -> call_function_statement .)
    THEN            reduce using rule 116 (h -> call_function_statement .)
    BEGIN           reduce using rule 116 (h -> call_function_statement .)
    R_PAREN         reduce using rule 116 (h -> call_function_statement .)
    COMMA           reduce using rule 116 (h -> call_function_statement .)
    AS              reduce using rule 116 (h -> call_function_statement .)
    END             reduce using rule 116 (h -> call_function_statement .)
    WHEN            reduce using rule 116 (h -> call_function_statement .)
    ELSE            reduce using rule 116 (h -> call_function_statement .)
    WHERE           reduce using rule 116 (h -> call_function_statement .)


state 97

    (41) insert_statement -> INSERT INTO . NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    NAME            shift and go to state 149


state 98

    (125) return_statement -> RETURN a .
    (88) a -> a . OR b

    SEMICOLON       reduce using rule 125 (return_statement -> RETURN a .)
    OR              shift and go to state 129


state 99

    (113) h -> NAME .

    TIMES           reduce using rule 113 (h -> NAME .)
    DIVIDE          reduce using rule 113 (h -> NAME .)
    PLUS            reduce using rule 113 (h -> NAME .)
    MINUS           reduce using rule 113 (h -> NAME .)
    EQUALS          reduce using rule 113 (h -> NAME .)
    NOT_EQ          reduce using rule 113 (h -> NAME .)
    LESS_THAN       reduce using rule 113 (h -> NAME .)
    GREATER_THAN    reduce using rule 113 (h -> NAME .)
    LESS_EQ         reduce using rule 113 (h -> NAME .)
    GREATER_EQ      reduce using rule 113 (h -> NAME .)
    AND             reduce using rule 113 (h -> NAME .)
    OR              reduce using rule 113 (h -> NAME .)
    SEMICOLON       reduce using rule 113 (h -> NAME .)
    THEN            reduce using rule 113 (h -> NAME .)
    BEGIN           reduce using rule 113 (h -> NAME .)
    R_PAREN         reduce using rule 113 (h -> NAME .)
    NAME            reduce using rule 113 (h -> NAME .)
    COMMA           reduce using rule 113 (h -> NAME .)
    AS              reduce using rule 113 (h -> NAME .)
    END             reduce using rule 113 (h -> NAME .)
    WHEN            reduce using rule 113 (h -> NAME .)
    ELSE            reduce using rule 113 (h -> NAME .)
    WHERE           reduce using rule 113 (h -> NAME .)


state 100

    (117) call_function_statement -> function_name_prod L_PAREN . vals R_PAREN
    (118) call_function_statement -> function_name_prod L_PAREN . R_PAREN
    (52) vals -> . vals COMMA a
    (53) vals -> . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    R_PAREN         shift and go to state 151
    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    function_name_prod             shift and go to state 30
    vals                           shift and go to state 150
    a                              shift and go to state 152
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96

state 101

    (119) call_function_statement -> CAS L_PAREN . a AS type R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 153
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 102

    (62) alter_table_statement -> ALTER TABLE . NAME ADD COLUMN NAME type
    (63) alter_table_statement -> ALTER TABLE . NAME DROP COLUMN NAME

    NAME            shift and go to state 154


state 103

    (72) drop_table_statement -> DROP TABLE . NAME

    NAME            shift and go to state 155


state 104

    (64) if_statement -> IF a . THEN statements END IF
    (65) if_statement -> IF a . THEN statements ELSE statements END IF
    (88) a -> a . OR b

    THEN            shift and go to state 156
    OR              shift and go to state 129


state 105

    (66) if_statement -> IF L_PAREN . a COMMA a COMMA a R_PAREN
    (114) h -> L_PAREN . a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 157
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 106

    (67) exec_statement -> EXEC NAME . vals
    (68) exec_statement -> EXEC NAME . args
    (69) exec_statement -> EXEC NAME .
    (52) vals -> . vals COMMA a
    (53) vals -> . a
    (70) args -> . args COMMA ID ASSIGN a
    (71) args -> . ID ASSIGN a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    SEMICOLON       reduce using rule 69 (exec_statement -> EXEC NAME .)
    TIMES           reduce using rule 69 (exec_statement -> EXEC NAME .)
    DIVIDE          reduce using rule 69 (exec_statement -> EXEC NAME .)
    PLUS            reduce using rule 69 (exec_statement -> EXEC NAME .)
    EQUALS          reduce using rule 69 (exec_statement -> EXEC NAME .)
    NOT_EQ          reduce using rule 69 (exec_statement -> EXEC NAME .)
    LESS_THAN       reduce using rule 69 (exec_statement -> EXEC NAME .)
    GREATER_THAN    reduce using rule 69 (exec_statement -> EXEC NAME .)
    LESS_EQ         reduce using rule 69 (exec_statement -> EXEC NAME .)
    GREATER_EQ      reduce using rule 69 (exec_statement -> EXEC NAME .)
    AND             reduce using rule 69 (exec_statement -> EXEC NAME .)
    OR              reduce using rule 69 (exec_statement -> EXEC NAME .)
    THEN            reduce using rule 69 (exec_statement -> EXEC NAME .)
    BEGIN           reduce using rule 69 (exec_statement -> EXEC NAME .)
    R_PAREN         reduce using rule 69 (exec_statement -> EXEC NAME .)
    COMMA           reduce using rule 69 (exec_statement -> EXEC NAME .)
    AS              reduce using rule 69 (exec_statement -> EXEC NAME .)
    END             reduce using rule 69 (exec_statement -> EXEC NAME .)
    WHEN            reduce using rule 69 (exec_statement -> EXEC NAME .)
    ELSE            reduce using rule 69 (exec_statement -> EXEC NAME .)
    WHERE           reduce using rule 69 (exec_statement -> EXEC NAME .)
    ID              shift and go to state 160
    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

  ! MINUS           [ reduce using rule 69 (exec_statement -> EXEC NAME .) ]
  ! NAME            [ reduce using rule 69 (exec_statement -> EXEC NAME .) ]

    vals                           shift and go to state 158
    args                           shift and go to state 159
    a                              shift and go to state 152
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 107

    (73) update_statement -> UPDATE NAME . SET column_assignments WHERE a

    SET             shift and go to state 161


state 108

    (76) while_statement -> WHILE a . BEGIN statements END
    (88) a -> a . OR b

    BEGIN           shift and go to state 162
    OR              shift and go to state 129


state 109

    (77) truncate_statement -> TRUNCATE TABLE . NAME

    NAME            shift and go to state 163


state 110

    (78) delete_statement -> DELETE FROM . NAME WHERE a

    NAME            shift and go to state 164


state 111

    (23) create_database_statement -> CREATE DATA BASE . NAME

    NAME            shift and go to state 165


state 112

    (30) create_table_statement -> CREATE TABLE NAME . L_PAREN properties R_PAREN

    L_PAREN         shift and go to state 166


state 113

    (54) create_function_statement -> CREATE FUNCTION NAME . L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> CREATE FUNCTION NAME . L_PAREN R_PAREN RETURN type AS BEGIN statements END

    L_PAREN         shift and go to state 167


state 114

    (56) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> CREATE PROCEDURE NAME . L_PAREN R_PAREN AS BEGIN statements END

    L_PAREN         shift and go to state 168


state 115

    (25) declare_statement -> DECLARE ID AS . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 169

state 116

    (26) declare_statement -> DECLARE ID type .

    SEMICOLON       reduce using rule 26 (declare_statement -> DECLARE ID type .)


state 117

    (82) type -> INT .

    SEMICOLON       reduce using rule 82 (type -> INT .)
    R_PAREN         reduce using rule 82 (type -> INT .)
    NOT             reduce using rule 82 (type -> INT .)
    NULL            reduce using rule 82 (type -> INT .)
    PRIMARY         reduce using rule 82 (type -> INT .)
    REFERENCE       reduce using rule 82 (type -> INT .)
    COMMA           reduce using rule 82 (type -> INT .)
    AS              reduce using rule 82 (type -> INT .)


state 118

    (83) type -> DECIMAL .

    SEMICOLON       reduce using rule 83 (type -> DECIMAL .)
    R_PAREN         reduce using rule 83 (type -> DECIMAL .)
    NOT             reduce using rule 83 (type -> DECIMAL .)
    NULL            reduce using rule 83 (type -> DECIMAL .)
    PRIMARY         reduce using rule 83 (type -> DECIMAL .)
    REFERENCE       reduce using rule 83 (type -> DECIMAL .)
    COMMA           reduce using rule 83 (type -> DECIMAL .)
    AS              reduce using rule 83 (type -> DECIMAL .)


state 119

    (84) type -> DATE .

    SEMICOLON       reduce using rule 84 (type -> DATE .)
    R_PAREN         reduce using rule 84 (type -> DATE .)
    NOT             reduce using rule 84 (type -> DATE .)
    NULL            reduce using rule 84 (type -> DATE .)
    PRIMARY         reduce using rule 84 (type -> DATE .)
    REFERENCE       reduce using rule 84 (type -> DATE .)
    COMMA           reduce using rule 84 (type -> DATE .)
    AS              reduce using rule 84 (type -> DATE .)


state 120

    (85) type -> DATETIME .

    SEMICOLON       reduce using rule 85 (type -> DATETIME .)
    R_PAREN         reduce using rule 85 (type -> DATETIME .)
    NOT             reduce using rule 85 (type -> DATETIME .)
    NULL            reduce using rule 85 (type -> DATETIME .)
    PRIMARY         reduce using rule 85 (type -> DATETIME .)
    REFERENCE       reduce using rule 85 (type -> DATETIME .)
    COMMA           reduce using rule 85 (type -> DATETIME .)
    AS              reduce using rule 85 (type -> DATETIME .)


state 121

    (86) type -> NCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 170


state 122

    (87) type -> NVARCHAR . L_PAREN a R_PAREN

    L_PAREN         shift and go to state 171


state 123

    (28) assignments -> assignments COMMA . ID ASSIGN a

    ID              shift and go to state 172


state 124

    (29) assignments -> ID ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 173
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 125

    (39) select_statement -> SELECT columns FROM . NAME
    (40) select_statement -> SELECT columns FROM . NAME WHERE a

    NAME            shift and go to state 174


state 126

    (44) columns -> columns COMMA . column
    (46) column -> . TIMES
    (47) column -> . NAME
    (48) column -> . NAME DOT NAME
    (49) column -> . case_statement NAME
    (50) column -> . a NAME
    (51) column -> . if_statement NAME
    (79) case_statement -> . CASE when_statements END NAME
    (88) a -> . a OR b
    (89) a -> . b
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    TIMES           shift and go to state 77
    NAME            shift and go to state 74
    CASE            shift and go to state 80
    IF              shift and go to state 34
    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    column                         shift and go to state 175
    case_statement                 shift and go to state 78
    a                              shift and go to state 75
    if_statement                   shift and go to state 79
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 127

    (48) column -> NAME DOT . NAME

    NAME            shift and go to state 176


state 128

    (50) column -> a NAME .

    FROM            reduce using rule 50 (column -> a NAME .)
    COMMA           reduce using rule 50 (column -> a NAME .)


state 129

    (88) a -> a OR . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    b                              shift and go to state 177
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 130

    (49) column -> case_statement NAME .

    FROM            reduce using rule 49 (column -> case_statement NAME .)
    COMMA           reduce using rule 49 (column -> case_statement NAME .)


state 131

    (51) column -> if_statement NAME .

    FROM            reduce using rule 51 (column -> if_statement NAME .)
    COMMA           reduce using rule 51 (column -> if_statement NAME .)


state 132

    (79) case_statement -> CASE when_statements . END NAME

    END             shift and go to state 178


state 133

    (80) when_statements -> WHEN . a THEN a when_statements
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 179
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 134

    (81) when_statements -> ELSE . THEN a

    THEN            shift and go to state 180


state 135

    (90) b -> b AND . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    c                              shift and go to state 181
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 136

    (114) h -> L_PAREN a . R_PAREN
    (88) a -> a . OR b

    R_PAREN         shift and go to state 182
    OR              shift and go to state 129


state 137

    (92) c -> NOT_SIGN d .
    (94) d -> d . EQUALS e
    (95) d -> d . NOT_EQ e
    (96) d -> d . LESS_THAN e
    (97) d -> d . GREATER_THAN e
    (98) d -> d . LESS_EQ e
    (99) d -> d . GREATER_EQ e

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    AND             reduce using rule 92 (c -> NOT_SIGN d .)
    NAME            reduce using rule 92 (c -> NOT_SIGN d .)
    OR              reduce using rule 92 (c -> NOT_SIGN d .)
    SEMICOLON       reduce using rule 92 (c -> NOT_SIGN d .)
    THEN            reduce using rule 92 (c -> NOT_SIGN d .)
    BEGIN           reduce using rule 92 (c -> NOT_SIGN d .)
    R_PAREN         reduce using rule 92 (c -> NOT_SIGN d .)
    COMMA           reduce using rule 92 (c -> NOT_SIGN d .)
    AS              reduce using rule 92 (c -> NOT_SIGN d .)
    TIMES           reduce using rule 92 (c -> NOT_SIGN d .)
    DIVIDE          reduce using rule 92 (c -> NOT_SIGN d .)
    PLUS            reduce using rule 92 (c -> NOT_SIGN d .)
    MINUS           reduce using rule 92 (c -> NOT_SIGN d .)
    END             reduce using rule 92 (c -> NOT_SIGN d .)
    WHEN            reduce using rule 92 (c -> NOT_SIGN d .)
    ELSE            reduce using rule 92 (c -> NOT_SIGN d .)
    WHERE           reduce using rule 92 (c -> NOT_SIGN d .)
    EQUALS          shift and go to state 138
    NOT_EQ          shift and go to state 139
    LESS_THAN       shift and go to state 140
    GREATER_THAN    shift and go to state 141
    LESS_EQ         shift and go to state 142
    GREATER_EQ      shift and go to state 143

  ! EQUALS          [ reduce using rule 92 (c -> NOT_SIGN d .) ]
  ! NOT_EQ          [ reduce using rule 92 (c -> NOT_SIGN d .) ]
  ! LESS_THAN       [ reduce using rule 92 (c -> NOT_SIGN d .) ]
  ! GREATER_THAN    [ reduce using rule 92 (c -> NOT_SIGN d .) ]
  ! LESS_EQ         [ reduce using rule 92 (c -> NOT_SIGN d .) ]
  ! GREATER_EQ      [ reduce using rule 92 (c -> NOT_SIGN d .) ]


state 138

    (94) d -> d EQUALS . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 183
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 139

    (95) d -> d NOT_EQ . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 184
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 140

    (96) d -> d LESS_THAN . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 185
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 141

    (97) d -> d GREATER_THAN . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 186
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 142

    (98) d -> d LESS_EQ . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 187
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 143

    (99) d -> d GREATER_EQ . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    e                              shift and go to state 188
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 144

    (101) e -> e PLUS . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    f                              shift and go to state 189
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 145

    (102) e -> e MINUS . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    f                              shift and go to state 190
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 146

    (104) f -> f TIMES . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    g                              shift and go to state 191
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 147

    (105) f -> f DIVIDE . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    g                              shift and go to state 192
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 148

    (107) g -> MINUS h .

    TIMES           reduce using rule 107 (g -> MINUS h .)
    DIVIDE          reduce using rule 107 (g -> MINUS h .)
    PLUS            reduce using rule 107 (g -> MINUS h .)
    MINUS           reduce using rule 107 (g -> MINUS h .)
    EQUALS          reduce using rule 107 (g -> MINUS h .)
    NOT_EQ          reduce using rule 107 (g -> MINUS h .)
    LESS_THAN       reduce using rule 107 (g -> MINUS h .)
    GREATER_THAN    reduce using rule 107 (g -> MINUS h .)
    LESS_EQ         reduce using rule 107 (g -> MINUS h .)
    GREATER_EQ      reduce using rule 107 (g -> MINUS h .)
    AND             reduce using rule 107 (g -> MINUS h .)
    NAME            reduce using rule 107 (g -> MINUS h .)
    OR              reduce using rule 107 (g -> MINUS h .)
    SEMICOLON       reduce using rule 107 (g -> MINUS h .)
    THEN            reduce using rule 107 (g -> MINUS h .)
    BEGIN           reduce using rule 107 (g -> MINUS h .)
    R_PAREN         reduce using rule 107 (g -> MINUS h .)
    COMMA           reduce using rule 107 (g -> MINUS h .)
    AS              reduce using rule 107 (g -> MINUS h .)
    END             reduce using rule 107 (g -> MINUS h .)
    WHEN            reduce using rule 107 (g -> MINUS h .)
    ELSE            reduce using rule 107 (g -> MINUS h .)
    WHERE           reduce using rule 107 (g -> MINUS h .)


state 149

    (41) insert_statement -> INSERT INTO NAME . L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 193


state 150

    (117) call_function_statement -> function_name_prod L_PAREN vals . R_PAREN
    (52) vals -> vals . COMMA a

    R_PAREN         shift and go to state 194
    COMMA           shift and go to state 195


state 151

    (118) call_function_statement -> function_name_prod L_PAREN R_PAREN .

    SEMICOLON       reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    TIMES           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    PLUS            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    MINUS           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    EQUALS          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    NOT_EQ          reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_THAN       reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_THAN    reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    LESS_EQ         reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    GREATER_EQ      reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AND             reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    NAME            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    OR              reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    THEN            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    BEGIN           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    COMMA           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    AS              reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    END             reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    WHEN            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    ELSE            reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)
    WHERE           reduce using rule 118 (call_function_statement -> function_name_prod L_PAREN R_PAREN .)


state 152

    (53) vals -> a .
    (88) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 53 (vals -> a .)
    COMMA           reduce using rule 53 (vals -> a .)
    EQUALS          reduce using rule 53 (vals -> a .)
    NOT_EQ          reduce using rule 53 (vals -> a .)
    LESS_THAN       reduce using rule 53 (vals -> a .)
    GREATER_THAN    reduce using rule 53 (vals -> a .)
    LESS_EQ         reduce using rule 53 (vals -> a .)
    GREATER_EQ      reduce using rule 53 (vals -> a .)
    AND             reduce using rule 53 (vals -> a .)
    NAME            reduce using rule 53 (vals -> a .)
    SEMICOLON       reduce using rule 53 (vals -> a .)
    THEN            reduce using rule 53 (vals -> a .)
    BEGIN           reduce using rule 53 (vals -> a .)
    AS              reduce using rule 53 (vals -> a .)
    TIMES           reduce using rule 53 (vals -> a .)
    DIVIDE          reduce using rule 53 (vals -> a .)
    PLUS            reduce using rule 53 (vals -> a .)
    MINUS           reduce using rule 53 (vals -> a .)
    END             reduce using rule 53 (vals -> a .)
    WHEN            reduce using rule 53 (vals -> a .)
    ELSE            reduce using rule 53 (vals -> a .)
    WHERE           reduce using rule 53 (vals -> a .)
    OR              shift and go to state 129

  ! OR              [ reduce using rule 53 (vals -> a .) ]


state 153

    (119) call_function_statement -> CAS L_PAREN a . AS type R_PAREN
    (88) a -> a . OR b

    AS              shift and go to state 196
    OR              shift and go to state 129


state 154

    (62) alter_table_statement -> ALTER TABLE NAME . ADD COLUMN NAME type
    (63) alter_table_statement -> ALTER TABLE NAME . DROP COLUMN NAME

    ADD             shift and go to state 197
    DROP            shift and go to state 198


state 155

    (72) drop_table_statement -> DROP TABLE NAME .

    SEMICOLON       reduce using rule 72 (drop_table_statement -> DROP TABLE NAME .)


state 156

    (64) if_statement -> IF a THEN . statements END IF
    (65) if_statement -> IF a THEN . statements ELSE statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 199
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 157

    (66) if_statement -> IF L_PAREN a . COMMA a COMMA a R_PAREN
    (114) h -> L_PAREN a . R_PAREN
    (88) a -> a . OR b

    COMMA           shift and go to state 200
    R_PAREN         shift and go to state 182
    OR              shift and go to state 129


state 158

    (67) exec_statement -> EXEC NAME vals .
    (52) vals -> vals . COMMA a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    TIMES           reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    DIVIDE          reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    PLUS            reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    MINUS           reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    EQUALS          reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    NOT_EQ          reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    LESS_THAN       reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    GREATER_THAN    reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    LESS_EQ         reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    GREATER_EQ      reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    AND             reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    NAME            reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    OR              reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    THEN            reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    BEGIN           reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    R_PAREN         reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    AS              reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    END             reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    WHEN            reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    ELSE            reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    WHERE           reduce using rule 67 (exec_statement -> EXEC NAME vals .)
    COMMA           shift and go to state 195

  ! COMMA           [ reduce using rule 67 (exec_statement -> EXEC NAME vals .) ]


state 159

    (68) exec_statement -> EXEC NAME args .
    (70) args -> args . COMMA ID ASSIGN a

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 68 (exec_statement -> EXEC NAME args .)
    TIMES           reduce using rule 68 (exec_statement -> EXEC NAME args .)
    DIVIDE          reduce using rule 68 (exec_statement -> EXEC NAME args .)
    PLUS            reduce using rule 68 (exec_statement -> EXEC NAME args .)
    MINUS           reduce using rule 68 (exec_statement -> EXEC NAME args .)
    EQUALS          reduce using rule 68 (exec_statement -> EXEC NAME args .)
    NOT_EQ          reduce using rule 68 (exec_statement -> EXEC NAME args .)
    LESS_THAN       reduce using rule 68 (exec_statement -> EXEC NAME args .)
    GREATER_THAN    reduce using rule 68 (exec_statement -> EXEC NAME args .)
    LESS_EQ         reduce using rule 68 (exec_statement -> EXEC NAME args .)
    GREATER_EQ      reduce using rule 68 (exec_statement -> EXEC NAME args .)
    AND             reduce using rule 68 (exec_statement -> EXEC NAME args .)
    NAME            reduce using rule 68 (exec_statement -> EXEC NAME args .)
    OR              reduce using rule 68 (exec_statement -> EXEC NAME args .)
    THEN            reduce using rule 68 (exec_statement -> EXEC NAME args .)
    BEGIN           reduce using rule 68 (exec_statement -> EXEC NAME args .)
    R_PAREN         reduce using rule 68 (exec_statement -> EXEC NAME args .)
    AS              reduce using rule 68 (exec_statement -> EXEC NAME args .)
    END             reduce using rule 68 (exec_statement -> EXEC NAME args .)
    WHEN            reduce using rule 68 (exec_statement -> EXEC NAME args .)
    ELSE            reduce using rule 68 (exec_statement -> EXEC NAME args .)
    WHERE           reduce using rule 68 (exec_statement -> EXEC NAME args .)
    COMMA           shift and go to state 201

  ! COMMA           [ reduce using rule 68 (exec_statement -> EXEC NAME args .) ]


state 160

    (71) args -> ID . ASSIGN a
    (112) h -> ID .

    ASSIGN          shift and go to state 202
    EQUALS          reduce using rule 112 (h -> ID .)
    NOT_EQ          reduce using rule 112 (h -> ID .)
    LESS_THAN       reduce using rule 112 (h -> ID .)
    GREATER_THAN    reduce using rule 112 (h -> ID .)
    LESS_EQ         reduce using rule 112 (h -> ID .)
    GREATER_EQ      reduce using rule 112 (h -> ID .)
    AND             reduce using rule 112 (h -> ID .)
    NAME            reduce using rule 112 (h -> ID .)
    OR              reduce using rule 112 (h -> ID .)
    SEMICOLON       reduce using rule 112 (h -> ID .)
    THEN            reduce using rule 112 (h -> ID .)
    BEGIN           reduce using rule 112 (h -> ID .)
    R_PAREN         reduce using rule 112 (h -> ID .)
    COMMA           reduce using rule 112 (h -> ID .)
    AS              reduce using rule 112 (h -> ID .)
    TIMES           reduce using rule 112 (h -> ID .)
    DIVIDE          reduce using rule 112 (h -> ID .)
    PLUS            reduce using rule 112 (h -> ID .)
    MINUS           reduce using rule 112 (h -> ID .)
    END             reduce using rule 112 (h -> ID .)
    WHEN            reduce using rule 112 (h -> ID .)
    ELSE            reduce using rule 112 (h -> ID .)
    WHERE           reduce using rule 112 (h -> ID .)


state 161

    (73) update_statement -> UPDATE NAME SET . column_assignments WHERE a
    (74) column_assignments -> . column_assignments COMMA NAME ASSIGN a
    (75) column_assignments -> . NAME ASSIGN a

    NAME            shift and go to state 203

    column_assignments             shift and go to state 204

state 162

    (76) while_statement -> WHILE a BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 205
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 163

    (77) truncate_statement -> TRUNCATE TABLE NAME .

    SEMICOLON       reduce using rule 77 (truncate_statement -> TRUNCATE TABLE NAME .)


state 164

    (78) delete_statement -> DELETE FROM NAME . WHERE a

    WHERE           shift and go to state 206


state 165

    (23) create_database_statement -> CREATE DATA BASE NAME .

    SEMICOLON       reduce using rule 23 (create_database_statement -> CREATE DATA BASE NAME .)


state 166

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN . properties R_PAREN
    (31) properties -> . properties COMMA property
    (32) properties -> . property
    (33) property -> . NAME type null_prod PRIMARY KEY
    (34) property -> . NAME type null_prod
    (35) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 207

    properties                     shift and go to state 208
    property                       shift and go to state 209

state 167

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN . parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN . R_PAREN RETURN type AS BEGIN statements END
    (58) parameters -> . parameters COMMA ID AS type
    (59) parameters -> . parameters COMMA ID type
    (60) parameters -> . ID type
    (61) parameters -> . ID AS type

    R_PAREN         shift and go to state 211
    ID              shift and go to state 212

    parameters                     shift and go to state 210

state 168

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN . R_PAREN AS BEGIN statements END
    (58) parameters -> . parameters COMMA ID AS type
    (59) parameters -> . parameters COMMA ID type
    (60) parameters -> . ID type
    (61) parameters -> . ID AS type

    R_PAREN         shift and go to state 214
    ID              shift and go to state 212

    parameters                     shift and go to state 213

state 169

    (25) declare_statement -> DECLARE ID AS type .

    SEMICOLON       reduce using rule 25 (declare_statement -> DECLARE ID AS type .)


state 170

    (86) type -> NCHAR L_PAREN . a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 215
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 171

    (87) type -> NVARCHAR L_PAREN . a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 216
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 172

    (28) assignments -> assignments COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 217


state 173

    (29) assignments -> ID ASSIGN a .
    (88) a -> a . OR b

    COMMA           reduce using rule 29 (assignments -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 29 (assignments -> ID ASSIGN a .)
    OR              shift and go to state 129


state 174

    (39) select_statement -> SELECT columns FROM NAME .
    (40) select_statement -> SELECT columns FROM NAME . WHERE a

    SEMICOLON       reduce using rule 39 (select_statement -> SELECT columns FROM NAME .)
    WHERE           shift and go to state 218


state 175

    (44) columns -> columns COMMA column .

    FROM            reduce using rule 44 (columns -> columns COMMA column .)
    COMMA           reduce using rule 44 (columns -> columns COMMA column .)


state 176

    (48) column -> NAME DOT NAME .

    FROM            reduce using rule 48 (column -> NAME DOT NAME .)
    COMMA           reduce using rule 48 (column -> NAME DOT NAME .)


state 177

    (88) a -> a OR b .
    (90) b -> b . AND c

  ! shift/reduce conflict for AND resolved as shift
    NAME            reduce using rule 88 (a -> a OR b .)
    OR              reduce using rule 88 (a -> a OR b .)
    SEMICOLON       reduce using rule 88 (a -> a OR b .)
    THEN            reduce using rule 88 (a -> a OR b .)
    BEGIN           reduce using rule 88 (a -> a OR b .)
    R_PAREN         reduce using rule 88 (a -> a OR b .)
    COMMA           reduce using rule 88 (a -> a OR b .)
    AS              reduce using rule 88 (a -> a OR b .)
    EQUALS          reduce using rule 88 (a -> a OR b .)
    NOT_EQ          reduce using rule 88 (a -> a OR b .)
    LESS_THAN       reduce using rule 88 (a -> a OR b .)
    GREATER_THAN    reduce using rule 88 (a -> a OR b .)
    LESS_EQ         reduce using rule 88 (a -> a OR b .)
    GREATER_EQ      reduce using rule 88 (a -> a OR b .)
    TIMES           reduce using rule 88 (a -> a OR b .)
    DIVIDE          reduce using rule 88 (a -> a OR b .)
    PLUS            reduce using rule 88 (a -> a OR b .)
    MINUS           reduce using rule 88 (a -> a OR b .)
    END             reduce using rule 88 (a -> a OR b .)
    WHEN            reduce using rule 88 (a -> a OR b .)
    ELSE            reduce using rule 88 (a -> a OR b .)
    WHERE           reduce using rule 88 (a -> a OR b .)
    AND             shift and go to state 135

  ! AND             [ reduce using rule 88 (a -> a OR b .) ]


state 178

    (79) case_statement -> CASE when_statements END . NAME

    NAME            shift and go to state 219


state 179

    (80) when_statements -> WHEN a . THEN a when_statements
    (88) a -> a . OR b

    THEN            shift and go to state 220
    OR              shift and go to state 129


state 180

    (81) when_statements -> ELSE THEN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 221
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 181

    (90) b -> b AND c .

    AND             reduce using rule 90 (b -> b AND c .)
    NAME            reduce using rule 90 (b -> b AND c .)
    OR              reduce using rule 90 (b -> b AND c .)
    SEMICOLON       reduce using rule 90 (b -> b AND c .)
    THEN            reduce using rule 90 (b -> b AND c .)
    BEGIN           reduce using rule 90 (b -> b AND c .)
    R_PAREN         reduce using rule 90 (b -> b AND c .)
    COMMA           reduce using rule 90 (b -> b AND c .)
    AS              reduce using rule 90 (b -> b AND c .)
    EQUALS          reduce using rule 90 (b -> b AND c .)
    NOT_EQ          reduce using rule 90 (b -> b AND c .)
    LESS_THAN       reduce using rule 90 (b -> b AND c .)
    GREATER_THAN    reduce using rule 90 (b -> b AND c .)
    LESS_EQ         reduce using rule 90 (b -> b AND c .)
    GREATER_EQ      reduce using rule 90 (b -> b AND c .)
    TIMES           reduce using rule 90 (b -> b AND c .)
    DIVIDE          reduce using rule 90 (b -> b AND c .)
    PLUS            reduce using rule 90 (b -> b AND c .)
    MINUS           reduce using rule 90 (b -> b AND c .)
    END             reduce using rule 90 (b -> b AND c .)
    WHEN            reduce using rule 90 (b -> b AND c .)
    ELSE            reduce using rule 90 (b -> b AND c .)
    WHERE           reduce using rule 90 (b -> b AND c .)


state 182

    (114) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    PLUS            reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    MINUS           reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    EQUALS          reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    NOT_EQ          reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    LESS_THAN       reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    GREATER_THAN    reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    LESS_EQ         reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    GREATER_EQ      reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    NAME            reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    SEMICOLON       reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    THEN            reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    BEGIN           reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    COMMA           reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    AS              reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    END             reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    WHEN            reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    ELSE            reduce using rule 114 (h -> L_PAREN a R_PAREN .)
    WHERE           reduce using rule 114 (h -> L_PAREN a R_PAREN .)


state 183

    (94) d -> d EQUALS e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 94 (d -> d EQUALS e .)
    NOT_EQ          reduce using rule 94 (d -> d EQUALS e .)
    LESS_THAN       reduce using rule 94 (d -> d EQUALS e .)
    GREATER_THAN    reduce using rule 94 (d -> d EQUALS e .)
    LESS_EQ         reduce using rule 94 (d -> d EQUALS e .)
    GREATER_EQ      reduce using rule 94 (d -> d EQUALS e .)
    AND             reduce using rule 94 (d -> d EQUALS e .)
    NAME            reduce using rule 94 (d -> d EQUALS e .)
    OR              reduce using rule 94 (d -> d EQUALS e .)
    SEMICOLON       reduce using rule 94 (d -> d EQUALS e .)
    THEN            reduce using rule 94 (d -> d EQUALS e .)
    BEGIN           reduce using rule 94 (d -> d EQUALS e .)
    R_PAREN         reduce using rule 94 (d -> d EQUALS e .)
    COMMA           reduce using rule 94 (d -> d EQUALS e .)
    AS              reduce using rule 94 (d -> d EQUALS e .)
    TIMES           reduce using rule 94 (d -> d EQUALS e .)
    DIVIDE          reduce using rule 94 (d -> d EQUALS e .)
    END             reduce using rule 94 (d -> d EQUALS e .)
    WHEN            reduce using rule 94 (d -> d EQUALS e .)
    ELSE            reduce using rule 94 (d -> d EQUALS e .)
    WHERE           reduce using rule 94 (d -> d EQUALS e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 94 (d -> d EQUALS e .) ]
  ! MINUS           [ reduce using rule 94 (d -> d EQUALS e .) ]


state 184

    (95) d -> d NOT_EQ e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 95 (d -> d NOT_EQ e .)
    NOT_EQ          reduce using rule 95 (d -> d NOT_EQ e .)
    LESS_THAN       reduce using rule 95 (d -> d NOT_EQ e .)
    GREATER_THAN    reduce using rule 95 (d -> d NOT_EQ e .)
    LESS_EQ         reduce using rule 95 (d -> d NOT_EQ e .)
    GREATER_EQ      reduce using rule 95 (d -> d NOT_EQ e .)
    AND             reduce using rule 95 (d -> d NOT_EQ e .)
    NAME            reduce using rule 95 (d -> d NOT_EQ e .)
    OR              reduce using rule 95 (d -> d NOT_EQ e .)
    SEMICOLON       reduce using rule 95 (d -> d NOT_EQ e .)
    THEN            reduce using rule 95 (d -> d NOT_EQ e .)
    BEGIN           reduce using rule 95 (d -> d NOT_EQ e .)
    R_PAREN         reduce using rule 95 (d -> d NOT_EQ e .)
    COMMA           reduce using rule 95 (d -> d NOT_EQ e .)
    AS              reduce using rule 95 (d -> d NOT_EQ e .)
    TIMES           reduce using rule 95 (d -> d NOT_EQ e .)
    DIVIDE          reduce using rule 95 (d -> d NOT_EQ e .)
    END             reduce using rule 95 (d -> d NOT_EQ e .)
    WHEN            reduce using rule 95 (d -> d NOT_EQ e .)
    ELSE            reduce using rule 95 (d -> d NOT_EQ e .)
    WHERE           reduce using rule 95 (d -> d NOT_EQ e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 95 (d -> d NOT_EQ e .) ]
  ! MINUS           [ reduce using rule 95 (d -> d NOT_EQ e .) ]


state 185

    (96) d -> d LESS_THAN e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 96 (d -> d LESS_THAN e .)
    NOT_EQ          reduce using rule 96 (d -> d LESS_THAN e .)
    LESS_THAN       reduce using rule 96 (d -> d LESS_THAN e .)
    GREATER_THAN    reduce using rule 96 (d -> d LESS_THAN e .)
    LESS_EQ         reduce using rule 96 (d -> d LESS_THAN e .)
    GREATER_EQ      reduce using rule 96 (d -> d LESS_THAN e .)
    AND             reduce using rule 96 (d -> d LESS_THAN e .)
    NAME            reduce using rule 96 (d -> d LESS_THAN e .)
    OR              reduce using rule 96 (d -> d LESS_THAN e .)
    SEMICOLON       reduce using rule 96 (d -> d LESS_THAN e .)
    THEN            reduce using rule 96 (d -> d LESS_THAN e .)
    BEGIN           reduce using rule 96 (d -> d LESS_THAN e .)
    R_PAREN         reduce using rule 96 (d -> d LESS_THAN e .)
    COMMA           reduce using rule 96 (d -> d LESS_THAN e .)
    AS              reduce using rule 96 (d -> d LESS_THAN e .)
    TIMES           reduce using rule 96 (d -> d LESS_THAN e .)
    DIVIDE          reduce using rule 96 (d -> d LESS_THAN e .)
    END             reduce using rule 96 (d -> d LESS_THAN e .)
    WHEN            reduce using rule 96 (d -> d LESS_THAN e .)
    ELSE            reduce using rule 96 (d -> d LESS_THAN e .)
    WHERE           reduce using rule 96 (d -> d LESS_THAN e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 96 (d -> d LESS_THAN e .) ]
  ! MINUS           [ reduce using rule 96 (d -> d LESS_THAN e .) ]


state 186

    (97) d -> d GREATER_THAN e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 97 (d -> d GREATER_THAN e .)
    NOT_EQ          reduce using rule 97 (d -> d GREATER_THAN e .)
    LESS_THAN       reduce using rule 97 (d -> d GREATER_THAN e .)
    GREATER_THAN    reduce using rule 97 (d -> d GREATER_THAN e .)
    LESS_EQ         reduce using rule 97 (d -> d GREATER_THAN e .)
    GREATER_EQ      reduce using rule 97 (d -> d GREATER_THAN e .)
    AND             reduce using rule 97 (d -> d GREATER_THAN e .)
    NAME            reduce using rule 97 (d -> d GREATER_THAN e .)
    OR              reduce using rule 97 (d -> d GREATER_THAN e .)
    SEMICOLON       reduce using rule 97 (d -> d GREATER_THAN e .)
    THEN            reduce using rule 97 (d -> d GREATER_THAN e .)
    BEGIN           reduce using rule 97 (d -> d GREATER_THAN e .)
    R_PAREN         reduce using rule 97 (d -> d GREATER_THAN e .)
    COMMA           reduce using rule 97 (d -> d GREATER_THAN e .)
    AS              reduce using rule 97 (d -> d GREATER_THAN e .)
    TIMES           reduce using rule 97 (d -> d GREATER_THAN e .)
    DIVIDE          reduce using rule 97 (d -> d GREATER_THAN e .)
    END             reduce using rule 97 (d -> d GREATER_THAN e .)
    WHEN            reduce using rule 97 (d -> d GREATER_THAN e .)
    ELSE            reduce using rule 97 (d -> d GREATER_THAN e .)
    WHERE           reduce using rule 97 (d -> d GREATER_THAN e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 97 (d -> d GREATER_THAN e .) ]
  ! MINUS           [ reduce using rule 97 (d -> d GREATER_THAN e .) ]


state 187

    (98) d -> d LESS_EQ e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 98 (d -> d LESS_EQ e .)
    NOT_EQ          reduce using rule 98 (d -> d LESS_EQ e .)
    LESS_THAN       reduce using rule 98 (d -> d LESS_EQ e .)
    GREATER_THAN    reduce using rule 98 (d -> d LESS_EQ e .)
    LESS_EQ         reduce using rule 98 (d -> d LESS_EQ e .)
    GREATER_EQ      reduce using rule 98 (d -> d LESS_EQ e .)
    AND             reduce using rule 98 (d -> d LESS_EQ e .)
    NAME            reduce using rule 98 (d -> d LESS_EQ e .)
    OR              reduce using rule 98 (d -> d LESS_EQ e .)
    SEMICOLON       reduce using rule 98 (d -> d LESS_EQ e .)
    THEN            reduce using rule 98 (d -> d LESS_EQ e .)
    BEGIN           reduce using rule 98 (d -> d LESS_EQ e .)
    R_PAREN         reduce using rule 98 (d -> d LESS_EQ e .)
    COMMA           reduce using rule 98 (d -> d LESS_EQ e .)
    AS              reduce using rule 98 (d -> d LESS_EQ e .)
    TIMES           reduce using rule 98 (d -> d LESS_EQ e .)
    DIVIDE          reduce using rule 98 (d -> d LESS_EQ e .)
    END             reduce using rule 98 (d -> d LESS_EQ e .)
    WHEN            reduce using rule 98 (d -> d LESS_EQ e .)
    ELSE            reduce using rule 98 (d -> d LESS_EQ e .)
    WHERE           reduce using rule 98 (d -> d LESS_EQ e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 98 (d -> d LESS_EQ e .) ]
  ! MINUS           [ reduce using rule 98 (d -> d LESS_EQ e .) ]


state 188

    (99) d -> d GREATER_EQ e .
    (101) e -> e . PLUS f
    (102) e -> e . MINUS f

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    EQUALS          reduce using rule 99 (d -> d GREATER_EQ e .)
    NOT_EQ          reduce using rule 99 (d -> d GREATER_EQ e .)
    LESS_THAN       reduce using rule 99 (d -> d GREATER_EQ e .)
    GREATER_THAN    reduce using rule 99 (d -> d GREATER_EQ e .)
    LESS_EQ         reduce using rule 99 (d -> d GREATER_EQ e .)
    GREATER_EQ      reduce using rule 99 (d -> d GREATER_EQ e .)
    AND             reduce using rule 99 (d -> d GREATER_EQ e .)
    NAME            reduce using rule 99 (d -> d GREATER_EQ e .)
    OR              reduce using rule 99 (d -> d GREATER_EQ e .)
    SEMICOLON       reduce using rule 99 (d -> d GREATER_EQ e .)
    THEN            reduce using rule 99 (d -> d GREATER_EQ e .)
    BEGIN           reduce using rule 99 (d -> d GREATER_EQ e .)
    R_PAREN         reduce using rule 99 (d -> d GREATER_EQ e .)
    COMMA           reduce using rule 99 (d -> d GREATER_EQ e .)
    AS              reduce using rule 99 (d -> d GREATER_EQ e .)
    TIMES           reduce using rule 99 (d -> d GREATER_EQ e .)
    DIVIDE          reduce using rule 99 (d -> d GREATER_EQ e .)
    END             reduce using rule 99 (d -> d GREATER_EQ e .)
    WHEN            reduce using rule 99 (d -> d GREATER_EQ e .)
    ELSE            reduce using rule 99 (d -> d GREATER_EQ e .)
    WHERE           reduce using rule 99 (d -> d GREATER_EQ e .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! PLUS            [ reduce using rule 99 (d -> d GREATER_EQ e .) ]
  ! MINUS           [ reduce using rule 99 (d -> d GREATER_EQ e .) ]


state 189

    (101) e -> e PLUS f .
    (104) f -> f . TIMES g
    (105) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 101 (e -> e PLUS f .)
    MINUS           reduce using rule 101 (e -> e PLUS f .)
    EQUALS          reduce using rule 101 (e -> e PLUS f .)
    NOT_EQ          reduce using rule 101 (e -> e PLUS f .)
    LESS_THAN       reduce using rule 101 (e -> e PLUS f .)
    GREATER_THAN    reduce using rule 101 (e -> e PLUS f .)
    LESS_EQ         reduce using rule 101 (e -> e PLUS f .)
    GREATER_EQ      reduce using rule 101 (e -> e PLUS f .)
    AND             reduce using rule 101 (e -> e PLUS f .)
    NAME            reduce using rule 101 (e -> e PLUS f .)
    OR              reduce using rule 101 (e -> e PLUS f .)
    SEMICOLON       reduce using rule 101 (e -> e PLUS f .)
    THEN            reduce using rule 101 (e -> e PLUS f .)
    BEGIN           reduce using rule 101 (e -> e PLUS f .)
    R_PAREN         reduce using rule 101 (e -> e PLUS f .)
    COMMA           reduce using rule 101 (e -> e PLUS f .)
    AS              reduce using rule 101 (e -> e PLUS f .)
    END             reduce using rule 101 (e -> e PLUS f .)
    WHEN            reduce using rule 101 (e -> e PLUS f .)
    ELSE            reduce using rule 101 (e -> e PLUS f .)
    WHERE           reduce using rule 101 (e -> e PLUS f .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147

  ! TIMES           [ reduce using rule 101 (e -> e PLUS f .) ]
  ! DIVIDE          [ reduce using rule 101 (e -> e PLUS f .) ]


state 190

    (102) e -> e MINUS f .
    (104) f -> f . TIMES g
    (105) f -> f . DIVIDE g

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 102 (e -> e MINUS f .)
    MINUS           reduce using rule 102 (e -> e MINUS f .)
    EQUALS          reduce using rule 102 (e -> e MINUS f .)
    NOT_EQ          reduce using rule 102 (e -> e MINUS f .)
    LESS_THAN       reduce using rule 102 (e -> e MINUS f .)
    GREATER_THAN    reduce using rule 102 (e -> e MINUS f .)
    LESS_EQ         reduce using rule 102 (e -> e MINUS f .)
    GREATER_EQ      reduce using rule 102 (e -> e MINUS f .)
    AND             reduce using rule 102 (e -> e MINUS f .)
    NAME            reduce using rule 102 (e -> e MINUS f .)
    OR              reduce using rule 102 (e -> e MINUS f .)
    SEMICOLON       reduce using rule 102 (e -> e MINUS f .)
    THEN            reduce using rule 102 (e -> e MINUS f .)
    BEGIN           reduce using rule 102 (e -> e MINUS f .)
    R_PAREN         reduce using rule 102 (e -> e MINUS f .)
    COMMA           reduce using rule 102 (e -> e MINUS f .)
    AS              reduce using rule 102 (e -> e MINUS f .)
    END             reduce using rule 102 (e -> e MINUS f .)
    WHEN            reduce using rule 102 (e -> e MINUS f .)
    ELSE            reduce using rule 102 (e -> e MINUS f .)
    WHERE           reduce using rule 102 (e -> e MINUS f .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147

  ! TIMES           [ reduce using rule 102 (e -> e MINUS f .) ]
  ! DIVIDE          [ reduce using rule 102 (e -> e MINUS f .) ]


state 191

    (104) f -> f TIMES g .

    TIMES           reduce using rule 104 (f -> f TIMES g .)
    DIVIDE          reduce using rule 104 (f -> f TIMES g .)
    PLUS            reduce using rule 104 (f -> f TIMES g .)
    MINUS           reduce using rule 104 (f -> f TIMES g .)
    EQUALS          reduce using rule 104 (f -> f TIMES g .)
    NOT_EQ          reduce using rule 104 (f -> f TIMES g .)
    LESS_THAN       reduce using rule 104 (f -> f TIMES g .)
    GREATER_THAN    reduce using rule 104 (f -> f TIMES g .)
    LESS_EQ         reduce using rule 104 (f -> f TIMES g .)
    GREATER_EQ      reduce using rule 104 (f -> f TIMES g .)
    AND             reduce using rule 104 (f -> f TIMES g .)
    NAME            reduce using rule 104 (f -> f TIMES g .)
    OR              reduce using rule 104 (f -> f TIMES g .)
    SEMICOLON       reduce using rule 104 (f -> f TIMES g .)
    THEN            reduce using rule 104 (f -> f TIMES g .)
    BEGIN           reduce using rule 104 (f -> f TIMES g .)
    R_PAREN         reduce using rule 104 (f -> f TIMES g .)
    COMMA           reduce using rule 104 (f -> f TIMES g .)
    AS              reduce using rule 104 (f -> f TIMES g .)
    END             reduce using rule 104 (f -> f TIMES g .)
    WHEN            reduce using rule 104 (f -> f TIMES g .)
    ELSE            reduce using rule 104 (f -> f TIMES g .)
    WHERE           reduce using rule 104 (f -> f TIMES g .)


state 192

    (105) f -> f DIVIDE g .

    TIMES           reduce using rule 105 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 105 (f -> f DIVIDE g .)
    PLUS            reduce using rule 105 (f -> f DIVIDE g .)
    MINUS           reduce using rule 105 (f -> f DIVIDE g .)
    EQUALS          reduce using rule 105 (f -> f DIVIDE g .)
    NOT_EQ          reduce using rule 105 (f -> f DIVIDE g .)
    LESS_THAN       reduce using rule 105 (f -> f DIVIDE g .)
    GREATER_THAN    reduce using rule 105 (f -> f DIVIDE g .)
    LESS_EQ         reduce using rule 105 (f -> f DIVIDE g .)
    GREATER_EQ      reduce using rule 105 (f -> f DIVIDE g .)
    AND             reduce using rule 105 (f -> f DIVIDE g .)
    NAME            reduce using rule 105 (f -> f DIVIDE g .)
    OR              reduce using rule 105 (f -> f DIVIDE g .)
    SEMICOLON       reduce using rule 105 (f -> f DIVIDE g .)
    THEN            reduce using rule 105 (f -> f DIVIDE g .)
    BEGIN           reduce using rule 105 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 105 (f -> f DIVIDE g .)
    COMMA           reduce using rule 105 (f -> f DIVIDE g .)
    AS              reduce using rule 105 (f -> f DIVIDE g .)
    END             reduce using rule 105 (f -> f DIVIDE g .)
    WHEN            reduce using rule 105 (f -> f DIVIDE g .)
    ELSE            reduce using rule 105 (f -> f DIVIDE g .)
    WHERE           reduce using rule 105 (f -> f DIVIDE g .)


state 193

    (41) insert_statement -> INSERT INTO NAME L_PAREN . column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (42) column_names -> . column_names COMMA NAME
    (43) column_names -> . NAME

    NAME            shift and go to state 222

    column_names                   shift and go to state 223

state 194

    (117) call_function_statement -> function_name_prod L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    TIMES           reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    DIVIDE          reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    PLUS            reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    MINUS           reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    EQUALS          reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    NOT_EQ          reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_THAN       reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_THAN    reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    LESS_EQ         reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    GREATER_EQ      reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AND             reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    NAME            reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    OR              reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    THEN            reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    BEGIN           reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    R_PAREN         reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    COMMA           reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    AS              reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    END             reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    WHEN            reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    ELSE            reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)
    WHERE           reduce using rule 117 (call_function_statement -> function_name_prod L_PAREN vals R_PAREN .)


state 195

    (52) vals -> vals COMMA . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 224
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 196

    (119) call_function_statement -> CAS L_PAREN a AS . type R_PAREN
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 225

state 197

    (62) alter_table_statement -> ALTER TABLE NAME ADD . COLUMN NAME type

    COLUMN          shift and go to state 226


state 198

    (63) alter_table_statement -> ALTER TABLE NAME DROP . COLUMN NAME

    COLUMN          shift and go to state 227


state 199

    (64) if_statement -> IF a THEN statements . END IF
    (65) if_statement -> IF a THEN statements . ELSE statements END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 228
    ELSE            shift and go to state 229
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 200

    (66) if_statement -> IF L_PAREN a COMMA . a COMMA a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 230
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 201

    (70) args -> args COMMA . ID ASSIGN a

    ID              shift and go to state 231


state 202

    (71) args -> ID ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 232
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 203

    (75) column_assignments -> NAME . ASSIGN a

    ASSIGN          shift and go to state 233


state 204

    (73) update_statement -> UPDATE NAME SET column_assignments . WHERE a
    (74) column_assignments -> column_assignments . COMMA NAME ASSIGN a

    WHERE           shift and go to state 234
    COMMA           shift and go to state 235


state 205

    (76) while_statement -> WHILE a BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 236
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 206

    (78) delete_statement -> DELETE FROM NAME WHERE . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 237
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 207

    (33) property -> NAME . type null_prod PRIMARY KEY
    (34) property -> NAME . type null_prod
    (35) property -> NAME . type null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 238

state 208

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN properties . R_PAREN
    (31) properties -> properties . COMMA property

    R_PAREN         shift and go to state 239
    COMMA           shift and go to state 240


state 209

    (32) properties -> property .

    R_PAREN         reduce using rule 32 (properties -> property .)
    COMMA           reduce using rule 32 (properties -> property .)


state 210

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters . R_PAREN RETURN type AS BEGIN statements END
    (58) parameters -> parameters . COMMA ID AS type
    (59) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 241
    COMMA           shift and go to state 242


state 211

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 243


state 212

    (60) parameters -> ID . type
    (61) parameters -> ID . AS type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 245
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 244

state 213

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters . R_PAREN AS BEGIN statements END
    (58) parameters -> parameters . COMMA ID AS type
    (59) parameters -> parameters . COMMA ID type

    R_PAREN         shift and go to state 246
    COMMA           shift and go to state 242


state 214

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN . AS BEGIN statements END

    AS              shift and go to state 247


state 215

    (86) type -> NCHAR L_PAREN a . R_PAREN
    (88) a -> a . OR b

    R_PAREN         shift and go to state 248
    OR              shift and go to state 129


state 216

    (87) type -> NVARCHAR L_PAREN a . R_PAREN
    (88) a -> a . OR b

    R_PAREN         shift and go to state 249
    OR              shift and go to state 129


state 217

    (28) assignments -> assignments COMMA ID ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 250
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 218

    (40) select_statement -> SELECT columns FROM NAME WHERE . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 251
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 219

    (79) case_statement -> CASE when_statements END NAME .

    NAME            reduce using rule 79 (case_statement -> CASE when_statements END NAME .)


state 220

    (80) when_statements -> WHEN a THEN . a when_statements
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 252
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 221

    (81) when_statements -> ELSE THEN a .
    (88) a -> a . OR b

    END             reduce using rule 81 (when_statements -> ELSE THEN a .)
    OR              shift and go to state 129


state 222

    (43) column_names -> NAME .

    R_PAREN         reduce using rule 43 (column_names -> NAME .)
    COMMA           reduce using rule 43 (column_names -> NAME .)


state 223

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names . R_PAREN VALUES L_PAREN vals R_PAREN
    (42) column_names -> column_names . COMMA NAME

    R_PAREN         shift and go to state 253
    COMMA           shift and go to state 254


state 224

    (52) vals -> vals COMMA a .
    (88) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 52 (vals -> vals COMMA a .)
    COMMA           reduce using rule 52 (vals -> vals COMMA a .)
    EQUALS          reduce using rule 52 (vals -> vals COMMA a .)
    NOT_EQ          reduce using rule 52 (vals -> vals COMMA a .)
    LESS_THAN       reduce using rule 52 (vals -> vals COMMA a .)
    GREATER_THAN    reduce using rule 52 (vals -> vals COMMA a .)
    LESS_EQ         reduce using rule 52 (vals -> vals COMMA a .)
    GREATER_EQ      reduce using rule 52 (vals -> vals COMMA a .)
    AND             reduce using rule 52 (vals -> vals COMMA a .)
    NAME            reduce using rule 52 (vals -> vals COMMA a .)
    SEMICOLON       reduce using rule 52 (vals -> vals COMMA a .)
    THEN            reduce using rule 52 (vals -> vals COMMA a .)
    BEGIN           reduce using rule 52 (vals -> vals COMMA a .)
    AS              reduce using rule 52 (vals -> vals COMMA a .)
    TIMES           reduce using rule 52 (vals -> vals COMMA a .)
    DIVIDE          reduce using rule 52 (vals -> vals COMMA a .)
    PLUS            reduce using rule 52 (vals -> vals COMMA a .)
    MINUS           reduce using rule 52 (vals -> vals COMMA a .)
    END             reduce using rule 52 (vals -> vals COMMA a .)
    WHEN            reduce using rule 52 (vals -> vals COMMA a .)
    ELSE            reduce using rule 52 (vals -> vals COMMA a .)
    WHERE           reduce using rule 52 (vals -> vals COMMA a .)
    OR              shift and go to state 129

  ! OR              [ reduce using rule 52 (vals -> vals COMMA a .) ]


state 225

    (119) call_function_statement -> CAS L_PAREN a AS type . R_PAREN

    R_PAREN         shift and go to state 255


state 226

    (62) alter_table_statement -> ALTER TABLE NAME ADD COLUMN . NAME type

    NAME            shift and go to state 256


state 227

    (63) alter_table_statement -> ALTER TABLE NAME DROP COLUMN . NAME

    NAME            shift and go to state 257


state 228

    (64) if_statement -> IF a THEN statements END . IF

    IF              shift and go to state 258


state 229

    (65) if_statement -> IF a THEN statements ELSE . statements END IF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 259
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 230

    (66) if_statement -> IF L_PAREN a COMMA a . COMMA a R_PAREN
    (88) a -> a . OR b

    COMMA           shift and go to state 260
    OR              shift and go to state 129


state 231

    (70) args -> args COMMA ID . ASSIGN a

    ASSIGN          shift and go to state 261


state 232

    (71) args -> ID ASSIGN a .
    (88) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 71 (args -> ID ASSIGN a .)
    NOT_EQ          reduce using rule 71 (args -> ID ASSIGN a .)
    LESS_THAN       reduce using rule 71 (args -> ID ASSIGN a .)
    GREATER_THAN    reduce using rule 71 (args -> ID ASSIGN a .)
    LESS_EQ         reduce using rule 71 (args -> ID ASSIGN a .)
    GREATER_EQ      reduce using rule 71 (args -> ID ASSIGN a .)
    AND             reduce using rule 71 (args -> ID ASSIGN a .)
    NAME            reduce using rule 71 (args -> ID ASSIGN a .)
    SEMICOLON       reduce using rule 71 (args -> ID ASSIGN a .)
    THEN            reduce using rule 71 (args -> ID ASSIGN a .)
    BEGIN           reduce using rule 71 (args -> ID ASSIGN a .)
    R_PAREN         reduce using rule 71 (args -> ID ASSIGN a .)
    COMMA           reduce using rule 71 (args -> ID ASSIGN a .)
    AS              reduce using rule 71 (args -> ID ASSIGN a .)
    TIMES           reduce using rule 71 (args -> ID ASSIGN a .)
    DIVIDE          reduce using rule 71 (args -> ID ASSIGN a .)
    PLUS            reduce using rule 71 (args -> ID ASSIGN a .)
    MINUS           reduce using rule 71 (args -> ID ASSIGN a .)
    END             reduce using rule 71 (args -> ID ASSIGN a .)
    WHEN            reduce using rule 71 (args -> ID ASSIGN a .)
    ELSE            reduce using rule 71 (args -> ID ASSIGN a .)
    WHERE           reduce using rule 71 (args -> ID ASSIGN a .)
    OR              shift and go to state 129

  ! OR              [ reduce using rule 71 (args -> ID ASSIGN a .) ]


state 233

    (75) column_assignments -> NAME ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 262
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 234

    (73) update_statement -> UPDATE NAME SET column_assignments WHERE . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 263
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 235

    (74) column_assignments -> column_assignments COMMA . NAME ASSIGN a

    NAME            shift and go to state 264


state 236

    (76) while_statement -> WHILE a BEGIN statements END .

    SEMICOLON       reduce using rule 76 (while_statement -> WHILE a BEGIN statements END .)


state 237

    (78) delete_statement -> DELETE FROM NAME WHERE a .
    (88) a -> a . OR b

    SEMICOLON       reduce using rule 78 (delete_statement -> DELETE FROM NAME WHERE a .)
    OR              shift and go to state 129


state 238

    (33) property -> NAME type . null_prod PRIMARY KEY
    (34) property -> NAME type . null_prod
    (35) property -> NAME type . null_prod REFERENCE NAME L_PAREN NAME R_PAREN
    (36) null_prod -> . NOT NULL
    (37) null_prod -> . NULL
    (38) null_prod -> .

    NOT             shift and go to state 266
    NULL            shift and go to state 267
    PRIMARY         reduce using rule 38 (null_prod -> .)
    REFERENCE       reduce using rule 38 (null_prod -> .)
    R_PAREN         reduce using rule 38 (null_prod -> .)
    COMMA           reduce using rule 38 (null_prod -> .)

    null_prod                      shift and go to state 265

state 239

    (30) create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .

    SEMICOLON       reduce using rule 30 (create_table_statement -> CREATE TABLE NAME L_PAREN properties R_PAREN .)


state 240

    (31) properties -> properties COMMA . property
    (33) property -> . NAME type null_prod PRIMARY KEY
    (34) property -> . NAME type null_prod
    (35) property -> . NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 207

    property                       shift and go to state 268

state 241

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN . RETURN type AS BEGIN statements END

    RETURN          shift and go to state 269


state 242

    (58) parameters -> parameters COMMA . ID AS type
    (59) parameters -> parameters COMMA . ID type

    ID              shift and go to state 270


state 243

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN . type AS BEGIN statements END
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 271

state 244

    (60) parameters -> ID type .

    R_PAREN         reduce using rule 60 (parameters -> ID type .)
    COMMA           reduce using rule 60 (parameters -> ID type .)


state 245

    (61) parameters -> ID AS . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 272

state 246

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN . AS BEGIN statements END

    AS              shift and go to state 273


state 247

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 274


state 248

    (86) type -> NCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 86 (type -> NCHAR L_PAREN a R_PAREN .)


state 249

    (87) type -> NVARCHAR L_PAREN a R_PAREN .

    SEMICOLON       reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NOT             reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    NULL            reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    PRIMARY         reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    REFERENCE       reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    COMMA           reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)
    AS              reduce using rule 87 (type -> NVARCHAR L_PAREN a R_PAREN .)


state 250

    (28) assignments -> assignments COMMA ID ASSIGN a .
    (88) a -> a . OR b

    COMMA           reduce using rule 28 (assignments -> assignments COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 28 (assignments -> assignments COMMA ID ASSIGN a .)
    OR              shift and go to state 129


state 251

    (40) select_statement -> SELECT columns FROM NAME WHERE a .
    (88) a -> a . OR b

    SEMICOLON       reduce using rule 40 (select_statement -> SELECT columns FROM NAME WHERE a .)
    OR              shift and go to state 129


state 252

    (80) when_statements -> WHEN a THEN a . when_statements
    (88) a -> a . OR b
    (80) when_statements -> . WHEN a THEN a when_statements
    (81) when_statements -> . ELSE THEN a

    OR              shift and go to state 129
    WHEN            shift and go to state 133
    ELSE            shift and go to state 134

    when_statements                shift and go to state 275

state 253

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN . VALUES L_PAREN vals R_PAREN

    VALUES          shift and go to state 276


state 254

    (42) column_names -> column_names COMMA . NAME

    NAME            shift and go to state 277


state 255

    (119) call_function_statement -> CAS L_PAREN a AS type R_PAREN .

    SEMICOLON       reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    TIMES           reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    DIVIDE          reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    PLUS            reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    MINUS           reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    EQUALS          reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    NOT_EQ          reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_THAN       reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_THAN    reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    LESS_EQ         reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    GREATER_EQ      reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AND             reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    NAME            reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    OR              reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    THEN            reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    BEGIN           reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    R_PAREN         reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    COMMA           reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    AS              reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    END             reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    WHEN            reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    ELSE            reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)
    WHERE           reduce using rule 119 (call_function_statement -> CAS L_PAREN a AS type R_PAREN .)


state 256

    (62) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 278

state 257

    (63) alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .

    SEMICOLON       reduce using rule 63 (alter_table_statement -> ALTER TABLE NAME DROP COLUMN NAME .)


state 258

    (64) if_statement -> IF a THEN statements END IF .

    SEMICOLON       reduce using rule 64 (if_statement -> IF a THEN statements END IF .)
    NAME            reduce using rule 64 (if_statement -> IF a THEN statements END IF .)


state 259

    (65) if_statement -> IF a THEN statements ELSE statements . END IF
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 279
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 260

    (66) if_statement -> IF L_PAREN a COMMA a COMMA . a R_PAREN
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 280
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 261

    (70) args -> args COMMA ID ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 281
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 262

    (75) column_assignments -> NAME ASSIGN a .
    (88) a -> a . OR b

    WHERE           reduce using rule 75 (column_assignments -> NAME ASSIGN a .)
    COMMA           reduce using rule 75 (column_assignments -> NAME ASSIGN a .)
    OR              shift and go to state 129


state 263

    (73) update_statement -> UPDATE NAME SET column_assignments WHERE a .
    (88) a -> a . OR b

    SEMICOLON       reduce using rule 73 (update_statement -> UPDATE NAME SET column_assignments WHERE a .)
    OR              shift and go to state 129


state 264

    (74) column_assignments -> column_assignments COMMA NAME . ASSIGN a

    ASSIGN          shift and go to state 282


state 265

    (33) property -> NAME type null_prod . PRIMARY KEY
    (34) property -> NAME type null_prod .
    (35) property -> NAME type null_prod . REFERENCE NAME L_PAREN NAME R_PAREN

    PRIMARY         shift and go to state 283
    R_PAREN         reduce using rule 34 (property -> NAME type null_prod .)
    COMMA           reduce using rule 34 (property -> NAME type null_prod .)
    REFERENCE       shift and go to state 284


state 266

    (36) null_prod -> NOT . NULL

    NULL            shift and go to state 285


state 267

    (37) null_prod -> NULL .

    PRIMARY         reduce using rule 37 (null_prod -> NULL .)
    REFERENCE       reduce using rule 37 (null_prod -> NULL .)
    R_PAREN         reduce using rule 37 (null_prod -> NULL .)
    COMMA           reduce using rule 37 (null_prod -> NULL .)


state 268

    (31) properties -> properties COMMA property .

    R_PAREN         reduce using rule 31 (properties -> properties COMMA property .)
    COMMA           reduce using rule 31 (properties -> properties COMMA property .)


state 269

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN . type AS BEGIN statements END
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 286

state 270

    (58) parameters -> parameters COMMA ID . AS type
    (59) parameters -> parameters COMMA ID . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    AS              shift and go to state 287
    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 288

state 271

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 289


state 272

    (61) parameters -> ID AS type .

    R_PAREN         reduce using rule 61 (parameters -> ID AS type .)
    COMMA           reduce using rule 61 (parameters -> ID AS type .)


state 273

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS . BEGIN statements END

    BEGIN           shift and go to state 290


state 274

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 291
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 275

    (80) when_statements -> WHEN a THEN a when_statements .

    END             reduce using rule 80 (when_statements -> WHEN a THEN a when_statements .)


state 276

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES . L_PAREN vals R_PAREN

    L_PAREN         shift and go to state 292


state 277

    (42) column_names -> column_names COMMA NAME .

    R_PAREN         reduce using rule 42 (column_names -> column_names COMMA NAME .)
    COMMA           reduce using rule 42 (column_names -> column_names COMMA NAME .)


state 278

    (62) alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .

    SEMICOLON       reduce using rule 62 (alter_table_statement -> ALTER TABLE NAME ADD COLUMN NAME type .)


state 279

    (65) if_statement -> IF a THEN statements ELSE statements END . IF

    IF              shift and go to state 293


state 280

    (66) if_statement -> IF L_PAREN a COMMA a COMMA a . R_PAREN
    (88) a -> a . OR b

    R_PAREN         shift and go to state 294
    OR              shift and go to state 129


state 281

    (70) args -> args COMMA ID ASSIGN a .
    (88) a -> a . OR b

  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    NOT_EQ          reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    LESS_THAN       reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    GREATER_THAN    reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    LESS_EQ         reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    GREATER_EQ      reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    AND             reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    NAME            reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    SEMICOLON       reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    THEN            reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    BEGIN           reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    R_PAREN         reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    COMMA           reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    AS              reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    TIMES           reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    DIVIDE          reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    PLUS            reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    MINUS           reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    END             reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    WHEN            reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    ELSE            reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    WHERE           reduce using rule 70 (args -> args COMMA ID ASSIGN a .)
    OR              shift and go to state 129

  ! OR              [ reduce using rule 70 (args -> args COMMA ID ASSIGN a .) ]


state 282

    (74) column_assignments -> column_assignments COMMA NAME ASSIGN . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    a                              shift and go to state 295
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 283

    (33) property -> NAME type null_prod PRIMARY . KEY

    KEY             shift and go to state 296


state 284

    (35) property -> NAME type null_prod REFERENCE . NAME L_PAREN NAME R_PAREN

    NAME            shift and go to state 297


state 285

    (36) null_prod -> NOT NULL .

    PRIMARY         reduce using rule 36 (null_prod -> NOT NULL .)
    REFERENCE       reduce using rule 36 (null_prod -> NOT NULL .)
    R_PAREN         reduce using rule 36 (null_prod -> NOT NULL .)
    COMMA           reduce using rule 36 (null_prod -> NOT NULL .)


state 286

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type . AS BEGIN statements END

    AS              shift and go to state 298


state 287

    (58) parameters -> parameters COMMA ID AS . type
    (82) type -> . INT
    (83) type -> . DECIMAL
    (84) type -> . DATE
    (85) type -> . DATETIME
    (86) type -> . NCHAR L_PAREN a R_PAREN
    (87) type -> . NVARCHAR L_PAREN a R_PAREN

    INT             shift and go to state 117
    DECIMAL         shift and go to state 118
    DATE            shift and go to state 119
    DATETIME        shift and go to state 120
    NCHAR           shift and go to state 121
    NVARCHAR        shift and go to state 122

    type                           shift and go to state 299

state 288

    (59) parameters -> parameters COMMA ID type .

    R_PAREN         reduce using rule 59 (parameters -> parameters COMMA ID type .)
    COMMA           reduce using rule 59 (parameters -> parameters COMMA ID type .)


state 289

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 300


state 290

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 301
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 291

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 302
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 292

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN . vals R_PAREN
    (52) vals -> . vals COMMA a
    (53) vals -> . a
    (88) a -> . a OR b
    (89) a -> . b
    (90) b -> . b AND c
    (91) b -> . c
    (92) c -> . NOT_SIGN d
    (93) c -> . d
    (94) d -> . d EQUALS e
    (95) d -> . d NOT_EQ e
    (96) d -> . d LESS_THAN e
    (97) d -> . d GREATER_THAN e
    (98) d -> . d LESS_EQ e
    (99) d -> . d GREATER_EQ e
    (100) d -> . e
    (101) e -> . e PLUS f
    (102) e -> . e MINUS f
    (103) e -> . f
    (104) f -> . f TIMES g
    (105) f -> . f DIVIDE g
    (106) f -> . g
    (107) g -> . MINUS h
    (108) g -> . h
    (109) h -> . INTEGER_VALUE
    (110) h -> . DECIMAL_VALUE
    (111) h -> . STRING
    (112) h -> . ID
    (113) h -> . NAME
    (114) h -> . L_PAREN a R_PAREN
    (115) h -> . exec_statement
    (116) h -> . call_function_statement
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    NOT_SIGN        shift and go to state 84
    MINUS           shift and go to state 88
    INTEGER_VALUE   shift and go to state 91
    DECIMAL_VALUE   shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 94
    NAME            shift and go to state 99
    L_PAREN         shift and go to state 82
    EXEC            shift and go to state 35
    CAS             shift and go to state 31
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    vals                           shift and go to state 303
    a                              shift and go to state 152
    b                              shift and go to state 81
    c                              shift and go to state 83
    d                              shift and go to state 85
    e                              shift and go to state 86
    f                              shift and go to state 87
    g                              shift and go to state 89
    h                              shift and go to state 90
    exec_statement                 shift and go to state 95
    call_function_statement        shift and go to state 96
    function_name_prod             shift and go to state 30

state 293

    (65) if_statement -> IF a THEN statements ELSE statements END IF .

    SEMICOLON       reduce using rule 65 (if_statement -> IF a THEN statements ELSE statements END IF .)
    NAME            reduce using rule 65 (if_statement -> IF a THEN statements ELSE statements END IF .)


state 294

    (66) if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .

    SEMICOLON       reduce using rule 66 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)
    NAME            reduce using rule 66 (if_statement -> IF L_PAREN a COMMA a COMMA a R_PAREN .)


state 295

    (74) column_assignments -> column_assignments COMMA NAME ASSIGN a .
    (88) a -> a . OR b

    WHERE           reduce using rule 74 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    COMMA           reduce using rule 74 (column_assignments -> column_assignments COMMA NAME ASSIGN a .)
    OR              shift and go to state 129


state 296

    (33) property -> NAME type null_prod PRIMARY KEY .

    R_PAREN         reduce using rule 33 (property -> NAME type null_prod PRIMARY KEY .)
    COMMA           reduce using rule 33 (property -> NAME type null_prod PRIMARY KEY .)


state 297

    (35) property -> NAME type null_prod REFERENCE NAME . L_PAREN NAME R_PAREN

    L_PAREN         shift and go to state 304


state 298

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS . BEGIN statements END

    BEGIN           shift and go to state 305


state 299

    (58) parameters -> parameters COMMA ID AS type .

    R_PAREN         reduce using rule 58 (parameters -> parameters COMMA ID AS type .)
    COMMA           reduce using rule 58 (parameters -> parameters COMMA ID AS type .)


state 300

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 306
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 301

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 307
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 302

    (57) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 57 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END .)


state 303

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals . R_PAREN
    (52) vals -> vals . COMMA a

    R_PAREN         shift and go to state 308
    COMMA           shift and go to state 195


state 304

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN . NAME R_PAREN

    NAME            shift and go to state 309


state 305

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN . statements END
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statements                     shift and go to state 310
    statement                      shift and go to state 3
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 306

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 311
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 307

    (56) create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .

    SEMICOLON       reduce using rule 56 (create_procedure_statement -> CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END .)


state 308

    (41) insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .

    SEMICOLON       reduce using rule 41 (insert_statement -> INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN .)


state 309

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME . R_PAREN

    R_PAREN         shift and go to state 312


state 310

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements . END
    (2) statements -> statements . statement
    (4) statement -> . create_database_statement SEMICOLON
    (5) statement -> . use_statement SEMICOLON
    (6) statement -> . declare_statement SEMICOLON
    (7) statement -> . set_statement SEMICOLON
    (8) statement -> . create_table_statement SEMICOLON
    (9) statement -> . select_statement SEMICOLON
    (10) statement -> . insert_statement SEMICOLON
    (11) statement -> . create_function_statement SEMICOLON
    (12) statement -> . create_procedure_statement SEMICOLON
    (13) statement -> . call_function_statement SEMICOLON
    (14) statement -> . alter_table_statement SEMICOLON
    (15) statement -> . if_statement SEMICOLON
    (16) statement -> . exec_statement SEMICOLON
    (17) statement -> . drop_table_statement SEMICOLON
    (18) statement -> . update_statement SEMICOLON
    (19) statement -> . while_statement SEMICOLON
    (20) statement -> . truncate_statement SEMICOLON
    (21) statement -> . return_statement SEMICOLON
    (22) statement -> . delete_statement SEMICOLON
    (23) create_database_statement -> . CREATE DATA BASE NAME
    (24) use_statement -> . USE NAME
    (25) declare_statement -> . DECLARE ID AS type
    (26) declare_statement -> . DECLARE ID type
    (27) set_statement -> . SET assignments
    (30) create_table_statement -> . CREATE TABLE NAME L_PAREN properties R_PAREN
    (39) select_statement -> . SELECT columns FROM NAME
    (40) select_statement -> . SELECT columns FROM NAME WHERE a
    (41) insert_statement -> . INSERT INTO NAME L_PAREN column_names R_PAREN VALUES L_PAREN vals R_PAREN
    (54) create_function_statement -> . CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END
    (55) create_function_statement -> . CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END
    (56) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN parameters R_PAREN AS BEGIN statements END
    (57) create_procedure_statement -> . CREATE PROCEDURE NAME L_PAREN R_PAREN AS BEGIN statements END
    (117) call_function_statement -> . function_name_prod L_PAREN vals R_PAREN
    (118) call_function_statement -> . function_name_prod L_PAREN R_PAREN
    (119) call_function_statement -> . CAS L_PAREN a AS type R_PAREN
    (62) alter_table_statement -> . ALTER TABLE NAME ADD COLUMN NAME type
    (63) alter_table_statement -> . ALTER TABLE NAME DROP COLUMN NAME
    (64) if_statement -> . IF a THEN statements END IF
    (65) if_statement -> . IF a THEN statements ELSE statements END IF
    (66) if_statement -> . IF L_PAREN a COMMA a COMMA a R_PAREN
    (67) exec_statement -> . EXEC NAME vals
    (68) exec_statement -> . EXEC NAME args
    (69) exec_statement -> . EXEC NAME
    (72) drop_table_statement -> . DROP TABLE NAME
    (73) update_statement -> . UPDATE NAME SET column_assignments WHERE a
    (76) while_statement -> . WHILE a BEGIN statements END
    (77) truncate_statement -> . TRUNCATE TABLE NAME
    (125) return_statement -> . RETURN a
    (78) delete_statement -> . DELETE FROM NAME WHERE a
    (120) function_name_prod -> . HOY
    (121) function_name_prod -> . CONCATENA
    (122) function_name_prod -> . SUBSTRAER
    (123) function_name_prod -> . CONTAR
    (124) function_name_prod -> . SUMA

    END             shift and go to state 313
    CREATE          shift and go to state 23
    USE             shift and go to state 24
    DECLARE         shift and go to state 25
    SET             shift and go to state 26
    SELECT          shift and go to state 27
    INSERT          shift and go to state 28
    CAS             shift and go to state 31
    ALTER           shift and go to state 32
    IF              shift and go to state 34
    EXEC            shift and go to state 35
    DROP            shift and go to state 33
    UPDATE          shift and go to state 36
    WHILE           shift and go to state 37
    TRUNCATE        shift and go to state 38
    RETURN          shift and go to state 29
    DELETE          shift and go to state 39
    HOY             shift and go to state 40
    CONCATENA       shift and go to state 41
    SUBSTRAER       shift and go to state 42
    CONTAR          shift and go to state 43
    SUMA            shift and go to state 44

    statement                      shift and go to state 45
    create_database_statement      shift and go to state 4
    use_statement                  shift and go to state 5
    declare_statement              shift and go to state 6
    set_statement                  shift and go to state 7
    create_table_statement         shift and go to state 8
    select_statement               shift and go to state 9
    insert_statement               shift and go to state 10
    create_function_statement      shift and go to state 11
    create_procedure_statement     shift and go to state 12
    call_function_statement        shift and go to state 13
    alter_table_statement          shift and go to state 14
    if_statement                   shift and go to state 15
    exec_statement                 shift and go to state 16
    drop_table_statement           shift and go to state 17
    update_statement               shift and go to state 18
    while_statement                shift and go to state 19
    truncate_statement             shift and go to state 20
    return_statement               shift and go to state 21
    delete_statement               shift and go to state 22
    function_name_prod             shift and go to state 30

state 311

    (55) create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 55 (create_function_statement -> CREATE FUNCTION NAME L_PAREN R_PAREN RETURN type AS BEGIN statements END .)


state 312

    (35) property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .

    R_PAREN         reduce using rule 35 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)
    COMMA           reduce using rule 35 (property -> NAME type null_prod REFERENCE NAME L_PAREN NAME R_PAREN .)


state 313

    (54) create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .

    SEMICOLON       reduce using rule 54 (create_function_statement -> CREATE FUNCTION NAME L_PAREN parameters R_PAREN RETURN type AS BEGIN statements END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for NAME in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 137 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 159 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 183 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 189 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 189 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 224 resolved as shift
WARNING: shift/reduce conflict for OR in state 232 resolved as shift
WARNING: shift/reduce conflict for OR in state 281 resolved as shift
